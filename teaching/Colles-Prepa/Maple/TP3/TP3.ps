%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP3.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP3.ps TP3.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.27:1005
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP3.dvi)
@start
%DVIPSBitmapFont: Fa cmtt12 12 14
/Fa 14 119 df<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F
6C48806C48131FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00
EA3FF0EA7FC05B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C
14F36C14C1C69138003FF0D91FF090C7FC2D2E7BAC33>97 D<ECFFF0010713FE011FEBFF
804914C04914E048B612F048EBC01F9038FE000F485A485A4848EB07E049EB03C0484890
C7FC5BA2127F90C9FCA25A5AA97E7EA27F003FEC01F06DEB03F86C7E6D13076C6C14F06C
6C130F01FFEB1FE06CEBE07F6C90B512C06C1580013F14006D13FC01075B010013C0252E
79AC33>99 D<ECFF80010713F0011F13FC497F90B6FC48158048018013C03A07FE003FE0
01F8EB0FF048481307484814F8491303003F15FC491301127F90C7FC16FE15005A5AB7FC
A516FC48C9FC7E7EA36C7E167C6C6C14FE7F6C7E6D13016C6CEB03FC6CB4130F6C9038C0
3FF86C90B512F06D14E06D14C0010F1400010313FC9038007FE0272E7BAC33>101
D<ED3FE0913801FFFC020713FE141F4A13FF5CECFFC015004948137E4A133C010314005C
A8003FB612F84815FCB7FCA36C15F8260003F8C7FCB3AD003FB612804815C0A46C158028
3E7DBD33>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCAA383FFFF8487FA47EEA0001
B3AD007FB612C0B712E016F0A216E06C15C0243E78BD33>105 D<383FFFFC487FB5FCA2
7E7EC7FCB3B3AD003FB612F84815FCB712FEA26C15FC6C15F8273D7ABC33>108
D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F13872607FE
07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3A53C7FFE0FFF07FF80B548
018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC0713C0267FFE1F13F000FF
017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFF
F80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33>I<EB01FE90
380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848EB7FC049133F4848EB
1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C14036C15F8A26D1307
003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF802603FF0313006CEBFFFE
6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<ED03FE3B7FFF801FFF80B5D8C07F
13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF09139FFC007E092388003C092C8
FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>114
D<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE147F5A153F
A37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C680011F13FF0100
1480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14E06D130F6D
EB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7FC242E79AC
33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3161FEE3F80
A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07FCC7FC2938
7EB633>I<D83FFCEB1FFE486C497E00FF5CA2007F80003F800000EC007FB3A75EA25DA2
6D5B90387F800FDAE03F13FC6DB612FE17FF6D806D01FE13FE01039038F83FFC010001C0
C7FC302C7FAA33>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13F86C496C13
F0D801F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC8007011F5CA2
ECC00F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE01005BA214
FF6E5AA36E5AA26E5A6E5A2E2B7EAA33>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmbx8 8 1
/Fb 1 79 df<B56C0103B5FC80808000016D9038000780808013EFEBE7FF01E37F01E17F
8101E07F6E7E6E7E141F6E7E6E7E6E138016C06E13E06E13F0ED7FF8ED3FFC151FED0FFE
ED07FF6F138717C76F13E76F13F7EE7FFF82828282A2828282177F173FB500C0141F170F
1707A2382E7DAD3F>78 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy8 8 4
/Fc 4 51 df<B812C0A32A037A9137>0 D<170EA3170F8384170384170184717E187818
7C84180FF007C0BA12F819FC19F8CBEA07C0F00F00183E601878604D5A60170360170795
C7FC5F170EA33E237CA147>33 D<D93F80EC07F0D9FFF0EC3FFC000301FC91B5FC4801FF
903901F80780D80F80903A8007C001C03D1E003FC00F8000E0486D6C48C7127000389026
0FF03E143048902607F83C14386E6C48141800606D6C5A00E06D6C48141C48027F150C5E
153F6F7E6F7E82151F6C6F141C0060DA3DFE1418DB78FF143800704A6C7E003001016D6C
1370003849486C6C13F06C903B07C00FF001E06C903B0F8007FC07C02807807E0003B512
806CB44801001400C601F0EC3FFCD93F80EC07F03E1F7C9D47>49
D<91B512C01307131FD97F80C7FC01FCC8FCEA01F0EA03C0485A48C9FC120E121E5A1238
12781270A212F05AA3B712C0A300E0C9FCA37E1270A212781238123C7E120E120F6C7E6C
7EEA01F0EA00FCEB7F80011FB512C013071300222B7AA52F>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr6 6 2
/Fd 2 51 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>49
D<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013
FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600
185A5A383FFFF85AB512F0A216217CA01E>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmsy6 6 1
/Fe 1 1 df<B712C0A322037A8D30>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi6 6 2
/Ff 2 113 df<000F13FC381FC3FF3931C707803861EC0301F813C0EAC1F0A213E03903
C00780A3EC0F00EA0780A2EC1E041506D80F00130C143C15181538001EEB1C70EC1FE000
0CEB07801F177D9526>110 D<3801E01F3903F07FC0390639C1E0390C3F80F0EB3E0000
1814F8013C137815F8C65AA49038F001F0A3EC03E0D801E013C0EBF00715809038F80F00
3803DC3CEBCFF8EBC7E001C0C7FC485AA448C8FCA2EA7FF012FF1D20809520>112
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmsy10 12 4
/Fg 4 51 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<121FEA3F80EA7FC0EAFF
E0A5EA7FC0EA3F80EA1F000B0B789E1C>I<49B4EF3FC0010F01E0923803FFF8013F01FC
030F13FE4901FF92383FE01F48B66C91397E0007C02603F80301E0D901F8EB01E02807E0
007FF049486D7E01806D6CD907C0147048C76C6C494880001EDA07FE49C87E001C6E6C01
3E150C486E6D48150E71481506486E01E0160793387FF1F0006092263FF3E08193381FFB
C000E004FF1780486F4915017090C9FC82707F8482717E844D7E6C4B6D1503006004EF17
00933803E7FE0070922607C7FF5DDC0F837F003004816D140E00384BC6FC0018033E6D6C
5C001C4B6D6C143C6C4BD91FFC5C6C4A486D6C5C6DD907E06D6C13036C6C49486D9038E0
0FE0D801F0013FC890B55A27007C03FE6F91C7FC90263FFFF8031F5B010F01E0030313F8
D901FECAEA7FC0592D7BAB64>49 D<92B6FC02071580143F91B7120001030180C8FCD907
FCC9FCEB1FE0EB3F80017ECAFC5B485A485A485A5B485A121F90CBFC123EA2123C127CA2
127812F8A25AA2B9FC1880A2180000F0CBFCA27EA21278127CA2123C123EA27E7F120F6C
7E7F6C7E6C7E6C7E137E6D7EEB1FE0EB07FC6DB47E010090B6FC023F1580140702001500
313A78B542>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi8 8 4
/Fh 4 111 df<90B612F812035A4815F03A1E0380C000003C130000701301130700E05C
EAC00638000E03A3131CA2133C140713381378A201F07FA21201A2D803E07FA200071303
13C0A26C486C5A251E7E9C29>25 D<1670A216F01501A24B7EA21507150DA21519153915
31ED61FC156015C0EC0180A2EC03005C14064A7F167E5C5CA25C14E05C4948137F91B6FC
5B0106C7123FA25B131C1318491580161F5B5B120112031207000FED3FC0D8FFF8903807
FFFEA22F2F7DAE35>65 D<EB07E0EB1FF890387C1CE0EBF80D3801F00F3803E007EA07C0
120FD81F8013C0A2EA3F00140F481480127EA2141F00FE14005AA2EC3F02EC3E06A25AEC
7E0E007CEBFE0C14FC0101131C393E07BE18391F0E1E38390FFC0FF03903F003C01F1F7D
9D25>97 D<3907C007E0391FE03FF83918F8783E393879E01E39307B801F38707F001260
13FEEAE0FC12C05B00815C0001143E5BA20003147E157C5B15FC0007ECF8081618EBC001
15F0000F1538913803E0300180147016E0001F010113C015E390C7EAFF00000E143E251F
7E9D2B>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmr8 8 6
/Fi 6 55 df<EC0380B3A4B812FCA3C7D80380C7FCB3A42E2F7CA737>43
D<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500
FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC38
00FFF0EB3FC01C2D7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387F
FFFEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060
EB07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E14
7C5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5
FC5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F8000
3F14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00
FC143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C0007013
1F6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<EB03F8EB0FFE9038
3E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091C7FC123EA2127EA2
127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814E0A214034814F0A4
127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F003803C03E6C6C5A3800
7FF0EB1FC01C2D7DAB23>54 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmex10 12 5
/Fj 5 61 df<EC01C01403EC0780EC0F00141E5C147C5C495A13035C495A130F5C131F49
C7FCA2137EA25BA2485AA3485AA212075BA2120F5BA2121FA25BA2123FA490C8FC5AA712
FEB3A5127FA77E7FA4121FA27FA2120FA27F1207A27F1203A26C7EA36C7EA2137EA27FA2
6D7E130F8013076D7E8013016D7E147C143C8080EC0780EC03C014011A7771832E>0
D<12E07E12787E7E7E7F6C7E6C7E7F12016C7E7F137C137E7FA26D7EA26D7EA26D7EA36D
7EA2801301A2801300A280A2147EA2147FA4801580A7EC1FC0B3A5EC3F80A715005CA414
7EA214FEA25CA213015CA213035CA2495AA3495AA2495AA249C7FCA2137E137C13FC5B48
5A12035B485A485A90C8FC121E5A5A5A5A1A777C832E>I<ED0F80153F15FF5C14074A13
00EC1FFC4A5A4A5A49485A495B495B92C7FC495A495A495A137F5C495A5A5C5A5C5A91C8
FC5A5B121FA25B123FA3485AA5485AB3B3B0215A5A7E59>56 D<EAFFF0B3B3B06C7EA56C
7EA3121F7FA2120F7F7E807E807E807E6D7E80133F6D7E6D7E6D7E816D7F6D7F6D6C7E6E
7E6E7E6EB4FC6E1380140180153F150F215A5A8059>58 D<913807FF80B3B3B04A1300A5
5D141FA35D143F5DA2147F5D14FF5DA2495B5D5B4990C7FC5C130F5C495A495A495AA249
5A485B4890C8FCEA07FC485A485AEA7FE0EAFF8090C9FC12FCB4FC7FEA7FE0EA1FF06C7E
6C7E6CB4FC6C7F6C7F6D7EA26D7E6D7E6D7E801307806D7F7F816D7FA281147F81143FA2
81141F81A3140F81A56E1380B3B3B021B56F8059>60 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmmi12 12 12
/Fk 12 119 df<010FB712C0013F16E05B90B8FC4817C02803E0060030C7FCD807801470
D80F001460000C130E48130C4815E0A248011C5B4813181240C7EA3801A214301470A2EC
F00314E0A21301A214C01303A29038078007A2130FA202007F5BA25B013E6D7E137EA249
80A21501495C01706D5A332C7EAA37>25 D<EC07FE91387FFFC00103B512F0010F14F890
391FE003FC013EC7127E0178141C01E01408D80180140048C9FC5A1206A57E3801803C39
00C7FF8090387FC3C014FFD801EF5BD80380C8FC0006C9FC5A5A5AA25AA25AA56CEC0180
00601403007015006C140E001E143C390FE001F86CB55A6C14C0C691C7FCEB1FF0272D7E
AB2E>34 D<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A78891B>58
D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212
065AA25A5A12200B1D78891B>I<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0
EB1FF0EB07FE903801FF809038007FE0EC1FF8EC03FE913800FF80ED3FE0ED0FF8ED03FF
030013C0EE3FF0EE0FFCEE01FF9338007FC0EF1FF0EF07FCEF01FF9438007FC0F01FE0A2
F07FC0943801FF00EF07FCEF1FF0EF7FC04C48C7FCEE0FFCEE3FF0EEFFC0030390C8FCED
0FF8ED3FE0EDFF80DA03FEC9FCEC1FF8EC7FE0903801FF80D907FECAFCEB1FF0EB7FC048
48CBFCEA07FCEA1FF0EA7FC048CCFC12FC12703B3878B44C>62 D<1860187018F01701A2
1703A21707170F84171FA217371767A217C7A2EE0187EE0307841606EE0E03160C1618A2
16301670166016C084ED01800303130116001506A25D151C15184B80A25D03E07F5D4A5A
92B7FC5C5C0206C8FC4A82A25C0238157F14305CA25C13015C49C97FA20106163F130E13
0C131C133C01FC167FD803FF4B487E007F01E0023FEBFFC0B56C5C6C5B42467DC549>65
D<001FB500F849B512E0485E6C4A6D14C026003FF8C8381FF800D91FE0ED07E0725A4948
5E96C7FCA349481506A449C95AA448485EA448485EA448485EA448485EA448484B5AA448
484BC8FCA448481506A448C95AA35FA25FA25F17E06C5E4C5A4CC9FC6C5D6D140E001F5D
6C6C5C000715E0D803F0EB03C06C6CEB0F806CB401FECAFC90387FFFF8011F13E0010190
CBFC43457AC342>85 D<EC0FC0EC7FE0903901F03038903903C0187C903907800CFC9038
1F0006013EEB07F8491303A25B00015D485AA2485A000F4A5A5B121FA249495A123FA348
C7485AA4007E4AC7FCA212FE1720037E1360A2127EA24B13C0A2003E13010203EB0180EC
067C6C010CEB03006CEB183C2607807013063A03C1E01E1C3A01FF800FF83A007E0003E0
2B2D7CAB33>97 D<01FCEB03F8486CEB1FFE3B0307803C0F8000069138E007C03A0C03C1
C0030018D9E3007F14E683003013EC14F8495A12605CA2484848495AA21200A24948495A
A34C5A49C7FCA24CC7FCA2137E167EA21820494A1360A34B4813C0485AA29338F00180EF
0300485A17065F03005B4848EC78700003ED3FE06C48EC0F80332D7DAB3A>110
D<EC07F0EC3FFE9138FC0F80903903E003C0903907C001E0D91F0013F0013E13004914F8
4914FC0001157C485A49147E1207485AA2121F5B003F15FE90C8FC5AA300FEEC01FCA316
F8481403A216F0150716E0ED0FC0A2ED1F801600007C143E157E6C147C5D6CEB01E06CEB
07C06C6C485A2603E07EC7FC3800FFF8EB3FC0272D7BAB2F>I<131FD97FC0EB01C02601
E1E0EB03E0260380F01307EA06008048ED0FC05A13011230EE1F801260495AA2484848EB
3F00A21200495A167EA2495AA25E49C7FCA3017E495AA31701017C903803F00313FCA392
3807E006A2137C030F130CA2013C011B1318013E1331011E01E11330903A0F83C0F0E090
3A07FF007FC0D900FCEB1F00302D7DAB38>117 D<011F140ED97FC0131F2601E1E0EB3F
80380380F0EA06006E14C048151F48ED0F80130100301507A2126049481303A248484814
00A21200495A1606A2495AA25E49C7FCA25E137EA25EA3495CA25EA2017C495A4BC7FCA2
017E1306013E5B011E5B6D5B903807C0E06DB45A010090C8FC2A2D7DAB2F>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmr12 12 48
/Fl 48 122 df<4AB4FC020F13C091383F00F002FC1338D901F0130C4948131E4948133E
4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D8007EC7FC8282B3
B001FFEC7F80007FD9FC1FB5FCA330467EC536>12 D<DBFF80EB3FE0020F9039E003FFF8
913B3F80780FE01E913BFC001C3F0007D901F0D9067CEB01804948D90FF8497E4948D93F
F0130749484948497E011F171F91C75B5B013E6E486D5A017E021F6E5A96C8FCADF10FE0
BBFCA3D8007EC7391F80001F190F1907B3B001FF4A6C497E007FD9FE1FB50087B512E0A3
4B467EC551>14 D<127812FCA27E7E6C7E123FEA0FC06C7E6C7E12016C7E137C7F130E7F
EB0380EB0100111275C431>18 D<130FEB1F80A2133F137FEBFF005BEA01F8485A485A5B
485A48C7FC123E12385A5A124011126CC431>I<121E123FEA7F80EAFFC0A313E0127FEA
3F60121E1200A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78C41B>39
D<1406140E14181430147014E0EB01C0EB0380EB0700A2130E5B133C133813785BA2485A
A2485AA212075BA2120F90C7FCA25A121EA2123EA3123C127CA6127812F8B21278127CA6
123C123EA3121EA2121F7EA27F1207A27F1203A26C7EA26C7EA213781338133C131C7F7F
A2EB0380EB01C0EB00E0147014301418140E1406176477CA26>I<7E7E12607E12387E7E
7E6C7EA26C7E6C7E7F137013787FA27FA27FA214801307A214C01303A214E01301A214F0
A3130014F8A61478147CB2147814F8A614F01301A314E0A2130314C0A213071480A2130F
1400A2131EA25BA25B137013F05B485A485AA248C7FC120E5A5A12305A5A5A16647ACA26
>I<16C04B7EB3AB007FBAFCBB1280A26C1900C8D801E0C9FCB3AB6F5A41407BB84C>43
D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212
065AA25A5A12200B1D78891B>I<B612C0A51A057F9721>I<121E123FEA7F80EAFFC0A4EA
7F80EA3F00121E0A0A78891B>I<14FF010713E090381F81F890387E007E01F8131F4848
EB0F80000315C04913074848EB03E0000F15F0A24848EB01F8A3003F15FCA348C812FEA6
4815FFB3A26C15FEA56D1301003F15FCA3001F15F8A26D1303000F15F0A26C6CEB07E000
0315C06D130F6C6CEB1F806C6CEB3F00017E137E90381F81F8903807FFE0010090C7FC28
427CC031>48 D<143014F013011307131F13FFB5FC13E713071200B3B3AF497E497E007F
B6FCA3204178C031>I<007FBAFCBB1280A3CEFCB0BB1280A36C190041187BA44C>61
D<DB0FFE146092B512C0020302F013E0913A1FFC01FC0191393FC0001E02FFC7EA0703D9
01FCEC0387D907F0EC00C74948156F4948153F4948151F49C9120F13FE000117075B4848
16031207491601120F491600121FA2123F491760A2127FA219005B12FFAC127F7FA21960
123FA27F121FA26C6C17C0A212076DEE018012036C6C16036D170000001706137F6D6C5D
6D6C5D6D6C5D6D6C5DD901FC4A5A6DB4EC0780DA3FC0011FC7FCDA1FFC13FC0203B55A02
0014C0DB0FFEC8FC3B467BC446>67 D<B8FC17F017FC00019039C00007FF6C499038007F
C0017FED1FE0EF07F0EF03FC717E717E84727E727E727EA2727E85180385A2180185A385
84A31A80AD1A00A36061A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5A
EF1FE001FFED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B>I<B912F8A30001
01C0C7127F6C49EC07FC017F15011700187C183C181CA284A31806A41807040C7FA395C7
FCA4161CA2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA319C0A3F00180
93C7FCA41803A21900A260A260A2181EA2183E187EEF01FE01FF1507486D147FB95AA33A
447CC342>I<B612F8A3000101E0C9FC6C5B6D5AB3B31830A418701860A518E0A3EF01C0
A217031707A2170F173F177F01FFEC01FF486D011F1380B9FCA334447CC33D>76
D<B56C933807FFFC6E5EA20001F1FE002600EFE0EE1BFC016F60A2D967F01633A2D963F8
1663A3D961FC16C3A3D960FEED0183A2027FED0303A36E6C1406A36E6C140CA26E6C1418
A36E6C1430A36E6C1460A26E6C14C0A36E6CEB0180A3037FEB0300A292383F8006A36F6C
5AA36F6C5AA26F6C5AA36F6C5AA36F6C5AA26FB45AA370C7FC13F0A2486C023E4A7ED80F
FF4D7EB500F0011C0107B512FCA34E447BC359>I<ED1FFC4AB512C091390FF007F89139
3F8000FE027EC7123FD901F8EC0FC049486E7ED90FE0EC03F849486E7E49486E7E49C912
7F01FE707E49161F0001844848707EA24848707E000F84491603001F84A2491601003F84
A3007F844982A300FF1980AC007F19006D5EA4003F606D1603A2001F606D1607000F60A2
6C6C4C5AA26C6C4C5A0001606C6C4C5A6D167F6D94C7FC6D6C15FE6D6C4A5A6D6C4A5AD9
03F0EC07E0D901FCEC1FC0D9007E4AC8FC6E6C13FE91390FF007F80201B512C09126001F
FCC9FC41467BC44C>79 D<B712FCEEFFC017F800019039C0000FFE6C49EB01FF017F9138
007F80EF1FE0170FEF07F018F8EF03FCA218FE1701A218FFA718FEA2170318FCA2EF07F8
18F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B612F017800280C9FCB3A9497E487FB6
12C0A338447CC342>I<B712E016FF17C000019039C0003FF86C49EB03FC017FEC00FF71
7E717E717E717E717EA284170384A760A21707604D5AA24D5A4D5A4DC8FCEE01FEEE07F8
EE3FE091B6C9FC16FC913980007F80EE0FE0707EEE01F883707E177FA284173F84A784A6
1A6084171FA2050F14C0496C6E7E486D0203EB0180B600C0903901FC0300716C5AF03FFC
CBEA07F843457CC348>82 D<B66C91383FFFF0A3000301E0C800071300C649ED01FC6D48
16F018006E5E013F5FA26E1501011F5F80010F4CC7FCA26E5D01071606A26D6C5DA28001
015EA26E15386D163081027F5DA26F14E0023F5DA26E6C495AA281020F4AC8FCA26F5B02
0714068102035CA26F131C02011418A26E6C5BA21680037F5BA2EEC0E0033F5B16E09238
1FE180A216F3030F90C9FCA2ED07FEA36F5AA36F5AA26F5AA3166044457EC349>86
D<EAFFF8A4EAF000B3B3B3B3B3A2EAFFF8A40D6475CA1B>91 D<EAFFF8A4EA0078B3B3B3
B3B3A2EAFFF8A40D647ECA1B>93 D<130C131E133F497EEBF3C03801E1E03803C0F03807
807848487E001E7F487F0070EB038048EB01C00040EB00801A0E75C331>I<EB07F8EB3F
FF9038F80FC03901C003E048C66C7E00066D7E48147CD80F80137E486C133E6D133F8182
A26C5A6C5AC8FCA4EC0FFF49B5FC90380FFC1FEB3FC0EBFF00EA03FCEA07F0485A121F48
5A5B127F176048C7FCA4153FA26C146F7F003F9138C7C0C0391FC001873B0FE00307E180
3A07F81E03FF2701FFFC0113003A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120312
011200B3EC01FC91380FFF8091383E07E091387000F802C0137CD9FD807F01FFC77EEE0F
804915C049EC07E017F0160317F8A217FC1601A317FEA917FCA21603A217F8A2EE07F017
E07FEE0FC001FBEC1F801700D9F180133ED9F0C05B9039E06001F891383C07E09039C01F
FF8090260003FCC7FC2F467DC436>I<EC7F80903803FFF090380FC07C90383E000E4913
0349EB01804848EB00C0000314074848EB0FE04848131FA2121F5B003FEC0FC0ED078000
7F91C7FC90C9FCA25AAA7EA27FA2123F16306C7EA2000F15606C7E6C6C14C00001EC0180
6C7E017CEB07006D130E90381FC078903807FFF001001380242E7DAC2B>I<16FE157FA3
15011500167EB3EC7F80903803FFF090380FC07890383F000C017C13064913034848EB01
FE00031400485A4848147EA2121F485AA2127FA290C8FCA25AA97EA37F123FA2121F7F00
0F15FE6C7E000314016C6CEB037E6C6C147F017C010E13806D011C13FE90380FC0F09038
03FFE09026007F0013002F467DC436>I<EB01FE903807FFC090381F03F090387C00F849
137C48487F48487F0007158049130F000F15C0121F4914E0003F1407A2127F90C713F0A3
5AA290B6FCA290C9FCA67EA36C7EA21630121F7F000F15606C7E000315C06C6CEB01806C
6CEB0300017C13066D131C90380FC078903803FFE09038007F80242E7DAC2B>I<EC1FC0
EC7FF0ECF038903803E07C903807C0FC90380F81FEA2EB1F0190383F00FCA2013E133001
7E1300B0B61280A3D8007EC7FCB3B1137F497E007FEBFF80A31F467EC51E>I<D901FCEB
1FC0903A0FFF807FE0903A3F07E1E1F090397C01F7819039F800FE01484890387C00E048
486D13000007143FA248486D7EA2001F81A7000F5DA26C6C49C7FCA20003143E6C6C5B6C
6C5B486C485A39033F07E090380FFF80260701FCC8FC0006CAFCA3120E120F7EA27F13E0
6CB512F86CECFF806C15E06D14F848B67E3A07E0000FFED80F80EB00FF001EC8123F003E
ED1F8048150F17C0481507A6007CED0F80A26CED1F006C153E6C6C5CD807E0495AD801F8
EB07E0D8007FEB3F8090261FFFFEC7FC010113E02C417DAB31>I<EA01FC12FFA3120312
011200B3EC01FE913807FF8091381E07E091383801F002607FECC000D9FD807F167C01FF
C7FC167E5BA35BB3A9486C14FFB5D8FC7F13FEA32F457DC436>I<13E0EA03F8487EA66C
5AEA00E090C7FCADEA01FC127FA3120312011200B3B0487EB512F8A315437EC21B>I<EA
01FC12FFA3120312011200B3B3B3A5487EB512FCA316457EC41B>108
D<2701FC01FEEC7F8000FF903B07FFC001FFF0913B0E03F00380FC913B3800F80E003E00
03495C000101C0D97C307F0000037E81D9FD805C01FFC7D83EC0130F043F81495DA34992
C7FCB3A9486C4A6C497EB5D8FC3FB5000FB512C0A34A2C7DAB51>I<3901FC01FE00FF90
3807FF8091381E07E091383801F0000301607F0001EBC0002600FD807F167C01FFC7FC16
7E5BA35BB3A9486C14FFB5D8FC7F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0
FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157F
A290C87E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D13
0100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F80
2A2E7DAC31>I<3901FC01FC00FF90380FFF8091383E07E091387001F800039038C0007C
2601FD807F6CB4C7123FEE1F8049EC0FC04915E0EE07F0A217F8160317FCA3160117FEA9
17FC1603A317F8160717F0EE0FE07FEE1FC06D1580EE3F00D9FD80137ED9FCC05B913860
01F891383C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512FCA32F3F7DAB36>I<9138
7F8006903903FFE00E90380FE07890383F001C017EEB061E5B4848EB033E4848EB01BE12
074848EB00FEA2485A003F157E5B127FA390C8FC5AA97E7FA3123F7F121F16FE6C7E0007
14016C7E6C6CEB037E00001406017C130C013F131890380FC0F0903803FFE09038007F00
91C7FCAE16FF037F13FEA32F3F7DAB33>I<3901F807E000FFEB1FF8EC383CEC607E0003
EBC0FF12013800F980EBFB00157E153C01FE1300A45BB3A77F487EB6FCA3202C7DAB26>
I<90383FE0303801FFF83907C01E70390F0007F0001C1301481300A2481470A212F01530
A37E7E007E1400EA7F80EA3FF0EBFF806C13F86C13FE0003EBFF806C14C0D8003F13E001
0313F09038001FF81403EC00FC0040147C00C0147E153E7E151EA37E151C7E153C6C1438
6C147000FB14E039F18001C039E0F00F8039C07FFE00EB0FF01F2E7DAC26>I<1306A513
0EA4131EA3133E137EA213FE12011207001FB512F0B6FCA2D8007EC7FCB3A4150CAA133E
013F1318A27F90380F803001071360903803E0C0903801FF809038003F001E3E7EBC26>
I<D801FC14FE00FF147FA300031401000114000000157EB3A916FEA3017C1301A2017EEB
037E013E147F011E010613806D011C13FE903807C078903803FFE09026007F8013002F2D
7DAB36>I<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160CA2017E
5CA2017F14386D1430A26D6C5BA26E13E0010F5CA26D6C485AA36D6C48C7FCA26E5A0101
1306A26D6C5AA2ECFE1CEC7E18A26E5AA3EC1FE0A36E5AA26E5AA36EC8FC2E2C7EAA33>
I<3B7FFFF007FFFCA30001D9800113C06C90C7EAFE006D147C6D14706D6C5B6D6C5BECE0
010107495AD903F090C7FCECF806903801FC0E01005BEC7E18EC7F30EC3F706E5A6E5A81
1407814A7EEC0DFC1418EC387E4A7E02607FECC01F01016D7ED903807F4A6C7E01061303
496D7E011C80013C1300017C147ED801FC14FFD80FFE4913C0B5D8800713FFA3302B7FAA
33>120 D<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160C6D141C
017E1418A26D5CA26E1370011F1460A26D6C5BA2800107495AA2ECF003010391C7FCA290
3801F806A2ECFC0E0100130CA2EC7E18A2EC7F38EC3F30A2EC1FE0A36E5AA26E5AA36EC8
FCA21406A35CA2141C1418A200385B127C00FE5BA25C1301387C0380D87007C9FCEA3C1E
EA1FFCEA03F02E3F7EAA33>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmbx12 12 30
/Fm 30 122 df<EB07C0EB0FE0EB1FF0EB3FF8137F13FFA25A4813F05A4813C01480381F
FE00EA3FF8EA7FE0EAFF8048C7FC127C1230151369C538>19 D<EA07C0EA1FF0EA3FF8EA
7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F0F788E1F>46 D<EC03C01407141F147FEB
03FF133FB6FCA413C3EA0003B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F
6D7E90B612E0000315F82607FC0313FE3A0FE0007FFFD81F806D138048C7000F13C04880
01C015E001F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13
804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814
FE495A494814F8D907E014F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A
5AB8FC17C0A42D417BC038>I<ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB
3FFED807E06D7E81D80FF86D138013FE001F16C07FA66C5A6C4815806C485BC814005D5E
4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEE
FF80816F13C017E0A26F13F0A217F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A
494913C05BD83F80491380D81FF0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F
49C7FC010113E02D427BC038>I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03
E7140715C7EC0F87EC1F07143E147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F0013
3E5BA25B485A485A485A120F5B48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB612
80A531417DC038>I<0007150301E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D
15E092C8FC01C0C9FCAAEC3FF001C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE
01FC6D7E01F06D13804915C0497F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12
FF7FA317F05B5D6C4815E05B007EC74813C0123E003F4A1380D81FC0491300D80FF0495A
D807FEEBFFFC6CB612F0C65D013F1480010F01FCC7FC010113C02D427BC038>I<4AB47E
021F13F0027F13FC49B6FC01079038807F8090390FFC001FD93FF014C04948137F4948EB
FFE048495A5A1400485A120FA248486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07
FC91381FFF8000FF017F13E091B512F89039F9F01FFC9039FBC007FE9039FF8003FF1780
4A6C13C05B6F13E0A24915F0A317F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C
6C15C06D4913806C018014006C6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7
FC9038003FF02D427BC038>I<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023F
EDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948
814948167F4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A349
94C7FC12FFAE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE
0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D
903AFFF001FF80023F90B6C7FC020715FC020115F0DA001F1480030001F8C8FC44467AC4
51>67 D<B9FC18F018FE727E19E026003FFEC7001F13F805017F9438003FFF060F7F727F
727F727F84737E737EA2737EA2737EA21B80A2851BC0A51BE0AD1BC0A51B8061A21B0061
62193F624F5A19FF624E5B06075B4E5B063F90C7FC4DB45A050F13F8BA5A19C04EC8FC18
F095C9FC4B447CC356>I<BA12F8A485D8001F90C71201EF003F180F180318011800A219
7E193EA3191EA21778A285A405F890C7FCA316011603161F92B5FCA5ED001F1603160116
00A2F101E01778A2F103C0A494C7FC1907A21A80A2190FA2191FA2193FF17F0061601807
181F4DB5FCBBFC61A443447DC34A>I<B64BB512FE8181A281D8003F6D91C7EA78008101
3D7F81133C6E7E6E7F6E7F6E7F6E7F82806E7F6E7F6F7E6F7F83816F7F6F7F6F7F6F7F6F
7F8382707F707F707F707F8482707F707F717E7113807113C019E0837113F07113F87113
FC7113FE19FF847213F884848484A28484197F193F191FA2190F1907B61603190119001A
78A24F447CC358>78 D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB
1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC130701
3F13F19038FFFC01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C
5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9
FC322F7DAD36>97 D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF
0003495A48494813805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C
7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007F
FC03F86DB55A010F14C0010391C7FC9038003FF82A2F7CAD32>99
D<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48
486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FC
A5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB
3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>101
D<EDFF80020F13E0027F13F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133FEB
7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A527
467DC522>I<137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90
C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>105 D<EB7FC0B5FCA512037E
B3B3B3A3B61280A519457CC420>108 D<90277F8007FEEC0FFCB590263FFFC090387FFF
8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003
D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7
B60081B60003B512FEA5572D7CAC5E>I<90397F8007FEB590383FFF8092B512E0028114
F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7
B60083B512FEA5372D7CAC3E>I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF90
26FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F001F82A2003F8249140700
7F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEB
FFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD
38>I<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301
FCEB07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017
FFA24C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02CFB512F002C314C0
02C091C7FCED1FF092C9FCADB67EA536407DAC3E>I<DA3FE0131E902603FFFC133E010F
01FF137E013F1480903AFFF80FE0FE489038E003F148EBC0014890388000FB4890C7127F
49143F001F151F485A160F5B127FA3485AAC6C7EA46C7EA26C6C141F163F6C6C147F6C15
FF6C6D5A6C9038E003EF6C9038F01FCF6DB5128F011FEBFE0F010313F89038007FC091C7
FCAD0307B512FCA536407CAC3B>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC
91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B6
12E0A5272D7DAC2E>I<90391FFC038090B51287000314FF120F381FF003383FC0004913
3F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C
14FC6C800003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA2
7EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E0
07FEC7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF120300
0F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090
391FFC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5
FCA50003EC000F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512
C7010F1407010313FE9026007FF0EBFC00372E7CAC3E>I<B6903803FFFCA5000101E090
38003E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED80
0F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15
FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578362C7EAB3B>I<B500FE90383FFFF0A5
C601F0903803E0006D6C495A013F4A5A6D6C49C7FC6E5B6D6C137E6DEB807C6D6D5A6DEB
C1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E6E7F6E7FA24A7F4A7F8291381F3FFCEC
3E1F027C7F4A6C7E49486C7F01036D7F49487E02C08049486C7F49C76C7E013E6E7E017E
141FB500E090B512FCA5362C7EAB3B>120 D<B6903803FFFCA5000101E09038003E006C
163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7FC
15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E
5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D001F1303D83F805B387FC007D8FF
E05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A6C5B000790CAFCEA01FC36407EAB
3B>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmcsc10 20.74 5
/Fn 5 113 df<B76C090FB612FC7063A37063D8000FF9C000D900FD6D097B01FCC7FC02
7D67A2023C6D09F35BA26F6CF201E3A36F6CF203C3A26F6CF20783A26F6DF10F03A36F6D
191EA26F6D193CA36F6D1978A26F6D19F0A3706CF001E0A2706CF003C0A3706CF00780A2
706DEF0F00A3706D171EA2706D5FA2706D5FA3706D5FA2716C4C5AA3716C4C5AA2716C4C
5AA3716D4BC7FCA2716D151EA3716D5DA2716D5DA3716D5DA2726C4A5AA3726C4A5AA272
6C4A5AA2726D49C8FCA3726D131EA2726D5BA3726D5BA2726D5BA3736C485AA2736C485A
A3736C485AA273018FC9FCA37313DEA27313FCA2735B147EA202FF705BA2010301C07048
4C7F497F011F01F8527F48B66C6F4893B612C0B8070FB812FC745AA374C8FC967677F5AA
>77 D<17074D7E4D7EA34D7EA24D7EA34D7EA24C7FA34C7F17DF04077F178FA2040F8017
07041F80EE1E03A2043E80EE3C01047C80EE7800A204F8804C137FA24B486D7EA2030381
4C131FA24B488084030F8293C77EA2031E8284033E82033C80A24B828403F8824B157FA2
0201834B153F0203834B151F92B8FC4A83A24A8492C91207A24A84021E82023E84023C82
A2027C8402788202F8844A177FA20101854A173F1303747E130787010F84011F86133F49
6C8501FF6000036D4D13F0000F01FE94B512FCB600C0031FECFFF8A45D5A7AD96A>97
D<BC12E0A4C602C0C8FC013F4903077F6D90CAFC6D183F1A1F1A0F1A071A03A21A01A287
1A00A31B78A51B7C063C143CA498C7FCA3187CA318FCA217011707173F92B6FCA492C712
3F170717011700A2187CA3183CA3F303C0A3F3078095C8FCA51B0F1C00A363A31B3EA21B
7EA21BFE1A01A2505A1A0F1A1F49187F496DED03FF90B56C157FBCFC63A3525878D760>
101 D<B8FCA4C602F8CAFC013F13C06D5B7F92CBFCB3B3AB1A0FA51A1EA61A3EA41A7E1A
7C1AFCA21901A219031907190F191F197F49EE01FF496D020713F890B56C91B5FCBBFCA4
485878D758>108 D<B912F8F0FF8019F019FEC602C0C76C6C7E013F4902077F6D90C800
0113F06D706C7E737E73B4FC857313801BC07313E0A21BF0A27313F8A31BFCA81BF8A34F
13F0A21BE0A24F13C01B804F130061F13FFC4F5A4E485A060713C0067F5B92B748C7FC19
F0198006F8C8FC92CCFCB3AF497F497F90B512F0B712F0A44E5878D760>112
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmr17 20.74 10
/Fo 10 118 df<ED1FFE4AB512E0020F14FC023F14FF9126FFE00713C0D903FEC713F0D9
07F0EC3FF8D91FC06E7E49C8EA07FE017E6F7E017883496F7F48486F7F12034983484816
7F01F88313FE6D6C153F486D82A4805CA37E6C5B6C48C95BD80078167F90CAFCA261A218
FF61A24D5B615F96C7FC4D5A60170F4D5AEF3FE04D5A4D5A4C48C8FCEE07FCEE1FF09238
1FFFC091260FFFFEC9FCA2EEFFE091C7EA07FCEE00FFEF3FC0EF1FF0717EEF07FE717E71
7F717F85727E727EA285727EA2727EA31A80A2841AC0A3EA07E0EA1FF8487E487EB5FCA5
1A80605BA26C48180013F001C05E007CCA5B7E4E5A7E6D4C5A6C6C5F000717FF01F04B5B
6C6C4B5B6C6C5F6CB4030F90C7FC6D6C4A5AD93FF04A5AD90FFCECFFF8902707FFE00713
E0010190B612806D6C92C8FC020F14F8020314E09126001FFEC9FC42757AF14F>51
D<EA0780EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0780C7FCB3B3AAEA07
80EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA07800E4A72C92B>58
D<BA12F0F1FF801AF01AFCF2FF80D8003F01F0C86C7F010749030713F04B030013FC6DF0
3FFEF20FFF747F08017F747F757E88757E1B1F881B0F88A2751380A21DC0A287A21DE0AA
1DC0A263A21D80A2511300A2641B1F64515A515A1BFF6408035B5090C7FC505AF23FFCF2
FFF007075B077F138092B848C8FC1AF01A8007F0C9FC03C0CDFCB3B3AB497FA2013F13FC
B8FCA55B7678F56C>80 D<DB3FF815E00203B512C0021F02F81301027F14FE49B7128049
D9C007EBC003D90FFEC7EA3FF0D91FF8913807F807D93FE0EC01FC4948913800FE0F4948
153F4890C9EA1F9F4848EE0FDF49EE07FF484882000F834982121F49177F003F183F5B19
1F127F190F5B190712FFA21903A31901A27FA36D1700A2127F7F7F1A006C7E7F7F6C7F80
6C7F14F86C7F6CEBFF8015F86CECFF806C15F86DECFF806D15F06D15FF6D16E0010316F8
6D16FE6D6C81021F16C0020382DA003F81030781DB007F80040780DC007F7F050F148017
00063F13C07213E018077213F084841AF8197F193F1AFC191FA2190F00E019FE1907A419
03A27EA57E1AFCA27E19077E1AF86C180FA26D18F0191F6D18E06D173F6D18C06DEF7F80
6D17FF017E4C13006D6C5E486C6C4B5AD90FF0ED0FF826FC07FC4B5AD901FF4B5A486C01
F0ECFFC091273FFF800F5B48010F90B548C7FC020315F8020015E048020F14809226007F
F8C8FC477C78F858>83 D<001FBE12F8A502F8C7000F01F0C7121F4801806E49020113FC
01FCC86C49EC003F491B1F01E01B07491B03491B0190C91800A2003E1D7CA2003C1D3CA3
481D1EA500701D0EA8481D07A6CA1900B3B3B3B14D7F4D7F057F13FE031FB812F8A56875
7BF473>I<ED1FFC4AB512C0020714F091391FF00FFC91397F8001FFD901FEC7EA7FC049
486E7E49486E7E49486E7E49486E7E49486E7E4948140101FF824890C91380A24848EE7F
C0A2485A000FEF3FE05BA2001F18F0181F485AA3007F18F8A349160FA212FF90B9FCA301
E0CBFCAB127F7FA3123FA36C7EA219386C7E1978000718707F000318F06C6C17E018016C
6DED03C06D6C1680013F16076D6CED0F006D6C151E6D6C5D6D6C5D6DB44A5A6D6C6C495A
DA3FE0EB1F80DA0FFE01FEC7FC0203B512F8DA007F13E0DB07FEC8FC3D4D7BCB46>101
D<131EEB7F80497E487F487FA66C5B6C5B6D5A011EC7FC90C8FCB3A7EB01F0EA07FFB5FC
A51201EA007F133FA2131FB3B3B3A3497EEBFFFEB612FCA51E727AF12A>105
D<DA1FFFEB038049B512E0010FECF807903A3FE001FE0F01FEC7EA1F9FD801F8EC07DFD8
07E0EC03FF484880498048C9127F48163F003E161F127E170F127C12FC1707A46C1603A2
7E7F6C7E7F6D92C7FCEA3FFC13FF6C13E06C13FF6C14F06CECFF806C15F86C15FE013F6E
7E010F15E0010381010081020F14FEDA007F7F1503DB003F1380040713C0040113E000E0
81177FEF3FF06C161F170FEF07F8A217037E1701A27EA37E18F07E17036D16E0A26D1507
6DED0FC06D168000FE161F017CED3F00486C157E6DEC01F826F80FC0EB07F026F003F8EB
7FC00100B6C7FC48013F13FC02071380354D7CCB3E>115 D<1407A85CA65CA35CA35CA2
5CA25BA25B5B5B5B5B5B48B712FE120FB8FCA3D8000190C9FCB3B3A2EF01C0B0EF03806D
7FA3027FEC0700815F6E6C130E021F141E6F131C6E6C5B6E6C13F8913901FF01F0913900
7FFFC0031F5BDB03FCC7FC326B7EE93D>I<02F8EE0F80D803FFEE3FFFB5030FB5FCA5C6
EE000F013F1603011F82A2010F82B3B3A660A460A3601307606E150E0103161E606E4B7F
010116706D6C03F07F6FD903E013F86E6C4948EBFFF8DA1FE0EB1F00DA0FFE13FE0203B5
12F8DA007F13E0030790C7EBC0004D4C7ACA58>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop 1166 809 a Fo(TP3)52 b Fn(Maple)g Fo(:)70 b(Suites)0
1431 y Fm(Exercice)36 b(1.)43 b(Comparaison)38 b(en)m(tre)f(calcul)f
(formel)g(et)h(calcul)f(n)m(um)n(\023)-54 b(erique)0
1551 y(1.1)33 b Fl(Ecrire)g(une)h(pro)s(c)m(\023)-46
b(edure)33 b(qui)g(calcule)h(le)f Fk(n)p Fl(-i)m(\022)-46
b(eme)33 b(terme)h(de)f(la)f(suite)i(suiv)-5 b(an)m(te)1001
1663 y Fj(8)1001 1753 y(<)1001 1932 y(:)1132 1739 y Fk(A)1205
1754 y Fi(0)1272 1739 y Fl(=)1385 1699 y Fi(11)p 1385
1716 71 4 v 1403 1773 a(2)1132 1859 y Fk(A)1205 1874
y Fi(1)1272 1859 y Fl(=)1385 1820 y Fi(61)p 1385 1836
V 1385 1893 a(11)1132 1979 y Fk(A)1205 1994 y Fh(n)1279
1979 y Fl(=)28 b(111)21 b Fg(\000)1677 1940 y Fi(1130)p
1661 1957 174 4 v 1661 2014 a Fh(A)1714 2023 y Ff(n)p
Fe(\000)p Fd(1)1867 1979 y Fl(+)2078 1940 y Fi(3000)p
1975 1957 348 4 v 1975 2014 a Fh(A)2028 2023 y Ff(n)p
Fe(\000)p Fd(1)2148 2014 y Fh(A)2201 2023 y Ff(n)p Fe(\000)p
Fd(2)2430 1979 y Fl(si)33 b Fk(n)28 b(>)f Fl(1)0 2135
y Fm(1.2)42 b Fl(Ecrire)h(une)g(pro)s(c)m(\023)-46 b(edure)43
b(qui)g(calcule)g(les)g Fk(n)g Fl(premiers)h(termes)f(de)g(la)f(suite)h
(\()p Fk(A)3237 2150 y Fh(n)3284 2135 y Fl(\))3322 2150
y Fh(n)p Fc(2)p Fb(N)3521 2135 y Fl(sous)g(la)0 2255
y(forme)36 b([[0)p Fk(;)17 b(A)497 2270 y Fi(0)536 2255
y Fl(])p Fk(;)g Fl([1)p Fk(;)g(A)800 2270 y Fi(1)839
2255 y Fl(])p Fk(;)g(:)g(:)g(:)33 b(;)17 b Fl([)p Fk(n;)g(A)1304
2270 y Fh(n)1351 2255 y Fl(]].)53 b(Repr)m(\023)-46 b(esen)m(ter)39
b(ainsi)d(le)h(comp)s(ortemen)m(t)g(de)f(la)g(suite)h(a)m(v)m(ec)h(un)0
2376 y(graphique.)0 2534 y Fm(1.3)29 b Fl(Recommencer)j(le)d(tra)m(v)-5
b(ail)29 b(pr)m(\023)-46 b(ec)m(\023)g(eden)m(t)32 b(en)e(prenan)m(t)g
(des)g(v)-5 b(aleurs)30 b(n)m(um)m(\023)-46 b(eriques)32
b(\()p Fa(evalf)p Fl(\))e(p)s(our)f Fk(A)3779 2549 y
Fi(0)0 2654 y Fl(et)k Fk(A)187 2669 y Fi(1)226 2654 y
Fl(.)44 b(Comparer)33 b(les)h(deux)f(calculs.)0 2812
y Fm(1.4)g Fl(Reprendre)h(les)f(questions)i(pr)m(\023)-46
b(ec)m(\023)g(eden)m(tes)35 b(p)s(our)d(la)h(suite)g(suiv)-5
b(an)m(te)1170 2897 y Fj(8)1170 2987 y(<)1170 3166 y(:)1300
2981 y Fk(U)1366 2996 y Fi(0)1433 2981 y Fl(=)28 b(1)1300
3101 y Fk(U)1366 3116 y Fi(1)1433 3101 y Fl(=)1547 3062
y Fi(1)p 1547 3078 36 4 v 1547 3135 a(3)1300 3221 y Fk(U)1366
3236 y Fh(n)1441 3221 y Fl(=)1555 3182 y Fi(10)p 1555
3198 71 4 v 1572 3256 a(3)1635 3221 y Fk(U)1701 3236
y Fh(n)p Fc(\000)p Fi(1)1861 3221 y Fg(\000)22 b Fk(U)2026
3236 y Fh(n)p Fc(\000)p Fi(2)2261 3221 y Fl(si)33 b Fk(n)28
b(>)g Fl(1)0 3362 y Fm(1.5)43 b Fl(Donner)f(l'expression)k(de)d
Fk(U)1282 3377 y Fh(n)1371 3362 y Fl(en)h(fonction)e(de)i
Fk(n)e Fl(\()p Fa(rsolve)p Fl(\))i(p)s(our)f Fk(U)2872
3377 y Fi(1)2956 3362 y Fl(=)i(1)d(et)h Fk(U)3358 3377
y Fi(1)3443 3362 y Fl(=)i(1)28 b(+)h Fk(")p Fl(.)0 3483
y(Comparer)k(les)h(limites)g(des)f(suites)h(obten)m(ues.)0
3659 y Fm(Exercice)i(2.)43 b(D)n(\023)-54 b(ev)m(elopp)s(emen)m(t)37
b(asymptotique)0 3780 y Fl(On)k(d)m(\023)-46 b(e\014nit)42
b(la)e(suite)i Fk(u)897 3795 y Fh(n)984 3780 y Fl(comme)d(\023)-46
b(etan)m(t)41 b(la)g(solution)g(unique)i(de)e(l')m(\023)-46
b(equation)42 b(tan)o(\()p Fk(u)3236 3795 y Fh(n)3283
3780 y Fl(\))g(=)f Fk(u)3536 3795 y Fh(n)3623 3780 y
Fl(dans)0 3900 y(l'in)m(terv)-5 b(alle)32 b(]\()p Fk(n)19
b Fg(\000)723 3861 y Fi(1)p 723 3877 36 4 v 723 3934
a(2)769 3900 y Fl(\))p Fk(\031)t(;)e Fl(\()p Fk(n)h Fl(+)1128
3861 y Fi(1)p 1128 3877 V 1128 3934 a(2)1174 3900 y Fl(\))p
Fk(\031)t Fl([,)31 b(p)s(our)g(tout)f Fk(n)e Fg(2)g Fm(N)p
Fl(.)43 b(Le)31 b(but)g(de)g(cet)h(exercice)h(est)f(de)f(trouv)m(er)h
(un)0 4021 y(d)m(\023)-46 b(ev)m(elopp)s(emen)m(t)36
b(asymptotique)e(de)f(cette)h(suite.)0 4160 y Fm(2.1)f
Fl(Calculer)h(n)m(um)m(\023)-46 b(eriquemen)m(t)35 b(les)f(v)-5
b(aleurs)33 b(de)g Fk(u)1907 4175 y Fi(1)1946 4160 y
Fl(,)g Fk(u)2062 4175 y Fi(2)2101 4160 y Fl(,)g Fk(u)2217
4175 y Fi(3)2288 4160 y Fl(et)g Fk(u)2458 4175 y Fi(10)2565
4160 y Fl(\()p Fa(fsolve)p Fl(\).)0 4318 y Fm(2.2)g Fl(Mon)m(trer)g
(que)85 b(lim)737 4377 y Fh(n)p Fc(!)p Fi(+)p Fc(1)992
4318 y Fk(u)1048 4333 y Fh(n)1122 4318 y Fl(=)28 b(+)p
Fg(1)p Fl(.)0 4509 y Fm(2.3)i Fl(P)m(our)g Fk(n)e Fg(2)g
Fm(N)p Fl(,)i(on)f(p)s(ose)h Fk(v)1128 4524 y Fh(n)1203
4509 y Fl(=)e Fk(n\031)20 b Fl(+)1542 4470 y Fh(\031)p
1542 4486 43 4 v 1546 4544 a Fi(2)1611 4509 y Fg(\000)c
Fk(u)1760 4524 y Fh(n)1807 4509 y Fl(.)42 b(Mon)m(trer)31
b(que)82 b(lim)2431 4569 y Fh(n)p Fc(!)p Fi(+)p Fc(1)2687
4509 y Fk(v)2734 4524 y Fh(n)2809 4509 y Fl(=)27 b(0.)42
b(V)m(\023)-46 b(eri\014er)31 b(ce)f(r)m(\023)-46 b(esultat)0
4663 y(graphiquemen)m(t.)0 4821 y Fm(2.4)41 b Fl(On)g(supp)s(ose)i(que)
f Fk(u)977 4836 y Fh(n)1066 4821 y Fl(=)g Fk(n\031)32
b Fl(+)1443 4782 y Fh(\031)p 1443 4798 V 1447 4856 a
Fi(2)1523 4821 y Fl(+)1637 4781 y Fh(a)1674 4790 y Fd(1)p
1637 4798 73 4 v 1652 4856 a Fh(n)1747 4821 y Fl(+)1864
4781 y Fh(a)1901 4790 y Fd(2)p 1861 4798 78 4 v 1861
4856 a Fh(n)1904 4837 y Fd(2)1976 4821 y Fl(+)c Fg(\001)17
b(\001)g(\001)26 b Fl(+)2341 4773 y Fh(a)2378 4781 y
Ff(p)p 2338 4798 79 4 v 2338 4856 a Fh(n)2381 4837 y
Ff(p)2455 4821 y Fl(+)i Fk(o)2623 4741 y Fj(\000)2700
4782 y Fi(1)p 2678 4798 V 2678 4856 a Fh(n)2721 4837
y Ff(p)2767 4741 y Fj(\001)2854 4821 y Fl(\()p Fa(sum)p
Fl(\).)69 b(D)m(\023)-46 b(eterminer)42 b Fk(a)3752 4836
y Fi(1)3792 4821 y Fl(,)0 4942 y Fk(a)51 4957 y Fi(2)124
4942 y Fl(et)33 b Fk(a)289 4957 y Fi(3)361 4942 y Fl(en)h(iden)m
(ti\014an)m(t)g Fk(u)1014 4957 y Fh(n)1094 4942 y Fl(a)m(v)m(ec)g(le)f
(d)m(\023)-46 b(ev)m(elopp)s(emen)m(t)36 b(asymptotique)f(de)f(tan\()p
Fk(u)3052 4957 y Fh(n)3121 4942 y Fg(\000)22 b Fk(n\031)t
Fl(\))33 b(\()p Fa(series)p Fl(\).)0 5062 y(P)m(our)43
b(manipuler)h(les)f(co)s(e\016cien)m(ts)i(du)e(d)m(\023)-46
b(ev)m(elopp)s(emen)m(t,)48 b(le)43 b(con)m(v)m(ertir)i(en)e(p)s(olyn^)
-49 b(ome)43 b(\()p Fa(convert)p Fl(\),)0 5183 y(puis)33
b(utiliser)h Fa(coeffs)p Fl(.)45 b(V)m(\023)-46 b(eri\014er)34
b(graphiquemen)m(t)g(ce)g(r)m(\023)-46 b(esultat.)0 5340
y Fm(2.5)33 b Fl(D)m(\023)-46 b(eterminer)33 b Fk(a)740
5355 y Fi(1)780 5340 y Fk(;)17 b(:)g(:)g(:)32 b(;)17
b(a)1066 5355 y Fi(12)1141 5340 y Fl(.)0 5498 y Fm(2.6)22
b Fl(Comparer)g(la)g(v)-5 b(aleur)22 b(n)m(um)m(\023)-46
b(erique)24 b(de)e Fk(u)1627 5513 y Fi(10)1723 5498 y
Fl(obten)m(u)h(a)m(v)m(ec)g Fa(fsolve)g Fl(et)f(a)m(v)m(ec)h(le)g
(dernier)f(d)m(\023)-46 b(ev)m(elopp)s(emen)m(t)0 5619
y(asymptotique.)1885 5944 y(1)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
