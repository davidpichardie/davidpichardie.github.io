%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP1.dvi
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP1.ps TP1.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.27:1005
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP1.dvi)
@start
%DVIPSBitmapFont: Fa cmr8 8 1
/Fa 1 52 df<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F1300
A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015C014
0F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB3F00
380780FC3801FFF038007FC01C2D7DAB23>51 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmcsc10 12 5
/Fb 5 113 df<B500F094381FFFFEA26E5FC6F2FE00017F61D93BFCEF77F8A2D939FE17
E7A3D938FFEE01C7A26E6CED0387A36E6CED0707A26E6C150EA26E6C151CA36E6C1538A2
6E6C1570A36E6C15E0A26E6CEC01C0A36F6CEB0380A26F6CEB0700A26F6C130EA36F6C5B
A26F6C5BA36F6C5BA26F6C5BA36F6C485AA293387F8380A2DC3FC7C7FCA3EE1FEEA2EE0F
FCA3017C6E5AA248B46E484A7E000701C04D7EB500FE041FB512FE705AA257447BC363>
77 D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A6C7EA34A
6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA24981011CC7
121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7ED81FF84A
7EB5027F13F8A335357CB43D>97 D<B812F0A3D803FEC7123F6C48EC07F816011600A217
78A21738A3171C1507A31700A25DA25D157F90B6FCA39038FC007F151F81A2811707A317
0E92C7FCA4171EA2173CA2177C17FC16011607486C143FB812F8A330337BB238>101
D<B512FEA3000390C9FCEA01FCB3A9EE01C0A416031780A41607A2160F161FA2167FEEFF
00486C1307B8FCA32A337BB233>108 D<B7FC16F016FC3A03FE0003FF6C489038007F80
EE3FC0EE1FE0EE0FF0A2EE07F8A217FCA617F8A2EE0FF0A2EE1FE0EE3FC0EEFF00ED03FE
90B612F816C001FCC9FCB3A2487EB512F8A32E337BB238>112 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi8 8 1
/Fc 1 111 df<3907C007E0391FE03FF83918F8783E393879E01E39307B801F38707F00
126013FEEAE0FC12C05B00815C0001143E5BA20003147E157C5B15FC0007ECF8081618EB
C00115F0000F1538913803E0300180147016E0001F010113C015E390C7EAFF00000E143E
251F7E9D2B>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmtt12 12 14
/Fd 14 119 df<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F
6C48806C48131FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00
EA3FF0EA7FC05B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C
14F36C14C1C69138003FF0D91FF090C7FC2D2E7BAC33>97 D<ECFFF0010713FE011FEBFF
804914C04914E048B612F048EBC01F9038FE000F485A485A4848EB07E049EB03C0484890
C7FC5BA2127F90C9FCA25A5AA97E7EA27F003FEC01F06DEB03F86C7E6D13076C6C14F06C
6C130F01FFEB1FE06CEBE07F6C90B512C06C1580013F14006D13FC01075B010013C0252E
79AC33>99 D<ED7FF84B7E5CA280157F1501ABEB01FF010713C1011F13F1017F13F990B6
FC5A4813813907FE003FD80FF8131F49130F48481307491303123F491301127F90C7FCA2
5A5AA97E7E15037F123F6D1307A26C6C130F6D131F6C6C133F6C6C137F2603FF81B512F0
91B612F8C602FD13FC6D13F96D01E113F8010F018013F0D901FEC8FC2E3E7DBC33>I<EC
FF80010713F0011F13FC497F90B6FC48158048018013C03A07FE003FE001F8EB0FF04848
1307484814F8491303003F15FC491301127F90C7FC16FE15005A5AB7FCA516FC48C9FC7E
7EA36C7E167C6C6C14FE7F6C7E6D13016C6CEB03FC6CB4130F6C9038C03FF86C90B512F0
6D14E06D14C0010F1400010313FC9038007FE0272E7BAC33>I<D901FEEB1FE0903A0FFF
C0FFF0013F01F313F84990B512FC90B7FC5A48010313E12607FC00EB80F849017F136048
4890383FC00049131FA2001F8149130FA66D131F000F5DA26D133F6C6C495A6D13FF2603
FF0390C7FCECFFFE485C5D5DD80FCF13C0D981FEC8FC0180C9FCA27FA26C7E7F90B512FC
6CECFFC06C15F0000715FC4815FF4816809038E0000748489038007FC090C8EA1FE04815
0F007E150700FE16F0481503A56C1507007E16E0007F150F6C6CEC1FC001E0147FD81FF8
903801FF80270FFF801F13006C90B55A6C5DC615F0013F14C0010F91C7FC010013F02E44
7DAB33>103 D<14E0EB03F8A2497EA36D5AA2EB00E091C8FCAA383FFFF8487FA47EEA00
01B3AD007FB612C0B712E016F0A216E06C15C0243E78BD33>105
D<1570EC01FCA2EC03FEA3EC01FCA2EC00701500AA90383FFFFC4913FE90B5FCA27F7F90
C7FCB3B3A9140115FCA21218007EEB03F81407B414F0140F9038803FE090B512C06C1480
6C14006C5B6C13F8000113E01F557BBD33>I<383FFFFC487FB5FCA27E7EC7FCB3B3AD00
3FB612F84815FCB712FEA26C15FC6C15F8273D7ABC33>108 D<4AB4FC263FFC0713C026
7FFE1F13F000FF017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FC
A35BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB
33>110 D<EB01FE90380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848
EB7FC049133F4848EB1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C
14036C15F8A26D1307003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF8026
03FF0313006CEBFFFE6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<ED03FE3B7F
FF801FFF80B5D8C07F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF09139FFC0
07E092388003C092C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>
114 D<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE147F5A
153FA37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C680011F13FF
01001480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14E06D13
0F6DEB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7FC242E
79AC33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3161FEE
3F80A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07FCC7FC
29387EB633>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13F86C496C13F0D8
01F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC8007011F5CA2ECC0
0F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE01005BA214FF6E
5AA36E5AA26E5A6E5A2E2B7EAA33>118 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmsy10 12 5
/Fe 5 113 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<92B6FC02071580143F91
B7120001030180C8FCD907FCC9FCEB1FE0EB3F80017ECAFC5B485A485A485A5B485A121F
90CBFC123EA2123C127CA2127812F8A25AA2B9FC1880A2180000F0CBFCA27EA21278127C
A2123C123EA27E7F120F6C7E7F6C7E6C7E6C7E137E6D7EEB1FE0EB07FC6DB47E010090B6
FC023F1580140702001500313A78B542>50 D<1706170F171FA2173EA2177CA217F8A2EE
01F0A2EE03E0A2EE07C0A2EE0F80A2EE1F00A2163EA25EA25EA24B5AA24B5AA24B5AA24B
5AA24BC7FCA2153EA25DA25DA24A5AA24A5AA24A5AA24A5AA24AC8FCA2143EA25CA25CA2
495AA2495AA2495AA2495AA249C9FCA2133EA25BA25BA2485AA2485AA2485AA2485AA248
CAFCA2123EA25AA25AA25A1260305C72C600>54 D<1B3C1B7CF201F8021FB912F091BA12
E001031980010FF0FE00013F18F84918C001F8C7D807F0C9FCD803F0140F4848141F120F
48485D003F153FA2127F5F4848147F90C8FC5A00F85E00E015FFC9FCA294CAFC5DA35E15
03A35E1507A35E150FA35E151FA35E153FA35E157FA35E15FFA293CBFCA25CA25D1403A2
5DA24A5AA34A5AA24A5AA25D143F5D027ECCFC147C14604E4E7CC636>84
D<1B0C1B1E1B3EA21B7CA21BF8A2F201F0A2F203E0A2F207C0A2F20F80A2F21F00A21A3E
A262A262A24F5AA2621903A24F5AA24F5AA24FC7FCA2193EA261A261A24E5AA24E5AA24E
5AA24E5AA2010C4CC8FC133C017C163EEA01FE00035F487E001E5F00387FD8707F4B5A00
E07FD8003F4B5A80011F4B5AA26E4A5A130F6E4AC9FC13076E143E13036E5C13016E5C7F
6F5B027F1301A26F485A143F6F485A141F6F485A140F6F48CAFC1407EDFC3E14035E15FE
02015B15FF6E5BA26F5AA26F5AA26F5AA26FCBFC150E4F647A8353>112
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmex10 12 6
/Ff 6 68 df<187C18FCEF01F8A2EF03F0EF07E0EF0FC0171F1880EF3F005F177E17FE4C
5A5F16034C5AA24C5A4C5AA24C5A167F94C7FC5E5E15015E15034B5AA24B5AA24B5AA24B
5AA2157F5E15FF93C8FCA24A5AA214035D14075DA2140F5D141FA25D143FA24A5AA34A5A
A34990C9FCA35B5CA213075CA3130F5CA2131FA25CA2133FA35C137FA4495AA5485BA55A
91CAFCA55A5BA5120FA35BA4121FA55BA4123FA75BA4127FAF5BA212FFB3A836B3638257
>48 D<12F87E127EA27E6C7E6C7E7F12076C7E7F12017F6C7E137E137F6D7EA26D7E6D7E
A26D7E801303801301801300806E7EA26E7EA26E7EA26E7EA2811407811403A26E7EA281
8082157FA282153F82A2151F82A26F7EA36F7EA36F7EA38281A28381A383167FA283A216
3FA283A3161F83A4707EA5707EA58382A5188082A518C0A382A418E0A5177FA418F0A717
3FA418F8AF171FA218FCB3A836B37D8257>I<EAFFE0B3A8127FA27FAF123FA47FA7121F
A47FA5120FA47FA31207A57F7EA5807EA56C7FA56D7EA4133F80A3131FA280A2130FA280
1307A3801303A2807FA36D7FA36E7EA36E7EA2141F81A2140F811407A2811403811401A2
6E7EA282157F82153FA26F7EA26F7EA26F7EA26F7E1501821500828283163F707EA2707E
707EA2707E160183707E177E177F83EF1F8018C0170FEF07E0EF03F0EF01F8A2EF00FC18
7C36B3638457>64 D<EF1FFCB3A818F8A2173FAF18F0A4177FA718E0A417FFA518C0A45E
A31880A55E1800A55E5FA54C5AA54C5AA45F163FA35FA2167FA25FA216FF5FA35D94C7FC
A25D5EA34B5AA34B5AA34B5AA25E153FA25E157F5EA215FF93C8FC5C5DA24A5AA214075D
140F5DA24A5AA24A5AA24A5AA24AC9FC5C13015C13035C13075C495AA2495A495AA249CA
FC137E13FE485A5B12035B485A120F5B485A48CBFC127EA25A5A36B37D8457>I<EAFFE0
B3B3B3A80B3E638057>I<EAFFE0B3B3B3A80B3E528057>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmmi12 12 15
/Fg 15 123 df<EB07E014F8EB00FE143F816E7EA2140F81A2140781A2140381A2140181
A2140081A2157E157FA281A282151FA282A2150F82A2150782A2150F4B7E153B1571EDE1
FCEC01C1EC03C04A487EEC0F00021E137E4A137F5C02F87F49481480495A4948131F4948
14C049C7FC49140F017E15E05B491407485A484815F000071503485A484815F848C81201
007E16FC00FE1500007C167E0038163E2F467BC439>21 D<121E123FEA7F80EAFFC0A313
E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78891B>
59 D<1860187018F01701A21703A21707170F84171FA217371767A217C7A2EE0187EE03
07841606EE0E03160C1618A216301670166016C084ED01800303130116001506A25D151C
15184B80A25D03E07F5D4A5A92B7FC5C5C0206C8FC4A82A25C0238157F14305CA25C1301
5C49C97FA20106163F130E130C131C133C01FC167FD803FF4B487E007F01E0023FEBFFC0
B56C5C6C5B42467DC549>65 D<027FB77E91B812F06E16FC02009039C00003FF6F480100
1380F17FC04BC8EA3FE0191FF10FF0A24A4816F81907A34A5AA2190FA24A4816F0191F1A
E0193F4A4816C0F17F80F1FF004E5A4A484A5A4E5AF01FF0F03FC04A4849B4C7FCEF1FFC
92B612F018FEDA7F80C7EA7F80F01FC0F00FF0727E4AC8120385727EA2494882A4495AA4
49485E1803A24E5A495A4E5A4E5AA249484B5A4E5A4D485A4D48C7FC4948EC0FFCEF3FF8
01FF913801FFE0007F90B71280B800FCC8FC17C045447CC34A>I<91267FFFC0933803FF
FE91B55F6E4E13FC0200F1FE00DB6FE0EE1BF8A203CF4D5A1B67A21BC7DA018F4C485AA2
DB87F0ED030FA2DA03079338061FC01A0CA21A1802064D485AA26F6C1560A2020C4D48C7
FCF10180A2F103000218040613FEA26F6C5CA202304C485A1930A2196002604C485AA26F
6CEB0180A24A4B48485A1806A26049484B495AA2047F5BA249C74A495A60A24D5A01064B
C7485AA2EE3F86A249038C4AC8FC1798A217B04903E014FEA2705A133801784B495A01FC
92C7FCD803FFEF07FE007F01F0011E0103B512FCB56C011C49804A010C5E5F447BC35E>
77 D<EC0FC0EC7FE0903901F03038903903C0187C903907800CFC90381F0006013EEB07
F8491303A25B00015D485AA2485A000F4A5A5B121FA249495A123FA348C7485AA4007E4A
C7FCA212FE1720037E1360A2127EA24B13C0A2003E13010203EB0180EC067C6C010CEB03
006CEB183C2607807013063A03C1E01E1C3A01FF800FF83A007E0003E02B2D7CAB33>97
D<EB0FE0EA07FFA25CEA001F130FA2495AA449C8FCA4137EA45BA4485AA2EC0FC0EC7FF0
3903F0F0789038F1803C9038F3001E01F6131F48487F01F814805B4914C0120F5BA3485A
A448C7121FA4007EEC3F80A31600007C5CA200FC147E15FE5DA2007C495AA24A5A5D4A5A
003C495A92C7FC6C131E000E5B000F13F8380783E03801FFC0D8007EC8FC22467CC429>
I<EC07F0EC3FFEECF80F903903E0018090390F8000C049C71260013E14E049EB03F04913
070001140F4848EB1FE05B0007EC0FC04848EB078092C7FC121F5B123F90C9FC5AA312FE
A45AA616201660A2007C15C0ED01806CEC0700150E001E14186C147039078003E03903E0
1F802600FFFCC7FCEB3FE0242D7BAB2A>I<EE03F8ED01FFA217F0ED00071603A2EE07E0
A4EE0FC0A4EE1F80A4EE3F00A4167EA2EC0FC0EC7FE0903901F030FC903803C018903807
800C90381F0006013EEB07F8491303A25B00015D485AA2485A000F4A5A5B121FA249495A
123FA348C7485AA4007E4AC7FCA212FE1720037E1360A2127EA24B13C0A2003E13010203
EB0180EC067C6C010CEB03006CEB183C2607807013063A03C1E01E1C3A01FF800FF83A00
7E0003E02D467CC433>I<EC0FF0EC7FFC903801F81E903807E00790390F800380EB1F00
017E13014914C0485A5B0003EC0380485A120F49EB0700001F140E495B003F1478EC03F0
397F007FC0D9FFFEC7FC14C090C9FC12FEA65AA41620007C1560A2007E15C0003EEC0180
ED0700001E140E6C1418157039078003E03903E01F802600FFFCC7FCEB3FE0232D7BAB2D
>I<EE07E0EE1FF8EE3C1CEE7006EEE03E0301137F030313FF4B5AEEC1FEA292380FC0FC
1778EE8000151FA44BC7FCA5157EA591B612805B6D1500DA00FCC7FCA34A5AA54A5AA64A
5AA54A5AA54A5AA64AC8FCA4143E147EA4147C14FCA25CA313015CA2001C5BEA3E03127F
00FF5B5CEAFE0700FC90C9FCEAF80EEA601CEA3838EA1FF0EA07C0305A7BC530>I<01FC
EB03F8486CEB1FFE3B0307803C0F8000069138E007C03A0C03C1C0030018D9E3007F14E6
83003013EC14F8495A12605CA2484848495AA21200A24948495AA34C5A49C7FCA24CC7FC
A2137E167EA21820494A1360A34B4813C0485AA29338F00180EF0300485A17065F03005B
4848EC78700003ED3FE06C48EC0F80332D7DAB3A>110 D<02FCEB07E0D903FFEB1FF890
3A0703C0381E903A1C01E0601F01389038F0C03F903A6000F1807F499038FB00FFA24848
13FE48C7147E4B133800061600A348495AA2C7FCA24A5AA44A5AA44A5AA317104A481330
A31760001E133F003F16C0EA7F80026FEB018026FF00CFEB030002C71306267E01875B3A
7C0303C0183A3C0E01E0703A1FFC00FFE0D803F0EB3F80302D7EAB37>120
D<131FD97FC014E02601E1E0EB01F0260380F01303EA06008048ED07E05A13011230EE0F
C01260495AA2484848EB1F80A21200495AEE3F00A2495AA2167E49C7FCA3017E5CA4017C
495A13FCA34B5AA2137C15074B5A7F153F6D137790390F81CFC0903803FF8F903800FE0F
14004B5AA293C7FC5DD807C0133E000F147E486C137C5D485A49485A49485A0018495A4A
5A4AC8FC6C137C380781F83803FFE0C66CC9FC2C407DAB30>I<027C130149B413034913
8049EBC00649140E49EBE00C90393F03F038903938007EF049EB1FE00160EB036049EB00
C0ED018090C7EA030015065D5D5D5D5D4A5A0207C7FC140E14185C5C5C495A49C8FC1306
4914084914185B49143849143048481470D8031014E048B413013A0FEFC007C03A0E03F0
1F80486CB51200486C5B00306D5A486D5A486D5AEC0F80282D7CAB2D>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmr12 12 53
/Fh 53 121 df<9239FF8003F8020F9038F01FFE913A3F807C3E07913BFC000E780F80D9
01F090381FF01F494890393FE03FC04948137F494814C0011FEE1F8091C7FC4991393F80
0600013E021F90C7FC137EAFB912F0A3D8007EC7D81F80C7FCB3B18301FF4A7E007FD9FE
1FB512E0A33A467EC539>11 D<4AB4FC020F13C091383F00F002FC1338D901F0130C4948
131E4948133E4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D800
7EC7FC8282B3B001FFEC7F80007FD9FC1FB5FCA330467EC536>I<DBFF80EB3FE0020F90
39E003FFF8913B3F80780FE01E913BFC001C3F0007D901F0D9067CEB01804948D90FF849
7E4948D93FF0130749484948497E011F171F91C75B5B013E6E486D5A017E021F6E5A96C8
FCADF10FE0BBFCA3D8007EC7391F80001F190F1907B3B001FF4A6C497E007FD9FE1FB500
87B512E0A34B467EC551>14 D<127812FCA27E7E6C7E123FEA0FC06C7E6C7E12016C7E13
7C7F130E7FEB0380EB0100111275C431>18 D<130FEB1F80A2133F137FEBFF005BEA01F8
485A485A5B485A48C7FC123E12385A5A124011126CC431>I<121E123FEA7F80EAFFC0A3
13E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78C41B
>39 D<1406140E14181430147014E0EB01C0EB0380EB0700A2130E5B133C133813785BA2
485AA2485AA212075BA2120F90C7FCA25A121EA2123EA3123C127CA6127812F8B2127812
7CA6123C123EA3121EA2121F7EA27F1207A27F1203A26C7EA26C7EA213781338133C131C
7F7FA2EB0380EB01C0EB00E0147014301418140E1406176477CA26>I<7E7E12607E1238
7E7E7E6C7EA26C7E6C7E7F137013787FA27FA27FA214801307A214C01303A214E01301A2
14F0A3130014F8A61478147CB2147814F8A614F01301A314E0A2130314C0A213071480A2
130F1400A2131EA25BA25B137013F05B485A485AA248C7FC120E5A5A12305A5A5A16647A
CA26>I<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA03
00A212065AA25A5A12200B1D78891B>44 D<B612C0A51A057F9721>I<121E123FEA7F80
EAFFC0A4EA7F80EA3F00121E0A0A78891B>I<14FF010713E090381F81F890387E007E01
F8131F4848EB0F80000315C04913074848EB03E0000F15F0A24848EB01F8A3003F15FCA3
48C812FEA64815FFB3A26C15FEA56D1301003F15FCA3001F15F8A26D1303000F15F0A26C
6CEB07E0000315C06D130F6C6CEB1F806C6CEB3F00017E137E90381F81F8903807FFE001
0090C7FC28427CC031>48 D<143014F013011307131F13FFB5FC13E713071200B3B3AF49
7E497E007FB6FCA3204178C031>I<EB03FE90381FFFC0017F13F03901F80FFC3903C001
FE48C7127F000EEC3F80000CEC1FC04815E048EC0FF0A248EC07F8A2127C00FE15FC7E6D
1303A46CC71207123EC813F8A3ED0FF0A216E0151F16C0153F1680ED7F00157E5D4A5A5D
4A5A4A5A4A5A4AC7FC141E5C5C5C495A495A495A91C7120C130E5B4914185B5B485A4914
3848C8123000061570000FB612F05A5A5AB712E0A326417BC031>I<49B4FC010F13F001
3F13FC9038FE01FE3901E0007FD80380EB3F8048C7EA1FC0000EEC0FE0D80F8014F0EA1F
E016F86D1307A36C5AA2D80380130FC813F0A3ED1FE016C0A2ED3F801600157E5DEC03F0
EC1FC0D90FFFC7FC15F090380001FCEC007EED1F8016C0ED0FE0ED07F016F8150316FC16
FE1501A216FFA3121E123F487E487EA216FEA24913036CC713FC127E0070EC07F8003015
F06C140F000E15E06CEC1FC0D803E0EB7F803A01FC01FE0039007FFFFC011F13E0010190
C7FC28427CC031>I<1507A25D5DA25D5DA25DA25C5C811406140E140C14181438143014
6014E014C01301EB038014005B13065B131C13185B137013605B12015B48C7FC5A120612
0E120C5A123812305A12E0B812C0A3C86CC7FCAC4B7E4A7F91B61280A32A427DC131>I<
000215C0D807C0130701FCEB7F8090B612005D5D15F05D158026063FFCC7FC90C9FCAE14
FF010713E090381F01F0903878007C01E07FD807807F90C71380ED0FC01202C8EA07E016
F0A3ED03F8A316FCA4121C123E127F487EA216F890C7FC4814074815F01260A26CEC0FE0
16C06C141F001C15806CEC3F006C147E3903C001FC3901F807F039007FFFE06D1380D907
FCC7FC26427BC031>I<EC07F8EC3FFF91B51280903903FC03C0903907E000E0D90F8013
3090391F0001F0013EEB03F84913075B1201485A49EB03F00007EC01E0000F91C7FC5B12
1FA25B123FA3127F90C9FCEC7F80903801FFF039FF0780FC90380E003E0118130F49EB07
8016C049EB03E04914F0ED01F8A24914FC150016FEA290C8FC16FFA27EA66C7EA216FE12
1FA2ED01FC6C7E16F8000714036C6C14F06DEB07E0000115C06C6CEB0F80017EEB3F0090
383F80FE90380FFFF86D5B0100138028427CC031>I<121CA2EA1F8090B712C0A3481680
1700A25E0038C8120C00305D127000605D5EA25E484A5A4BC7FCA2C812065DA25D5D5DA2
5D14015D1403A24AC8FCA25C140E141EA2143E143CA2147CA214FCA313015CA31303A613
07AA6D5A6D5A2A447BC231>I<14FF010713E0011F13F890383F00FE0178131F01E0EB0F
804848EB03C04848EB01E048C7FCED00F0120E1678121EA4121FA26D14F07FD80FF0EB01
E07FD807FEEB03C06DEB07806C9038C00F006CEBE01E6CEBF83890387FFEF090383FFFC0
130F6D7F010113F801077F90381E3FFFD9781F1380D9F00713C02601C00313E04848C613
F048C7EA7FF8000E141F001EEC0FFC48EC03FE150148EC007E163FA248151FA2160FA416
0E1278161E161C6C15186C1538001F15706C6C14E06C6CEB03C0D803F0EB0F80C6B4EB7F
0090383FFFFC010F13F00101138028427CC031>I<14FF010713E0011F13F890387F80FC
9038FC003E48487F4848EB0F804848EB07C0484814E01503484814F0123FED01F848C7FC
A216FC5AA2ED00FEA516FFA37E5DA27E7F001F5CA26C7E000714066C6C5B12016C6C5B01
7C137090383F01E090390FFF80FE903801FE0090C8FCA2ED01FCA416F8150316F0A2D807
80EB07E0487E486CEB0FC01680151F160049133E6C485B390C0001F80007495A3903E01F
C06CB55A6C6C48C7FCEB1FF028427CC031>I<007FBAFCBB1280A3CEFCB0BB1280A36C19
0041187BA44C>61 D<EB0FFC90387FFFC03901F007F039078001FC000EC7127E00188048
1580A248EC1FC0127800FE15E07EA4127E003C15C0C8123FA21680ED7F0015FE5D4A5AEC
03E04A5A4A5A92C7FC141E141C143C14385CA2146014E0A25CA213015CAA90C9FCAAEB03
C0497E497E497EA46D5A6D5A6D5A23467BC52E>63 D<16C04B7EA34B7EA34B7EA34B7EA3
ED19FEA2ED39FF1530A203707FED607FA203C07F163FA2DA01807F161FA24A486C7EA302
066D7EA2020E80020C1303A2021C8002181301A24A8082A24A81177FA291B77EA3D90180
C7EA1FE0A201038291C8120FA2498201061507A2010E82010C1503A249821701A2498283
137801F883487ED80FFF030313E0B500E0027FEBFFC0A342467DC549>65
D<DB0FFE146092B512C0020302F013E0913A1FFC01FC0191393FC0001E02FFC7EA0703D9
01FCEC0387D907F0EC00C74948156F4948153F4948151F49C9120F13FE000117075B4848
16031207491601120F491600121FA2123F491760A2127FA219005B12FFAC127F7FA21960
123FA27F121FA26C6C17C0A212076DEE018012036C6C16036D170000001706137F6D6C5D
6D6C5D6D6C5D6D6C5DD901FC4A5A6DB4EC0780DA3FC0011FC7FCDA1FFC13FC0203B55A02
0014C0DB0FFEC8FC3B467BC446>67 D<B8FC17F017FC00019039C00007FF6C499038007F
C0017FED1FE0EF07F0EF03FC717E717E84727E727E727EA2727E85180385A2180185A385
84A31A80AD1A00A36061A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5A
EF1FE001FFED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B>I<B912F8A30001
01C0C7127F6C49EC07FC017F15011700187C183C181CA284A31806A41807040C7FA395C7
FCA4161CA2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA319C0A3F00180
93C7FCA41803A21900A260A260A2181EA2183E187EEF01FE01FF1507486D147FB95AA33A
447CC342>I<B56C933807FFFC6E5EA20001F1FE002600EFE0EE1BFC016F60A2D967F016
33A2D963F81663A3D961FC16C3A3D960FEED0183A2027FED0303A36E6C1406A36E6C140C
A26E6C1418A36E6C1430A36E6C1460A26E6C14C0A36E6CEB0180A3037FEB0300A292383F
8006A36F6C5AA36F6C5AA26F6C5AA36F6C5AA36F6C5AA26FB45AA370C7FC13F0A2486C02
3E4A7ED80FFF4D7EB500F0011C0107B512FCA34E447BC359>77 D<ED1FFC4AB512C09139
0FF007F891393F8000FE027EC7123FD901F8EC0FC049486E7ED90FE0EC03F849486E7E49
486E7E49C9127F01FE707E49161F0001844848707EA24848707E000F84491603001F84A2
491601003F84A3007F844982A300FF1980AC007F19006D5EA4003F606D1603A2001F606D
1607000F60A26C6C4C5AA26C6C4C5A0001606C6C4C5A6D167F6D94C7FC6D6C15FE6D6C4A
5A6D6C4A5AD903F0EC07E0D901FCEC1FC0D9007E4AC8FC6E6C13FE91390FF007F80201B5
12C09126001FFCC9FC41467BC44C>79 D<B712FCEEFFC017F800019039C0000FFE6C49EB
01FF017F9138007F80EF1FE0170FEF07F018F8EF03FCA218FE1701A218FFA718FEA21703
18FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B612F017800280C9FCB3
A9497E487FB612C0A338447CC342>I<ED1FFC4AB512C091390FF007F891393F8000FE02
7EC7123F4948EC1FC0D903F0EC07E0D90FE0EC03F849486E7E49486E7E49C9127F01FE70
7EA24848707E00038449160F0007844848707EA24848707EA34848707EA3007F84A24982
A200FF1980AC007F1900A26D5EA3003F60A26D1603001F60A26C6C4C5AA20007606DD903
F0130F0003DA0FF85C6C6CD91C0E495A6C6CD91803495A4B7E017F01606D48C7FCD93F80
903800C0FED91FC0ECC1FCD90FE0EC63F8D903F0EC67E0D901F8EC7FC09026007E3091C8
FCDA3F9813FE91390FFC07F80201B515C09139001FFC3892C7123CA2711301A2171FF103
80F0800794380FC00FF0F03F95B51200A2715BA2715B715B715B725AF01F8042587BC44C
>I<49B41303010F13E0013FEBF8079038FE00FCD801F0EB1F0F4848EB079F4848EB01DF
48486DB4FC48C87E001E81123E007E81127C8212FC82A46C81A37E6C6C91C7FCA2EA3FE0
7FEA1FFEEBFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F80010F80010180D9001F7F
02017F9138001FFF150303001380167FEE3FC0161FA2EE0FE0124012C01607A47EA217C0
7E160F6C1680A26CED1F006C151E6C153ED8FBC05CD8F9F05CD8F07CEB03F03AE03FC00F
E0010FB51280D8C00349C7FC9038003FF02B467BC436>83 D<003FB912E0A3903BF0003F
F0007F01806D48130F003EC7150348EF01F00078170019701270A219301260A5481818A5
C81600B3B3A54B7EEDFFFC0103B7FCA33D447CC346>I<EB07F8EB3FFF9038F80FC03901
C003E048C66C7E00066D7E48147CD80F80137E486C133E6D133F8182A26C5A6C5AC8FCA4
EC0FFF49B5FC90380FFC1FEB3FC0EBFF00EA03FCEA07F0485A121F485A5B127F176048C7
FCA4153FA26C146F7F003F9138C7C0C0391FC001873B0FE00307E1803A07F81E03FF2701
FFFC0113003A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120312011200B3EC01FC91
380FFF8091383E07E091387000F802C0137CD9FD807F01FFC77EEE0F804915C049EC07E0
17F0160317F8A217FC1601A317FEA917FCA21603A217F8A2EE07F017E07FEE0FC001FBEC
1F801700D9F180133ED9F0C05B9039E06001F891383C07E09039C01FFF8090260003FCC7
FC2F467DC436>I<EC7F80903803FFF090380FC07C90383E000E49130349EB01804848EB
00C0000314074848EB0FE04848131FA2121F5B003FEC0FC0ED0780007F91C7FC90C9FCA2
5AAA7EA27FA2123F16306C7EA2000F15606C7E6C6C14C00001EC01806C7E017CEB07006D
130E90381FC078903807FFF001001380242E7DAC2B>I<16FE157FA315011500167EB3EC
7F80903803FFF090380FC07890383F000C017C13064913034848EB01FE00031400485A48
48147EA2121F485AA2127FA290C8FCA25AA97EA37F123FA2121F7F000F15FE6C7E000314
016C6CEB037E6C6C147F017C010E13806D011C13FE90380FC0F0903803FFE09026007F00
13002F467DC436>I<EB01FE903807FFC090381F03F090387C00F849137C48487F48487F
0007158049130F000F15C0121F4914E0003F1407A2127F90C713F0A35AA290B6FCA290C9
FCA67EA36C7EA21630121F7F000F15606C7E000315C06C6CEB01806C6CEB0300017C1306
6D131C90380FC078903803FFE09038007F80242E7DAC2B>I<EC1FC0EC7FF0ECF0389038
03E07C903807C0FC90380F81FEA2EB1F0190383F00FCA2013E1330017E1300B0B61280A3
D8007EC7FCB3B1137F497E007FEBFF80A31F467EC51E>I<D901FCEB1FC0903A0FFF807F
E0903A3F07E1E1F090397C01F7819039F800FE01484890387C00E048486D13000007143F
A248486D7EA2001F81A7000F5DA26C6C49C7FCA20003143E6C6C5B6C6C5B486C485A3903
3F07E090380FFF80260701FCC8FC0006CAFCA3120E120F7EA27F13E06CB512F86CECFF80
6C15E06D14F848B67E3A07E0000FFED80F80EB00FF001EC8123F003EED1F8048150F17C0
481507A6007CED0F80A26CED1F006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F
8090261FFFFEC7FC010113E02C417DAB31>I<13E0EA03F8487EA66C5AEA00E090C7FCAD
EA01FC127FA3120312011200B3B0487EB512F8A315437EC21B>105
D<EA01FC12FFA3120312011200B3B3B3A5487EB512FCA316457EC41B>108
D<2701FC01FEEC7F8000FF903B07FFC001FFF0913B0E03F00380FC913B3800F80E003E00
03495C000101C0D97C307F0000037E81D9FD805C01FFC7D83EC0130F043F81495DA34992
C7FCB3A9486C4A6C497EB5D8FC3FB5000FB512C0A34A2C7DAB51>I<3901FC01FE00FF90
3807FF8091381E07E091383801F0000301607F0001EBC0002600FD807F167C01FFC7FC16
7E5BA35BB3A9486C14FFB5D8FC7F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0
FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157F
A290C87E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D13
0100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F80
2A2E7DAC31>I<3901FC01FC00FF90380FFF8091383E07E091387001F800039038C0007C
2601FD807F6CB4C7123FEE1F8049EC0FC04915E0EE07F0A217F8160317FCA3160117FEA9
17FC1603A317F8160717F0EE0FE07FEE1FC06D1580EE3F00D9FD80137ED9FCC05B913860
01F891383C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512FCA32F3F7DAB36>I<9138
7F8006903903FFE00E90380FE07890383F001C017EEB061E5B4848EB033E4848EB01BE12
074848EB00FEA2485A003F157E5B127FA390C8FC5AA97E7FA3123F7F121F16FE6C7E0007
14016C7E6C6CEB037E00001406017C130C013F131890380FC0F0903803FFE09038007F00
91C7FCAE16FF037F13FEA32F3F7DAB33>I<3901F807E000FFEB1FF8EC383CEC607E0003
EBC0FF12013800F980EBFB00157E153C01FE1300A45BB3A77F487EB6FCA3202C7DAB26>
I<90383FE0303801FFF83907C01E70390F0007F0001C1301481300A2481470A212F01530
A37E7E007E1400EA7F80EA3FF0EBFF806C13F86C13FE0003EBFF806C14C0D8003F13E001
0313F09038001FF81403EC00FC0040147C00C0147E153E7E151EA37E151C7E153C6C1438
6C147000FB14E039F18001C039E0F00F8039C07FFE00EB0FF01F2E7DAC26>I<1306A513
0EA4131EA3133E137EA213FE12011207001FB512F0B6FCA2D8007EC7FCB3A4150CAA133E
013F1318A27F90380F803001071360903803E0C0903801FF809038003F001E3E7EBC26>
I<D801FC14FE00FF147FA300031401000114000000157EB3A916FEA3017C1301A2017EEB
037E013E147F011E010613806D011C13FE903807C078903803FFE09026007F8013002F2D
7DAB36>I<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160CA2017E
5CA2017F14386D1430A26D6C5BA26E13E0010F5CA26D6C485AA36D6C48C7FCA26E5A0101
1306A26D6C5AA2ECFE1CEC7E18A26E5AA3EC1FE0A36E5AA26E5AA36EC8FC2E2C7EAA33>
I<3B7FFFF007FFFCA30001D9800113C06C90C7EAFE006D147C6D14706D6C5B6D6C5BECE0
010107495AD903F090C7FCECF806903801FC0E01005BEC7E18EC7F30EC3F706E5A6E5A81
1407814A7EEC0DFC1418EC387E4A7E02607FECC01F01016D7ED903807F4A6C7E01061303
496D7E011C80013C1300017C147ED801FC14FFD80FFE4913C0B5D8800713FFA3302B7FAA
33>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmbx12 12 18
/Fi 18 121 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA5
264177C038>49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0FE0
007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C5A
6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC
4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8FC
017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFFF0010713
FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE001F16
C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC
15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA0FC0
EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300D80F
FEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<163FA25E5E
5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E147C14F8
EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7FC123E5A
12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<0007150301E0143F01FF
EB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1B5FC01C7
14C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C4815E0C8
FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC74813C012
3E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F1480010F01
FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC01079038807F8090
390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA248486D13C0EE
7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091B512F89039F9
F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A317F85BA4127F
A5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C6D485A6C9038
E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<121E121F13FC
90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E5E00785D1501
4B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2141F5D143FA2
147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<EC7FF00103B5
FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E497F4848EC7F80163F4848
15C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F014006C01FC5B6E485A6C90
38FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F8090B7FC48013F
14802607FC0F14C0260FF80314E04848C6FC496D13F0003F141F48481307496D13F81500
00FF157F90C8123F161F160FA21607A36D15F0127F160F6D15E06C6C141F6DEC3FC06C6C
EC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F91C7FC010013
F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF0489038800FF8
48496C7E48488048486D7E001F80003F1680A2484815C08117E0A212FF17F0A617F8A45D
127FA3003F5CA26C7E5D6C6C5B12076C6C131E6CEBC07C6CEBFFF8013F5B010F01C013F0
0101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C491380A217004B5A150F5E49
495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0D907FEC8FC2D
427BC038>I<BA12F8A485D8001F90C71201EF003F180F180318011800A2197E193EA319
1EA21778A285A405F890C7FCA316011603161F92B5FCA5ED001F160316011600A2F101E0
1778A2F103C0A494C7FC1907A21A80A2190FA2191FA2193FF17F0061601807181F4DB5FC
BBFC61A443447DC34A>69 D<B64BB512FE8181A281D8003F6D91C7EA780081013D7F8113
3C6E7E6E7F6E7F6E7F6E7F82806E7F6E7F6F7E6F7F83816F7F6F7F6F7F6F7F6F7F838270
7F707F707F707F8482707F707F717E7113807113C019E0837113F07113F87113FC7113FE
19FF847213F884848484A28484197F193F191FA2190F1907B61603190119001A78A24F44
7CC358>78 D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E72
7E727EA28684A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8
FC18F818E018F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F73
131F72141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457D
C354>82 D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A
48494813805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F
6DEC03C0A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86D
B55A010F14C0010391C7FC9038003FF82A2F7CAD32>99 D<EC3FF80103B57E010F14E001
3F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D1380485A001FED7FC05B00
3FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16
016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A01
0714F0010114C09026001FFEC7FC2C2F7DAD33>101 D<137C48B4FC4813804813C0A248
13E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518
467CC520>105 D<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE0003
13BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC
2E>114 D<B500FE90383FFFF0A5C601F0903803E0006D6C495A013F4A5A6D6C49C7FC6E
5B6D6C137E6DEB807C6D6D5A6DEBC1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E6E7F
6E7FA24A7F4A7F8291381F3FFCEC3E1F027C7F4A6C7E49486C7F01036D7F49487E02C080
49486C7F49C76C7E013E6E7E017E141FB500E090B512FCA5362C7EAB3B>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmcsc10 20.74 5
/Fj 5 113 df<B76C090FB612FC7063A37063D8000FF9C000D900FD6D097B01FCC7FC02
7D67A2023C6D09F35BA26F6CF201E3A36F6CF203C3A26F6CF20783A26F6DF10F03A36F6D
191EA26F6D193CA36F6D1978A26F6D19F0A3706CF001E0A2706CF003C0A3706CF00780A2
706DEF0F00A3706D171EA2706D5FA2706D5FA3706D5FA2716C4C5AA3716C4C5AA2716C4C
5AA3716D4BC7FCA2716D151EA3716D5DA2716D5DA3716D5DA2726C4A5AA3726C4A5AA272
6C4A5AA2726D49C8FCA3726D131EA2726D5BA3726D5BA2726D5BA3736C485AA2736C485A
A3736C485AA273018FC9FCA37313DEA27313FCA2735B147EA202FF705BA2010301C07048
4C7F497F011F01F8527F48B66C6F4893B612C0B8070FB812FC745AA374C8FC967677F5AA
>77 D<17074D7E4D7EA34D7EA24D7EA34D7EA24C7FA34C7F17DF04077F178FA2040F8017
07041F80EE1E03A2043E80EE3C01047C80EE7800A204F8804C137FA24B486D7EA2030381
4C131FA24B488084030F8293C77EA2031E8284033E82033C80A24B828403F8824B157FA2
0201834B153F0203834B151F92B8FC4A83A24A8492C91207A24A84021E82023E84023C82
A2027C8402788202F8844A177FA20101854A173F1303747E130787010F84011F86133F49
6C8501FF6000036D4D13F0000F01FE94B512FCB600C0031FECFFF8A45D5A7AD96A>97
D<BC12E0A4C602C0C8FC013F4903077F6D90CAFC6D183F1A1F1A0F1A071A03A21A01A287
1A00A31B78A51B7C063C143CA498C7FCA3187CA318FCA217011707173F92B6FCA492C712
3F170717011700A2187CA3183CA3F303C0A3F3078095C8FCA51B0F1C00A363A31B3EA21B
7EA21BFE1A01A2505A1A0F1A1F49187F496DED03FF90B56C157FBCFC63A3525878D760>
101 D<B8FCA4C602F8CAFC013F13C06D5B7F92CBFCB3B3AB1A0FA51A1EA61A3EA41A7E1A
7C1AFCA21901A219031907190F191F197F49EE01FF496D020713F890B56C91B5FCBBFCA4
485878D758>108 D<B912F8F0FF8019F019FEC602C0C76C6C7E013F4902077F6D90C800
0113F06D706C7E737E73B4FC857313801BC07313E0A21BF0A27313F8A31BFCA81BF8A34F
13F0A21BE0A24F13C01B804F130061F13FFC4F5A4E485A060713C0067F5B92B748C7FC19
F0198006F8C8FC92CCFCB3AF497F497F90B512F0B712F0A44E5878D760>112
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr17 20.74 15
/Fk 15 115 df<123E127F487EA27F7F7F127F6C7E6C7E6C7E12076C7E6C7F6C6C7E133F
6D7E6D7E6D7E13036D7E6D7E147F80EC1F80EC0FC0EC07E01403EC01F0EC00F815701D1F
6FF74F>18 D<EC03E0EC07F0EC0FF8A2141F143F147F15F0ECFFE04913C0491380150049
5A495AEB1FF05C495A495A49C7FC5B485A485A485A5B485A485A48C8FC123E5A5A12701D
1F60F74F>I<150E151E153E157E15FE14031407141F14FF130790B5FCB6FC14E7140713
F81300C7FCB3B3B3B3B24A7E4A7F49B512F8007FB812E0A5337272F14F>49
D<EA0780EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0780C7FCB3B3AAEA07
80EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA07800E4A72C92B>58
D<F007804E7EA34E7EA34E7EA34E7EA34E7EA24D7FA34D7F18DF18CF0507801887A2050F
801803A2051F80EF1E01A2053E80EF3C00A24D80197FA24D80193F0401815F191F040381
5F850407824D7FA2040F8294C77EA24C82041E80A2043E82043C80A24C821A7FA24C821A
3F0301835E1A1F0303835E860307844C81A2030F8493C97EA24B84031E82A2033FB97EA3
4B84A20378CA127F4B841B3F0201855D1B1F0203855D870207864B83A2020F8692CB7EA2
4A86021E84A2023E86023C84A24A861C7FA24A861C3F010187A201031A1F891307010F86
496C4F7F496C87D9FFFE4F7F00076D6C4DB512F8B600F8057FECFFFCA56E7A7CF977>65
D<BA12F0F1FF801AF01AFCF2FF80D8003F01F0C86C7F010749030713F04B030013FC6DF0
3FFEF20FFF747F08017F747F757E88757E1B1F881B0F88A2751380A21DC0A287A21DE0AA
1DC0A263A21D80A2511300A2641B1F64515A515A1BFF6408035B5090C7FC505AF23FFCF2
FFF007075B077F138092B848C8FC1AF01A8007F0C9FC03C0CDFCB3B3AB497FA2013F13FC
B8FCA55B7678F56C>80 D<001FBE12F8A502F8C7000F01F0C7121F4801806E49020113FC
01FCC86C49EC003F491B1F01E01B07491B03491B0190C91800A2003E1D7CA2003C1D3CA3
481D1EA500701D0EA8481D07A6CA1900B3B3B3B14D7F4D7F057F13FE031FB812F8A56875
7BF473>84 D<913803FF80021F13F891B512FE903A03FC01FF80903A07E0003FE0D91F80
EB0FF8013EC76C7E496E7E01F06E7E48486E7F717E4848153F4982D807A06F7E13FC487E
6D6F7E80A2717EA46C90C8FC6C5A6C5ACAFCA6EE07FF0303B5FC157F913903FFFE07021F
138091387FF800903801FFC0010790C7FCEB1FFCEB3FF0EBFFE0485B485B4890C8FC5B48
5A485AA2485A1A0E485AA312FF5B170FA4171FA26D153F007F163B177B6DDBF1FE131C00
3F16E16C6C14016C6C912603C0FF13386C6CEC0F806C6C6C903A1F007F80706C6D017CEC
E1E028007FF803F8EB3FFF011FB500E06D1380010391C7000713009026003FF8EC01FC47
4D79CB4F>97 D<14F8EA03FFB5FCA5C6FC133F131FA2130FB3B04CB47E041F13F8047F13
FE923A01FC01FF80923A07E0003FE0031FC7EA0FF0033EEC07FC0378EC01FE4B6E7EDAF9
E06F7EDAFBC06F7EDAFF808292C96C7E737E5C4A707E864A160386851B80A37313C0A31B
E0A31A7FA21BF0AE1BE0A21AFFA31BC0A2611B80A21B0061626E1607626E160F626E4C5A
02F75FDAE7804B5ADAE3C0157FDAC1E04B5ADAC0F04A48C7FC03784A5A4A6CEC0FF8031F
4A5A4A6C6CEB7FC0922703F803FFC8FC0300B512FC010E023F13E090C8D807FEC9FC4C79
7BF758>I<ED1FFC4AB512C0020714F091391FF00FFC91397F8001FFD901FEC7EA7FC049
486E7E49486E7E49486E7E49486E7E49486E7E4948140101FF824890C91380A24848EE7F
C0A2485A000FEF3FE05BA2001F18F0181F485AA3007F18F8A349160FA212FF90B9FCA301
E0CBFCAB127F7FA3123FA36C7EA219386C7E1978000718707F000318F06C6C17E018016C
6DED03C06D6C1680013F16076D6CED0F006D6C151E6D6C5D6D6C5D6DB44A5A6D6C6C495A
DA3FE0EB1F80DA0FFE01FEC7FC0203B512F8DA007F13E0DB07FEC8FC3D4D7BCB46>101
D<F103F8F13FFEDB1FF891B5FC92B5903903FC078002079139E007E01F913D1FF00FF81F
803FC0913B3FC003FC3E0002FFC7B45A49486E5A49486E5A49486E48EB1F8049486E6CEB
060097C7FC49486E7E013F82A249486E7EA201FF82A24A80A24884AA6C95C8FCA26E5CA2
017F5EA26D6C4A5AA2011F5E6D6C4A5AA26D6C4A5A6D6C4A5A496C4A5A6E4AC9FC903A0F
3FC003FC903A1E1FF00FF80207B512E0D91C0091CAFC013CEB1FF892CCFCA25BA3137CA4
137EA27F8080EB1FF091B612FE6DEDFFF818FF6D17E06D17F8010017FE010383010F84D9
3FE0C7000114E001FFC9120FD801FC04017F48489338003FF84848171F4848717E484817
07003F727E49170148CBFC737EA200FE85A76C616C616D1701003F616D17036C6C4D5A6C
6C4D5A6C6C4D5A6C6C4D5A6C6C4D5A26007F80DB01FEC7FCD93FE0ED07FCD90FF8ED1FF0
D903FFEDFFC0010001F8011F90C8FC021FB612F802011580DA000F01F0C9FC4A707DCC4F
>103 D<131EEB7F80497E487F487FA66C5B6C5B6D5A011EC7FC90C8FCB3A7EB01F0EA07
FFB5FCA51201EA007F133FA2131FB3B3B3A3497EEBFFFEB612FCA51E727AF12A>105
D<EB01F0EA07FFB5FCA51201EA007F133FA2131FB3B3B3B3B3AC497EEBFFFEB612FEA51F
787AF72A>108 D<D901F0903803FF80D807FF021F13F8B5027F13FE923A01FC03FF8092
3A03E0007FE0DB0F80EB1FF0031EC76C7EC65C013F496E7E011F496E7E5DEB0FF1DAF3C0
6E7E5D14F792C9FC02FF835CA35CA45CB3B3A8496C4B7FD97FFF030713F0B7D8800FB612
F8A54D4B7ACA58>110 D<D903E0EB1FE0D80FFFECFFFCB501037F923907E01F8092391F
807FC092383E00FF4B4813E000011478D8007F13F090383FE1E015C0EB1FE39126E78000
13C0EF7F8092C7EA3F0002EF91C7FC14EE14FE5CA45CA55CB3B3A480133F90B5FCB712C0
A5334B7ACA3D>114 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop 832 809 a Fk(TP1)52 b Fj(Maple)h Fk(:)70 b(Alg)l(\022)-74
b(ebre)52 b(lin)l(\023)-74 b(eaire)0 1480 y Fi(Exercice)36
b(1.)43 b Fh(Diagonaliser)33 b(la)f(matrice)1325 1873
y Fg(M)38 b Fh(=)1561 1613 y Ff(0)1561 1788 y(B)1561
1848 y(B)1561 1912 y(@)1689 1691 y Fh(0)122 b(1)160 b(1)g(1)1689
1812 y(1)122 b(0)f Fe(\000)p Fh(1)84 b Fe(\000)p Fh(1)1689
1932 y(1)f Fe(\000)p Fh(1)122 b(0)g Fe(\000)p Fh(1)1689
2053 y(1)83 b Fe(\000)p Fh(1)g Fe(\000)p Fh(1)122 b(0)2407
1613 y Ff(1)2407 1788 y(C)2407 1848 y(C)2407 1912 y(A)0
2266 y Fh(Dans)53 b(un)g(premier)h(temps)g(on)e(s'in)m(terdira)i
(l'usage)g(des)g(commandes)g Fd(jordan)p Fh(,)60 b Fd(eigenvals)55
b Fh(et)0 2386 y Fd(eigenvects)p Fh(.)46 b(Donner)33
b(la)f(matrice)h(de)g(passage)h(et)e(v)m(\023)-46 b(eri\014er)34
b(v)m(otre)g(r)m(\023)-46 b(esultat.)0 2556 y Fi(Exercice)36
b(2.)43 b Fh(Soit)1028 2770 y Fg(A)28 b Fh(=)1233 2570
y Ff(0)1233 2749 y(@)1361 2649 y Fg(a)23 b Fe(\000)f
Fg(b)h Fe(\000)g Fg(c)222 b Fh(2)p Fg(a)361 b Fh(2)p
Fg(a)1505 2769 y Fh(2)p Fg(b)228 b(b)22 b Fe(\000)h Fg(a)f
Fe(\000)h Fg(c)227 b Fh(2)p Fg(b)1505 2890 y Fh(2)p Fg(c)370
b Fh(2)p Fg(c)227 b(c)22 b Fe(\000)h Fg(a)f Fe(\000)h
Fg(b)2704 2570 y Ff(1)2704 2749 y(A)0 3063 y Fh(On)39
b(supp)s(ose)h(que)g(\()p Fg(a;)17 b(b;)g(c)p Fh(\))38
b Fe(6)p Fh(=)h(0.)62 b(Mon)m(trer)40 b(que)g Fg(A)f
Fh(est)g(diagonalisable)h(si)f(et)g(seulemen)m(t)j(si)d
Fg(A)g Fh(est)0 3183 y(in)m(v)m(ersible.)0 3353 y Fi(Exercice)d(3.)43
b Fh(On)33 b(p)s(ose)1337 3587 y Fg(A)28 b Fh(=)1542
3386 y Ff(0)1542 3566 y(@)1734 3465 y Fh(58)170 b(52)131
b(36)1695 3586 y Fe(\000)p Fh(29)107 b(187)131 b(9)1670
3706 y Fe(\000)p Fh(145)108 b(65)f(219)2394 3386 y Ff(1)2394
3566 y(A)0 3874 y Fh(Calculer)34 b Fg(A)458 3838 y Fc(n)537
3874 y Fh(p)s(our)f Fg(n)28 b Fe(2)g Fi(N)k Fh(de)h(deux)h(mani)m(\022)
-46 b(eres)34 b(di\013)m(\023)-46 b(eren)m(tes.)0 4044
y Fi(Exercice)40 b(4.)54 b Fh(T)-8 b(rouv)m(er)38 b(une)e(condition)h
(n)m(\023)-46 b(ecessaire)38 b(et)f(su\016san)m(te)h(p)s(our)e(que)h
(la)f(matrice)h(suiv)-5 b(an)m(te)0 4164 y(soit)33 b(diagonalisable.)
1386 4518 y Fg(A)28 b Fh(=)1590 4198 y Ff(0)1590 4373
y(B)1590 4433 y(B)1590 4493 y(B)1590 4553 y(B)1590 4616
y(@)1719 4276 y Fg(a)84 b Fh(0)g(0)g(0)89 b Fg(b)1720
4397 y Fh(0)84 b Fg(a)f Fh(0)88 b Fg(b)i Fh(0)1720 4517
y(0)85 b(1)f(2)g(1)i(0)1720 4637 y(0)j Fg(b)f Fh(0)83
b Fg(a)i Fh(0)1724 4758 y Fg(b)k Fh(0)84 b(0)g(0)g Fg(a)2346
4198 y Ff(1)2346 4373 y(C)2346 4433 y(C)2346 4493 y(C)2346
4553 y(C)2346 4616 y(A)0 5026 y Fi(Exercice)36 b(5.)43
b Fh(Calculer)34 b(l'ensem)m(ble)i(des)d(matrices)h(qui)f(comm)m(uten)m
(t)i(a)m(v)m(ec)f(la)e(matrice)h(suiv)-5 b(an)m(te.)1518
5359 y Fg(A)28 b Fh(=)1723 5159 y Ff(0)1723 5338 y(@)1851
5238 y Fh(1)83 b(0)k(0)1851 5358 y(0)c(0)g Fg(\025)1851
5479 y Fh(0)g(2)k(3)2213 5159 y Ff(1)2213 5338 y(A)0
5692 y Fh(Quel)33 b(est)g(la)g(dimension)h(de)f(l'espace)h(v)m
(ectoriel)g(obten)m(u)g(?)1885 5944 y(1)p eop
%%Page: 2 2
2 1 bop 0 84 a Fh(TP1)33 b Fb(Maple)2609 b Fh(Alg)m(\022)-46
b(ebre)33 b(lin)m(\023)-46 b(eaire)p 0 124 3820 4 v 0
407 a Fi(Exercice)25 b(6.)41 b Fh(Mon)m(trer)24 b(que)g(l'ensem)m(ble)j
Fe(T)e Fh(\()p Fi(R)p Fg(;)17 b Fh(4\))23 b(des)h(matrices)h
(triangulaires)f(sup)m(\023)-46 b(erieures)26 b(d'ordre)0
527 y(4)32 b(est)i(stable)f(par)f(m)m(ultiplication)i(et)f(in)m(v)m
(erse.)0 648 y(On)g(p)s(ose)919 941 y Fg(A)28 b Fh(=)1124
681 y Ff(0)1124 856 y(B)1124 916 y(B)1124 980 y(@)1252
760 y Fh(1)83 b(2)g(3)g(4)1252 880 y(0)g(1)g(2)g(3)1252
1000 y(0)g(0)g(1)g(2)1252 1121 y(0)g(0)g(0)g(1)1738 681
y Ff(1)1738 856 y(C)1738 916 y(C)1738 980 y(A)1874 941
y Fh(et)33 b Fg(B)g Fh(=)2198 681 y Ff(0)2198 856 y(B)2198
916 y(B)2198 980 y(@)2327 760 y Fh(1)83 b(1)g(0)f(0)2327
880 y(0)h(1)g(1)f(0)2327 1000 y(0)h(0)g(1)f(1)2327 1121
y(0)h(0)g(0)f(1)2813 681 y Ff(1)2813 856 y(C)2813 916
y(C)2813 980 y(A)0 1288 y Fh(Ces)34 b(deux)g(matrices)f(son)m(t-elles)h
(sem)m(blables)i(?)0 1458 y Fi(Exercice)g(7.)43 b Fh(D)m(\023)-46
b(eterminer)34 b Fg(a;)17 b(b;)g(c;)g(d;)g(e)32 b Fh(et)h
Fg(f)43 b Fh(p)s(our)32 b(que)i(les)f(v)m(ecteurs)1390
1591 y Ff(0)1390 1770 y(@)1519 1670 y Fh(1)1519 1790
y(1)1519 1911 y(0)1609 1591 y Ff(1)1609 1770 y(A)1713
1791 y Fg(;)1757 1591 y Ff(0)1757 1770 y(@)1885 1670
y Fh(1)1885 1790 y(2)1885 1911 y(1)1975 1591 y Ff(1)1975
1770 y(A)2079 1791 y Fg(;)2123 1591 y Ff(0)2123 1770
y(@)2252 1670 y Fh(1)2252 1790 y(1)2252 1911 y(2)2342
1591 y Ff(1)2342 1770 y(A)0 2124 y Fh(formen)m(t)g(une)g(base)h(de)f(v)
m(ecteurs)i(propres)e(de)g(la)f(matrice)1478 2457 y Fg(A)27
b Fh(=)1682 2257 y Ff(0)1682 2436 y(@)1811 2336 y Fg(a)88
b Fh(1)130 b Fg(b)1812 2456 y Fh(1)92 b Fg(c)129 b(d)1814
2576 y(e)86 b(f)94 b Fe(\000)p Fh(1)2254 2257 y Ff(1)2254
2436 y(A)0 2891 y Fi(Exercice)36 b(8.)43 b Fh(T)-8 b(rouv)m(er)34
b(tous)f(les)h(triplets)f(\()p Fg(x;)17 b(y)t(;)g(z)t
Fh(\))27 b Fe(2)h Fi(R)2160 2854 y Fa(3)2232 2891 y Fh(tels)33
b(que)h(la)e(matrice)1436 3235 y Fg(A)c Fh(=)1640 3035
y Ff(0)1640 3214 y(@)1769 3108 y Fg(x)125 b Fh(0)166
b(0)1772 3234 y(0)127 b Fg(y)2122 3152 y Fe(p)p 2205
3152 49 4 v 82 x Fh(3)1772 3361 y(0)1908 3278 y Fe(p)p
1991 3278 V 83 x Fh(3)c Fg(z)2296 3035 y Ff(1)2296 3214
y(A)0 3574 y Fh(admette)33 b(4)p Fg(;)17 b Fh(8)32 b(et)h(12)f(comme)i
(v)-5 b(aleurs)33 b(propres.)0 3744 y Fi(Exercice)j(9.)43
b Fh(Ecrire)34 b(une)f(pro)s(c)m(\023)-46 b(edure)34
b(qui)f(teste)h(si)f(une)g(matrice)g(est)h(nilp)s(oten)m(te.)1885
5944 y(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
