%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP6.dvi
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP6.ps TP6.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.03.07:1007
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin /setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse /TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def /TeXcolorgrey{setgray}def /TeXcolorgray{
setgray}def /TeXcolorhsb{sethsbcolor}def /currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse /DC{exch dup userdict exch
known{pop pop}{X}ifelse}B /GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC /Goldenrod{0 0.10 0.84 0 setcmykcolor}
DC /Dandelion{0 0.29 0.84 0 setcmykcolor}DC /Apricot{0 0.32 0.52 0
setcmykcolor}DC /Peach{0 0.50 0.70 0 setcmykcolor}DC /Melon{0 0.46 0.50
0 setcmykcolor}DC /YellowOrange{0 0.42 1 0 setcmykcolor}DC /Orange{0
0.61 0.87 0 setcmykcolor}DC /BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC /RedOrange{0 0.77 0.87 0
setcmykcolor}DC /Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC /Maroon{0
0.87 0.68 0.32 setcmykcolor}DC /BrickRed{0 0.89 0.94 0.28 setcmykcolor}
DC /Red{0 1 1 0 setcmykcolor}DC /OrangeRed{0 1 0.50 0 setcmykcolor}DC
/RubineRed{0 1 0.13 0 setcmykcolor}DC /WildStrawberry{0 0.96 0.39 0
setcmykcolor}DC /Salmon{0 0.53 0.38 0 setcmykcolor}DC /CarnationPink{0
0.63 0 0 setcmykcolor}DC /Magenta{0 1 0 0 setcmykcolor}DC /VioletRed{0
0.81 0 0 setcmykcolor}DC /Rhodamine{0 0.82 0 0 setcmykcolor}DC /Mulberry
{0.34 0.90 0 0.02 setcmykcolor}DC /RedViolet{0.07 0.90 0 0.34
setcmykcolor}DC /Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC /Lavender{0
0.48 0 0 setcmykcolor}DC /Thistle{0.12 0.59 0 0 setcmykcolor}DC /Orchid{
0.32 0.64 0 0 setcmykcolor}DC /DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}
DC /Purple{0.45 0.86 0 0 setcmykcolor}DC /Plum{0.50 1 0 0 setcmykcolor}
DC /Violet{0.79 0.88 0 0 setcmykcolor}DC /RoyalPurple{0.75 0.90 0 0
setcmykcolor}DC /BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC /Periwinkle
{0.57 0.55 0 0 setcmykcolor}DC /CadetBlue{0.62 0.57 0.23 0 setcmykcolor}
DC /CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC /MidnightBlue{0.98 0.13
0 0.43 setcmykcolor}DC /NavyBlue{0.94 0.54 0 0 setcmykcolor}DC
/RoyalBlue{1 0.50 0 0 setcmykcolor}DC /Blue{1 1 0 0 setcmykcolor}DC
/Cerulean{0.94 0.11 0 0 setcmykcolor}DC /Cyan{1 0 0 0 setcmykcolor}DC
/ProcessBlue{0.96 0 0 0 setcmykcolor}DC /SkyBlue{0.62 0 0.12 0
setcmykcolor}DC /Turquoise{0.85 0 0.20 0 setcmykcolor}DC /TealBlue{0.86
0 0.34 0.02 setcmykcolor}DC /Aquamarine{0.82 0 0.30 0 setcmykcolor}DC
/BlueGreen{0.85 0 0.33 0 setcmykcolor}DC /Emerald{1 0 0.50 0
setcmykcolor}DC /JungleGreen{0.99 0 0.52 0 setcmykcolor}DC /SeaGreen{
0.69 0 0.50 0 setcmykcolor}DC /Green{1 0 1 0 setcmykcolor}DC
/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC /PineGreen{0.92 0 0.59
0.25 setcmykcolor}DC /LimeGreen{0.50 0 1 0 setcmykcolor}DC /YellowGreen{
0.44 0 0.74 0 setcmykcolor}DC /SpringGreen{0.26 0 0.76 0 setcmykcolor}
DC /OliveGreen{0.64 0 0.95 0.40 setcmykcolor}DC /RawSienna{0 0.72 1 0.45
setcmykcolor}DC /Sepia{0 0.83 1 0.70 setcmykcolor}DC /Brown{0 0.81 1
0.60 setcmykcolor}DC /Tan{0.14 0.42 0.56 0 setcmykcolor}DC /Gray{0 0 0
0.50 setcmykcolor}DC /Black{0 0 0 1 setcmykcolor}DC /White{0 0 0 0
setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP6.dvi)
@start
%DVIPSBitmapFont: Fa cmsy10 12 1
/Fa 1 1 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi12 14.4 1
/Fb 1 111 df<013FEC0FF8D9FFC0EB7FFF00036D48B512C0903BC3F803F01FE0D80781
90390F800FF03C0F01FC1F0007F8000E023C1303001E6D4880001C5C6E5A003C5C00385C
A2D8780390C7FC00705BA25CD8F00715076000005BA2010F150F605CA2011F151F605C17
3F013F5EA24A147F60137F05FF131C4A15005E01FF4B133C193891C712034D1378481870
19F0494B13E01801000318C0180349EE07800401EB0F00933800FC3E49ED7FFCEF3FF0D8
01E0ED0FC03E357DB346>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy10 14.4 2
/Fc 2 37 df<007FBA12FEBCFCA36C19FE4805769F5D>0 D<020E1938021E193CA2023E
193E023C191E027C191F02788502F8864948737E4A19030103874948737E4948737E49CE
127C013E8749874848F30FC04848757ED80FE0F303F8003FBE12FE48F5FF80C0FC7E6CF5
FE00D80FE0CEEA03F8D803F0F307E06C6C515AD8007C51C7FC6D1B3E6D636D6C626D6C4F
5A6D6C4F5A0101636E19076D6C4F5A027897C8FC027C61023C191E023E193E021E193CA2
020E1938692B79B278>36 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmbx12 14.4 24
/Fd 24 119 df<EB3FF0B5FCA512017EB3B3A6B612E0A51B367BB525>16
D<EA0F80EA3FE0487EA2487E7F7F7FA214806C13C06C13E07E000713F0000113F838007F
FC133FEB0FFEEB03FF7FEB007E141C1404181772D343>18 D<EA07F0EA1FF8EA3FFE487E
A2B5128014C0A314E0A37EA27EEA1FFDEA07F1EA0001A2130314C0A313071480130FA214
005B133EA25B5B485A1203485A485A485A90C7FC120C132876D225>39
D<EA07F0487E487E487E487EB51280A76C13006C5A6C5A6C5A6C5A1111769025>46
D<157815FC14031407141F14FF130F0007B5FCB6FCA2147F13F0EAF800C7FCB3B3B3A600
7FB712FEA52F4E76CD43>49 D<EC3FFE0103B512E0010F14FC013F14FF90B712C048D9C0
7F7F2703FE000F13F8D807F801037FD80FE06D7F48486D7F48488001F01680486C6E13C0
7F486C6E13E07FA27013F0A56C5AA26C5AEA0FF0EA03C0C914E05EA218C05E1880A24C13
005F4C5A4B5B5F4B5B5F4B5B4B90C7FC4B5A5E4B5AED7FE04B5A4A5B4A48C8FC4A5A5D4A
48EB01F04A5AEC3F804AC7FC02FEEC03E0495A495A495A495AD91F80140749C8FC013E15
0F017FB7FC90B812C05A5A5A5A5A5A5AB9FC1880A4344E79CD43>I<932601FFFCEC01C0
047FD9FFC013030307B600F81307033F03FE131F92B8EA803F0203DAE003EBC07F020F01
FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901F88249498249498249
49824949824990CA7E494883A2484983485B1B7F485B481A3FA24849181FA3485B1B0FA2
5AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA21B0F6C6D1980A26C1A1F6C7F1C00
6C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C5A6D6D4C5A6D01FC4C5A6D6DEE7F
806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF80203903AFFE001FFF0020091B612C0
033F93C8FC030715FCDB007F14E0040101FCC9FC525479D261>67
D<B800C00103B612FCA5D8000701F8CAEBF000F31F80B3B3B11B3FA26D97C7FC81637F1B
7E6D6D17FE505A6E7E505A6E6D15076E4D5A6E6D4B5A6E6D4B5A6E01F84B5A6E6DDA03FF
C8FC6E6CB46CEB0FFE6F9039F001FFF8030F90B65A030316C0DB007F92C9FC040F14F8DC
007F13805E537CD167>85 D<146014F0497E497E497E90381FFF80497F497F90B57E4880
0007EB0FFE48486C7E261FF801138048486C13C0D87FC0EB3FE04848EB1FF048C7120700
78EC01E00030EC00C0241371D243>94 D<EC7FFF0107B512F0013F14FE90B77E48D9E00F
7F2703FE000113F0486C6D7F6EEB3FFC48826E131F83707FA36C496D7FA26C90C7FC6C5A
C9FCA6037FB5FC020FB6FC91B7FC01071487013FEBF0074913803901FFFC004813F0485B
485B485B4890C7FC5A5BA2485AA45EA26D5C007F151D163D6C6C02797F6C6D01F113F86C
9026C003E1EBFFE06C9026F81FC014F06C90B5487EC6ED001F011F01FC010713E0010101
E090C8FC3C387CB641>97 D<EB3FF0B5FCA51203C6FCB3A4923801FFE0030F13FE033FEB
FFC092B612F002F301017F913AF7F8003FFEDAFFE0EB0FFF03806D7F92C76C7F4A6E7F4A
824A6E7FA2727EA285A28584A31A80AC1A00A44E5AA36118FF616E4A5BA26E4A5B6E4A5B
6F495BDACFC04990C7FCDA87F0EB7FFC913A03FE03FFF849C6B612E0496D148049011F01
FCC8FC90C7000313C041547BD24B>I<913801FFF8021FEBFF8091B612F0010315FC010F
9038C00FFE903A1FFE0001FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F13
8091C7FC486F1300705A4892C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C0
7E6E140F6CEE1F806C6DEC3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390
B55A01001580023F49C7FC020113E033387CB63C>I<4DB47E0407B5FCA5EE001F1707B3
A4913801FFE0021F13FC91B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5
FC49487F4849143F484980485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA2
6C7F5F6C6D5C7E6C6D5C6C6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF
6D90B5128F0101ECFE0FD9003F13F8020301C049C7FC41547CD24B>I<913803FFC0023F
13FC49B6FC010715C04901817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E
48178048497F18C0488191C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6
127FA27F7EA218E06CEE01F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F80
6D6CECFF00D91FFEEB03FE903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F0
34387CB63D>I<EB3FF0B5FCA51203C6FCB3A4EE1FFC93B512C0030314F0030F8092391F
E07FFC92393F001FFE037C8003F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45C
B3ACB6D8F807B612C0A542537BD24B>104 D<137F497E000313E0487FA2487FA76C5BA2
6C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017EB3B3A6B612E0A51B547BD325>I<EB
3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225>108 D<D93FF0EB1FFCB591B512C0
030314F0030F8092391FE07FFC92393F001FFE0003027C80C602F07FDAF1E081ECF3C0DA
F7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542367BB54B>110
D<913801FFE0021F13FE91B612C0010315F0010F9038807FFC903A1FFC000FFED97FF86D
6C7E49486D7F48496D7F48496D7F4A147F48834890C86C7EA24883A248486F7EA3007F18
80A400FF18C0AC007F1880A3003F18006D5DA26C5FA26C5F6E147F6C5F6C6D4A5A6C6D49
5B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF807FFC6D90B55A010015C0023F91C8
FC020113E03A387CB643>I<90397FE003FEB590380FFF80033F13E04B13F09238FE1FF8
9139E1F83FFC0003D9E3E013FEC6ECC07FECE78014EF150014EE02FEEB3FFC5CEE1FF8EE
0FF04A90C7FCA55CB3AAB612FCA52F367CB537>114 D<903903FFF00F013FEBFE1F90B7
FC120348EB003FD80FF81307D81FE0130148487F4980127F90C87EA24881A27FA27F01F0
91C7FC13FCEBFFC06C13FF15F86C14FF16C06C15F06C816C816C81C681013F1580010F15
C01300020714E0EC003F030713F015010078EC007F00F8153F161F7E160FA27E17E07E6D
141F17C07F6DEC3F8001F8EC7F0001FEEB01FE9039FFC00FFC6DB55AD8FC1F14E0D8F807
148048C601F8C7FC2C387CB635>I<143EA6147EA414FEA21301A313031307A2130F131F
133F13FF5A000F90B6FCB8FCA426003FFEC8FCB3A9EE07C0AB011FEC0F8080A26DEC1F00
15806DEBC03E6DEBF0FC6DEBFFF86D6C5B021F5B020313802A4D7ECB34>I<D93FF89138
01FFC0B50207B5FCA50003ED001FC61607B3AE5FA35FA2017F5D173B177B6D6C14F3DC01
E313F06D6CD907C3EBFFC0903A0FFFC03F836D90B51203010114FE6D6C13F8020701E091
C7FC42377BB54B>I<B600F00107B5FCA5000101F8C8EA7FE06C6DED3F00A2017F163E6E
157E013F167C6E15FC6D5E6F13016D5E8117036D5E6F13076D5E6F130F6D5E6F131F6D93
C7FC815F6E6C133E177E023F147C6F13FC6E5C16816E5C16C3A26EEBE3E016E76E5C16FF
6E5CA26E91C8FCA26F5AA36F5AA26F5AA26F5AA26F5A6F5A40367DB447>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmcsc10 12 4
/Fe 4 110 df<DB03FF140C033F01F0131C4AB500FC133C91390FFE007FDA1FF090380F
C07CDA7F80903803E0FC4948C812F0D903FC15794948153FD91FF0151F4948150F494815
074A150349C9FC48481601120349160012074848177CA24848173CA2123FA249171C127F
A319005B12FFAC127F7FA2191CA2123F7FA2001F183C19386C7EA26C6C1778000318706D
17F0000118E06C6C16016D6C16C06E15036D6CED07806D6CED0F00D907F8151E6D6C5D6D
B45D6D6C6C495ADA1FF0EB07C0DA0FFEEB7F800201B500FEC7FCDA003F13F0030313803E
4879C54E>67 D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A
6C7EA34A6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA249
81011CC7121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7E
D81FF84A7EB5027F13F8A335357CB43D>97 D<B512FEA3000390C9FCEA01FCB3A9EE01C0
A416031780A41607A2160F161FA2167FEEFF00486C1307B8FCA32A337BB233>108
D<D8FFFEEE7FFFA26D93B5FC000318C06C1880D9DF80EC01DFA2D9CFC0EC039FA3D9C7E0
EC071FA2D9C3F0140EA3D9C1F8141CA2D9C0FC1438A3027E1470A26E14E0A391391F8001
C0A291390FC00380A3913907E00700A2913803F00EA36E6C5AA26E6C5AA3ED7E70A26F5A
A3486C6D5A487ED81FFC6D48EB3FC0B50080020FB5FCA2ED070040337BB24A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmbx12 12 29
/Ff 29 118 df<EA07C0EA1FF0487E487E487E7FA31480A37E7EEA1FF7EA07C7EA000713
0FA21400A25B131E133EA25B13FC5B485A485A1207485A485A90C7FC120C112278C41F>
39 D<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F0F788E1F>
46 D<EC3FF849B5FC010F14E0013F14F890397FF01FFC9039FFC007FE4890380001FF48
486D1380000716C049147F000F16E049143F001F16F0A2003F16F8A249141F007F16FCA6
00FF16FEB3A3007F16FCA56C6CEC3FF8A3001F16F0A2000F16E06D147F000716C06D14FF
6C6C4913806C6D4813006C6D485A90397FF01FFC6DB55A010F14E0010314809026003FF8
C7FC2F427CC038>48 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB7
12FCA5264177C038>I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A
0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A4
6C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90
C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49
C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFFF001
0713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE00
1F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFE
C7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA
0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300
D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<163FA2
5E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E147C
14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7FC12
3E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<0007150301E0143F
01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1B5FC
01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C4815
E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC74813
C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F148001
0F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC01079038807F
8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA248486D13
C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091B512F890
39F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A317F85BA4
127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C6D485A6C
9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<121E121F
13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E5E00785D
15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2141F5D14
3FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<EC7FF001
03B5FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E497F4848EC7F80163F
484815C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F014006C01FC5B6E485A
6C9038FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F8090B7FC48
013F14802607FC0F14C0260FF80314E04848C6FC496D13F0003F141F48481307496D13F8
150000FF157F90C8123F161F160FA21607A36D15F0127F160F6D15E06C6C141F6DEC3FC0
6C6CEC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F91C7FC01
0013F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF048903880
0FF848496C7E48488048486D7E001F80003F1680A2484815C08117E0A212FF17F0A617F8
A45D127FA3003F5CA26C7E5D6C6C5B12076C6C131E6CEBC07C6CEBFFF8013F5B010F01C0
13F00101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C491380A217004B5A150F
5E49495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0D907FEC8
FC2D427BC038>I<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B5
39E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948814948167F
4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C7FC12FF
AE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE0F806C6DEE
1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF001
FF80023F90B6C7FC020715FC020115F0DA001F1480030001F8C8FC44467AC451>67
D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E727E727EA286
84A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8FC18F818E0
18F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F73131F72141E
B700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457DC354>82
D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7E
A26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC0100
0313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013E
EBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97
D<EB7FC0B5FCA512037EB1ED0FF892B57E02C314E002CF14F89139DFC03FFC9139FF000F
FE02FCEB03FF4A6D13804A15C04A6D13E05CEF7FF0A218F8173FA318FCAC18F8A2177F18
F0A3EFFFE06E15C06E5B6E491380027C491300496C495A903AFC1FC07FFC496CB512F0D9
F00314C049C691C7FCC8EA1FF036467DC43E>I<EC3FFC49B512C0010F14F0013F14FC90
397FF003FE9039FFC001FF0003495A48494813805B120F485AA2485A6F1300007F6E5AED
00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F00
6C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391C7FC9038003FF82A2F7CAD32
>I<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039FFF8
07FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA3127F5BA212FFAC
127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038F01F
EF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>I<EC3FF80103B57E
010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D1380485A001F
ED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F
17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE
011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<EB7FC0B5FCA512037EB1
ED07FE92383FFF8092B512E002C114F89139C7F03FFC9138CF801F9139DF000FFE14DE14
FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E>104 D<137C48B4FC48138048
13C0A24813E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AF
B6FCA518467CC520>I<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>108
D<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512E002816E4880913D
87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C13
0F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>
I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F00039039
9F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1F
FC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000
078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F1700A46C6C4A
5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB5
5A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90387F807FB53881FFE0028313
F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E0
92C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B51287000314FF120F
381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387F
FFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F020313E0140000
F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A
00FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131F
A2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C013
7F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<
D97FC049B4FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E491380017FD901F7
13FE9138F807E76DB512C7010F1407010313FE9026007FF0EBFC00372E7CAC3E>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmbx12 17.28 24
/Fg 24 121 df<EF7FFF041FB512E04BB612FC030F81037F6F7E4AB5D8C0037F020701FC
C76C7E4A01E0EC1FF0023F0180147F4A90C748487EDAFFFC5C49498260495B5D5BA2495B
A3725BA2725B725BF13F8096C9FCAA0503B512FEBBFCA6D8000F01E0C7120184B3B3AF00
3FB6D8F803B71280A651647DE35A>12 D<140CEC7F80ECFFC04913E04913F015F85B5B49
13FC5BA24913F890B5FC4814F015E04814C0481400485B4813F814E04813804848C7FC48
5A13F013C06CC8FC123C12181E1C5EE551>19 D<EA01F8EA07FF4813804813C04813E048
13F0A2B512F8A214FCA314FEA27EA27E7E6C13BE6C133EEA01FCC7FCA2147CA514F8A3EB
01F0A2EB03E0A2EB07C0130F1480131FEB3F00137E13FE485A485A485A485A5B6C5A6CC7
FC173174E32D>39 D<16F04B7E1507151F153FEC01FF1407147F011FB5FCB7FCA41487EB
E007C7FCB3B3B3B2007FB91280A6395D74DC51>49 D<913801FFF8021FEBFFC091B612F8
010315FF010F16C0013F16F09026FFF80180489026C0003F13FE4890C7000F7FD807FC02
03148048486E14C048486E14E04981D83FF86F13F001FE6F13F8487E6E6E13FC80B56F13
FE80A319FF83A26C5BA26C5BA26C90C8FCEA07FCD800E04B13FE90C9FCA219FC5FA219F8
5F19F04D13E0A24D13C0198094B512004C5B604C5B4C5B4C5B604C90C7FC4C5A4C5A4C5A
4B13E04B5B4B5B4CC8FC4B5A4B5AED3FE04B48143F4B5A4A90C8FC4A5ADA07F8157E4A5A
4A5A4A5A4A5A02FEC912FE495A495A4948ED01FC4948150749B8FC5B5B90B9FC5A4818F8
5A5A5A5A5AA2BAFC19F0A4405D78DC51>I<B912F8A6D8000102C0CBFCB3B3B1F307E0A5
F30FC0A61B1FA31B3F1C80A21B7FA21BFFA262A262625013006262624FB5FC1907191F4E
B6FCBDFC63A553627AE161>76 D<BA12F8F1FFE01AFEF2FFC01BF01BFED800010280C76C
7F070714C0070080083F13F8080F7F747F747F8986897480A3757FA389A865A398B55AA2
6562655091C9FC64505B081F5B505B97B55A07071480077F49CAFC93B812F81BC050CBFC
A2747E932680000314E0DE007F13F8071F7F07077F737F7380738088747FA2747FA3747F
A988A91F0F76EC1F80A286A277133F741700748067746E13FEB96E6E485A093F9038FE07
F87590B55A09075D09015DE1003F5CD001FCC7FC71637AE178>82
D<91381FFFFC0103B612E0011F15FC017F15FF90B812C0489026F0003F13F04803077F6E
01017F707F486D6E7E8583717FA26C4982836C4982A238007FC0011FC8FC90C9FCA7047F
B5FC033FB6FC0203B7FC143F49B5EAF00F0107EBFE00011F13F0017F13C048B5C7FC4813
FC485B485B485B5C5A485BA291C8FCB5FCA45FA25F6C6D143B177B6C6D14F36EEB01E36C
6D0107806C6DD90FC313FF6C01FFD9FF8114FE00019126FFFE0114FF6C6C4A7E011F02F0
7F010302C0131F9026003FFCC7000313FE48407BBF4E>97 D<92380FFFFC4AB612E0020F
15FC023F15FF91B8128001039026FE000713C04901F015E0011F01C05B4990C7FC49484A
13F0495A485B5A5C487013E0485B7113C0485B0501130048EE007C95C7FCA2485BA4B5FC
AC7EA280A27EA36C7F19FC7E806CEF01F86C7F6EED03F06C6D15076CEF0FE06D6C6CEC1F
C06D6DEC3F806D6DEC7F00010701FCEB01FE6D9039FF801FFC010091B55A023F15E0020F
1580020102FCC7FCDA000F13C03E407BBF48>99 D<F17FF8050FB5FCA6EF000F8484B3A9
ED0FFF4AB512F0020F14FE023FECFF8391B712E301039138007FF34901F0EB07FB011F01
C00101B5FC49497F4948C8123F49488148498148835C485B5AA2485BA25AA3485BA4B5FC
AC7EA47E80A27EA27E807E6E5D6C5F6C6D5D6C6D5D6E92B5FC6D6C5C011F6D0107806D01
E0D91FF77F6D01FCD9FFE7EBFFFE010190B612876D6CECFE07021F14F8020314C0913900
1FFE004F647BE35A>I<92381FFFC04AB512FE020F6E7E027F15F091B77E0103D9FE0113
FE010F9039F0003FFF4901C0010F7F4990C76C7F494802017F49488248498048496F7E85
485B48717EA24849151F855AA34849811A80A3B5FCA291B9FCA31A000280CBFCA67EA380
7EA36C7F190F6CF01F806C7F193F6C6D17006C606C6D16FE6D6C4B5A6D6C4B5A6D01C0EC
0FF06D01F0EC3FE06D01FCECFFC001019026FFC00F5B6D91B6C7FC023F15FC020715F002
001580030701F0C8FC41407CBF4A>I<F107F0DB7FFCEC3FFC020FB500E090B5FC027FEC
FC0349B7000F14800107D9E00FEBDFF149D90001D9FF0113C049486D13FCD97FFC147F4A
143F4948DA1FFE148048717E1B0048F0803C4A6E91C7FC4884A24884A96C60A26C606E5C
6C95C8FCA26C5F6D6C4A5A6E147FD91FFEECFFF06D6C495B49D9E00F5B013D90B6C9FCD9
787F14FC020F14E09027F8007FFCCAFC92CCFCA21201A47F7FA26D7E14E091B77E18FC6C
EFFF8019F06D17FC19FF6D846D8486010784011F84137F48BA7E000701C0C8FC4890C900
077F484816014848EE007F49173F007F727E5B00FF84A66C6C4D5AA26C6C4D5AA26C6C4D
5A6C6C4D5A6C6D4B5B6C01E003075B6C01F8031F5B6C6CB4DBFFFEC7FC011F01F0010F13
F8010790B712E0010094C8FC020F15F0DA003F01FCC9FC4A5E7CC051>103
D<903807FF80B6FCA6C6FC7F7FB3A9EF0FFF94B512F0040314FC040F14FF043F8193267F
C03F7F9326FE000F7FDB81F86D7FED83E0DB87C06D7FED8F8093C780039E8015BC03B882
15F85DA25DA45DB3B2B7D8F007B71280A651647BE35A>I<EB0FE0EB3FF8497E497E487F
4880A24880A76C5CA26C91C7FC6C5B6D5A6D5AEB0FE090C9FCB0903807FF80007FB5FCA6
C6FC7F7FB3B3ADB712C0A622657BE42C>I<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB7
12E0A623647BE32C>108 D<902607FF80D90FFFEE7FF8B691B500F00207B57E040302FC
021F14E0040F02FF027F14F8043F6F48B67E93267FC03F9027C003FE017F9326FE000F90
3BE007F0007FFFC6DA81F86D9026F00FC06D7F6DD983E04CC7FC6DD987C06DD9F83E6E7F
DB8F805E93C7DAFC7882039E6E4A8003BCEEFDE003B8DCFFC08215F84B5FA24B94C8FCA4
4B5EB3B2B7D8F007B7D8803FB612FCA67E407BBF89>I<902607FF80EB0FFFB691B512F0
040314FC040F14FF043F8193267FC03F7F9326FE000F7FC6DA81F86D7F6DEB83E06DD987
C06D7FED8F8093C780039E8015BC03B88215F85DA25DA45DB3B2B7D8F007B71280A65140
7BBF5A>I<923807FFE092B6FC020715E0023F15FC91B8FC010349C66C13C04901F0010F
7F011F0180010113F84990C87F49486F7E49486F7E48496F138048496F13C04A814819E0
4819F04A814819F8A24819FC4A81A24819FEA4B518FFAC6C19FEA46C6D4B13FCA36C19F8
A26C6D4B13F0A26C19E06E5D6C19C06C6D4B13806C6D4B13006D6C4B5A6D6C4B5A6D01C0
01035B6D01F0010F5B010301FE017F13C0010090B7C7FC023F15FC020F15F0020092C8FC
030713E048407CBF51>I<902607FF80EBFFF8B6010FEBFF80047F14F00381B612FC0387
15FF92268FFE0014C0DBBFE0011F7FC6DAFF806D7F6D91C7000313FC6D01FC6E7F4B6E7F
4B814B17804B6F13C0851BE0A27313F0A21BF885A21BFCA285A21BFEAC1BFC61A31BF8A2
611BF0A24F13E0A24F13C01B806F5D6F92B512006F4A5B6F4A5B6F4A5B6F6C495B04E001
3F13C09226CFFC01B55A03C7B648C7FC03C115F8DBC07F14E0041F91C8FC040113E093CB
FCB3A4B712F0A64F5C7BBF5A>I<D90FFFEB07F8B6EB3FFF4C13C04BB512F04B14F89239
07F87FFCED0FE0C6923880FFFE6D495A6DD91E0113FF153CA21578A24B6C13FEA24BEB7F
FCA2EF1FF04BEB07C094C7FCA45DB3B0B712F8A638407BBF42>114
D<913A3FFF8007800103B5EAF80F011FECFE3F017F91B5FC48B8FC48EBE0004848C7120F
D80FF814034848804980003F167F49153F127FA200FF161FA27FA213F86D92C7FC13FF14
F06CEBFF8015FEEDFFE06C15FCEEFF806C16E06C826C16FC6C826C826C6C1680131F0107
16C0010116E0EB001F020015F01503ED003F040713F8007C150100FC81177F6C163FA217
1F7E18F07FA26D16E06D153F7F6DED7FC06DEDFF8001FF5C02C00107130002F8EB7FFE01
9FB612F8010F15E0D8FC03158048C66C49C7FC48010713C035407BBF40>I<EC07E0A614
0FA5141FA3143FA2147FA214FF5BA25B5B5B5B137F48B5FC000F91B512FEB8FCA5D8001F
01E0C8FCB3AFEF0FC0AC6DED1F80A2816DED3F00816D157E6D6D5B6DEBFF036EEBFFF86E
5C020F14C0020191C7FC9138001FFC325B7DDA3F>I<902607FFC0ED3FFEB60207B5FCA6
C6EE00076D826D82B3B360A360A26D5E181E181C6D163C6F14F86D4B487F6D01F8D907E0
8003FED93FC0ECFF80010090B65A6E5D021F14FC020314F0DA003F138051407BBF5A>I<
007FB600C0017FB512F8A6D8000F01F8C70007EBE000060090C7FC6D6D4A5A6D6D4A5A6D
6D4A5A6D6E495A4E5A6E6D5C6E6D133F6E6D495A6E6D49C8FC4D5A6E6D485A6E6D485A6E
01FF5B6E148FEF9FE06FEBFFC06F5C6F91C9FC6F5B5F816F7F6F7F6F80A2707F8493B57E
4B805D4B80DB0FF37FDB1FE17F04C180ED3FC04B486C7F4B486C7F4A486D7F4A48814A48
7F4B6D7F020F6E7F4A486D7F4A48824A487F4AC86C7F49486F7F4A6F7F010384D93FFF81
B600F00103B7FCA650407EBF55>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmtt12 12 59
/Fh 59 125 df<14E0EB03F0EB0FF8137FEA01FF000713F0001F13E0007F1380EBFE00EA
FFF8EA7FE090C7FC123C150D6EBC33>19 D<00085B003EEB07C0007FEB0FE0A24814F0A2
6C14E0B3A2007E1307003E14C0A20008EB01001C1E75BD33>34 D<903903E001F0A2496C
487EA8010F1307A202E05BA4007FB712E0A2B812F0A36C16E06C16C03B001FC00FE00001
3F131FA202805BA9017F133FA202005B003FB712C04816E0B812F0A36C16E0A2C648C66C
C7FCA400015CA2495BA86C48137CA22C3D7DBC33>I<EA07C0EA0FF0EA1FF8A213FCA213
FE120F1207EA007EA613FE13FCA21201EA03F8A2EA07F0120FEA1FE0EA7FC0EAFF801300
5A5A12700F1E6EBC33>39 D<140FEC3F80147F14FF491300495AEB07F8495A495A495A49
5A49C7FC5B12015B485A12075B120F5B121F5BA2123F5BA2127F90C8FCA45A5AAD7E7EA4
7F123FA27F121FA27F120F7F12077F12036C7E7F12007F6D7E6D7E6D7E6D7E6D7EEB03FE
6D7E6D1380147F143FEC0F00194D6FC433>I<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E
6C7E6C7E6D7E133F80131F6D7E801307801303801301A2801300A28080A41580143FAD14
7F1500A45C5CA213015CA213035C13075C130F5C495A133F5C137F49C7FC485A485A485A
485AEA3FE0485A485A90C8FC5A1278194D78C433>I<14F0497EA8007015E000F8EC01F0
00FE140700FF140F01C1133F01F113FF263FF9F913C0000FB61200000314FCC614F06D5B
011F1380D907FEC7FC90381FFF80017F13E090B57E000314FC000F14FF263FF9F913C026
FFF1F813F001C1133F0101130F00FE140700F814010070EC00E000001500A86D5A242B79
B333>I<EA07C0EA0FF0EA1FF8123F13FCA213FEA2121F120F1207EA007E13FEA213FC12
01EA03F81207EA0FF0EA7FE012FF13C013005A12780F196E8A33>44
D<007FB612FEA2B8FCA36C15FEA228077BA133>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0
EA3F80EA1F000B0B6C8A33>I<EB01E0497EA21307A2130FA2131F133F137F13FF120312
3F5AEAFFF713E71387EA7E071200B3B3A2003FB512FE48801680A216006C5C213E76BD33
>49 D<EB03FF011F13E0017F13FC48B57E48ECFF804815C0260FFE0313E03A1FF0007FF0
49EB1FF84848130F49EB03FC127F90C7EA01FE4814005A6C15FF167FA3127E123CC9FCA2
16FF16FEA2150116FC150316F81507ED0FF0ED1FE0153F16C0ED7F80EDFF004A5AEC07FC
4A5A4A5A4A5A4A5A4A5A4990C7FC495AEB07F8EB1FF0495A495A495A4890C8FC4848143E
4848147FEA0FF0485A48B7FCB8FCA37E6C15FE283E7BBD33>I<903801FFC0010F13F801
3F13FF90B67E48814881489038807FF03A0FFC000FF801F06D7E484813036F7EA21500A2
6C5A6C5AC9FC15015EA215034B5A150F4B5A4B5A913803FFC00103B55A4991C7FC5D8116
C06D8090C76C7EED0FF8ED03FC6F7E6F7E821780163FA2EE1FC0A3123C127EB4FCA2163F
1780167F6C16006D5C6D495A6C6C1303D81FF8EB0FFC3A0FFF807FF86C90B55A6C5D6C15
806C6C91C7FC010F13FC010113C02A3F7CBD33>I<15FF4A7F5C5CA25C5C15DFEC3F9FA2
EC7F1F14FEA2EB01FCA2EB03F8EB07F0A2EB0FE0EB1FC0A2EB3F80A2EB7F0013FEA2485A
12035B485AA2485A485AA2485AA248C7FC12FEB812E017F0A46C16E0C8381F8000AC021F
B512804A14C04A14E0A26E14C06E14802C3E7DBD33>I<0007B612F04815F85AA316F001
C0C8FCB0ECFFC001C713F801DF7F90B6FC168016C0028013E09039FC001FF001F0EB0FF8
49130749EB03FC6C4813016CC713FEC9FCA216FF167FA41218127EA2B415FF16FEA24814
016C15FC6C14036DEB07F86D130F6C6CEB1FF06C6CEB7FE09039FE03FFC06CB612806C15
0000015C6C14F8013F13E0010390C7FC283E7BBC33>I<EC07FC91383FFF8091B512C001
0314F0130F4914F890383FFC0790397FE003FCEBFFC0481300485A5B4848EB01F849EB00
F0000F15005B121F5B123F5BA2127FEB0004903801FFF0010713FCD8FF1F7F4848EBFF80
90B612C0B712E09038FE007F01F8EB1FF049EB0FF849EB07FC49130349EB01FEA290C8FC
16FF167FA37EA47F123F16FF6D14FE121F15016C6CEB03FC6D13076C6C14F86DEB1FF06C
6C133F3A01FF80FFE06C90B512C06D14806DEBFE006D5B010713F001001380283F7BBD33
>I<127CB8128017C0A4178048C813004B5A4B5A007C4A5AC8485A5E151F4B5A4B5A93C7
FC5D5D4A5A14035D14075D140F5D141F5D143F5DA24AC8FCA25C5CA213015CA3495AA413
075CA5130F5CAA6D5A6D5A2A3F7CBD33>I<ECFFC0010713F8011F13FE017F6D7E90B67E
4881489038807FF03A07FE001FF8D80FF8EB07FC49130348486D7E491300003F814980A6
6C6C14FEA26C6C495A6D13036C6C495AD803FEEB1FF03A01FF807FE06C90B55A013F91C7
FC010F13FCA2013F13FF90B612C0489038807FE03A07FC000FF848486D7ED81FE0EB01FE
4913004848147F007F168090C8123FA200FEED1FC0A76C153F6C16806D147F003F16006D
5C6C6C495A01F813076C6C495A3A07FF807FF86C90B55A6C5D6C6C14806D91C7FC010713
F8010013C02A3F7CBD33>I<49B47E010F13E0013F13F84913FE90B6FC00031580480181
13C09038FC007F4848EB1FE04848EB0FF0485A49EB07F84848130390C7FCED01FC5A5A16
FE1500A416FFA37E7E6D5BA26C6C5B6D5B6C6C5B6C6C5BD807FE137F90B7FC6C157F6C14
FC6C6CEBF8FF6DEBE0FE010F1380903800200091C7FC150116FCA2150316F8150716F000
0F140F486CEB1FE0486C133F16C0EDFF804A13004A5A381FF01F90B512F86C5C6C5C6C14
80C649C7FCEB3FF0283F7BBD33>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00
C7FCB3A3121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B2B6CAA33>I<EA07C0EA
0FE0EA1FF0EA3FF8A5EA1FF0EA0FE0EA07C0C7FCB3A3EA07C0EA0FE0EA1FF0EA3FF8A213
FCA3121F120F12071200A2120113F81203EA07F0120FEA1FE0127FEAFFC01380130012FC
12700E396EAA33>I<007FB71280A2B812C0A36C16806C1600CBFCA9003FB7FC481680B8
12C0A36C1680A22A177CA933>61 D<1210127CB4FC7F13E07FEA7FFC6C7E380FFF806C13
E000017F6C13FCEB3FFE6D6C7E01077F010113F06D7FEC3FFE6E7E020713C06E13E00200
13F8ED7FFE151FED0FFF1503150FED1FFE157FEDFFF8020313E04A13C0021F13004A5AEC
FFF8495B010713C0011F5B4948C7FCEBFFFC4813F000075B481380D83FFEC8FC485AEAFF
F05B138090C9FC127C121028337BB733>I<EC1F804A7E4A7EA34A7EA314F901017FA501
037FA214F0A201077FA4ECE07E010F137FA449486C7EA549486C7EA4017F80EC000FA291
B5FCA290B67EA43A01FE0007F8491303A4000381491301A3000781491300D87FFF90380F
FFE0B56C4813F06E5AA24A7E6C496C13E02C3E7DBD33>65 D<91391FE00780DAFFFC13C0
0103EBFF0F010F148F4914FF5B90387FF81F9038FFC00748497E4848487E497F485A167F
485A49143F121F5B003F151F5BA2127F90C8EA0F8093C7FCA25A5AAD7E7EA36DEC0F8000
3FED1FC0A27F121F7F000F153F6D15806C7E167F6C6CECFF007F3A01FF8003FE6C6D485A
90397FF81FF86DB55A6D5C6D5C010391C7FC010013FCEC1FE02A3F7CBD33>67
D<003FB512F04814FCB7FC826C816C813A03F8007FF0ED1FF8ED07FC15036F7E8281EE7F
80A2163F17C0161FA217E0160FA4EE07F0AD160F17E0A4161F17C0163FA21780167FEEFF
00A24B5A15034B5AED1FF8ED7FF0003FB6FC4815C0B75A93C7FC6C14FC6C14F02C3D7EBC
33>I<49B512F84914FC16FEA216FC6D14F890C7EA7F00B3B3A5123C127EB4FCA25D5D14
01397F8007FC9038F01FF86CB5FC6C5C6C14C000035CC649C7FCEB1FF0273E79BC33>74
D<D83FF8EC1FFC486CEC3FFE486CEC7FFFA2007F16FE6C6CECFFFC000716E001EF14F7EC
8001A39039E7C003E7A3ECE007A201E314C7A2ECF00FA201E11487ECF81FA201E01407A2
ECFC3FA2EC7C3E157E147EEC3E7CA3EC1E78EC1FF8A2EC0FF0A3EC07E0EC03C091C7FCAE
D83FFCEC3FFC486CEC7FFEB591B5FCA26C48EC7FFE6C48EC3FFC303D7FBC33>77
D<D87FFC90381FFFE0486C4913F07FA36C6D6C13E00003913800FC0013F780A213F380A3
EBF1F0A38013F0A280A2147C147EA2143E143FA2801580A3140F15C0A2140715E0A21403
15F0A21401A215F81400A3157CA3153C153EA2151E151F387FFF80B5EAC00FA315076C49
6C5A2C3D7DBC33>I<003FB512FC48ECFF80B712E016F86C816C813A01FC000FFF030313
801500EE7FC0163FEE1FE0160FA217F01607A6160F17E0A2161FEE3FC0167FEEFF801503
030F130090B65A5E5E16E0168003FCC7FC01FCC9FCB3383FFFE0487FB57EA26C5B6C5B2C
3D7EBC33>80 D<003FB712F84816FCB8FCA43AFE000FE001A8007CED00F8C71500B3B3A4
0107B512C049804980A26D5C6D5C2E3D7EBC33>84 D<007FB512C0B612E0A415C048C8FC
B3B3B3ABB612C015E0A46C14C01B4D6CC433>91 D<007FB512C0B612E0A47EC7120FB3B3
B3AB007FB5FCB6FCA46C14C01B4D7DC433>93 D<007FB612FEA2B8FCA36C15FEA228077B
7D33>95 D<131C137E13FE12011203EA07FCEA0FF0EA1FE013C0EA3F80A2EA7F00127EA2
12FE5AA6EAFFC013E013F0127FA2123FA2EA1FE0EA07C00F1E6EC333>I<EB1FFC90B57E
000314E048804814FC48809038F007FFEBE0016E7F153F6C48806C48131FC87F150FA5EC
0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00EA3FF0EA7FC05B48C7FC5AA56C
141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C14F36C14C1C69138003FF0D91F
F090C7FC2D2E7BAC33>I<EA3FFC487E12FFA2127F123F1200ABEC01FE91380FFFC04A13
F0027F7F91B512FE90B7FCECFE07DAF800138002E0EB7FC04AEB3FE04A131FEE0FF091C7
FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17E06E131FEE3FC06E
137F9139F801FF80DAFE07130091B55A495C6E5BD97E3F13E0D93C0F138090260003FEC7
FC2E3E7FBC33>I<ECFFF0010713FE011FEBFF804914C04914E048B612F048EBC01F9038
FE000F485A485A4848EB07E049EB03C0484890C7FC5BA2127F90C9FCA25A5AA97E7EA27F
003FEC01F06DEB03F86C7E6D13076C6C14F06C6C130F01FFEB1FE06CEBE07F6C90B512C0
6C1580013F14006D13FC01075B010013C0252E79AC33>I<ED7FF84B7E5CA280157F1501
ABEB01FF010713C1011F13F1017F13F990B6FC5A4813813907FE003FD80FF8131F49130F
48481307491303123F491301127F90C7FCA25A5AA97E7E15037F123F6D1307A26C6C130F
6D131F6C6C133F6C6C137F2603FF81B512F091B612F8C602FD13FC6D13F96D01E113F801
0F018013F0D901FEC8FC2E3E7DBC33>I<ECFF80010713F0011F13FC497F90B6FC481580
48018013C03A07FE003FE001F8EB0FF048481307484814F8491303003F15FC491301127F
90C7FC16FE15005A5AB7FCA516FC48C9FC7E7EA36C7E167C6C6C14FE7F6C7E6D13016C6C
EB03FC6CB4130F6C9038C03FF86C90B512F06D14E06D14C0010F1400010313FC9038007F
E0272E7BAC33>I<ED3FE0913801FFFC020713FE141F4A13FF5CECFFC015004948137E4A
133C010314005CA8003FB612F84815FCB7FCA36C15F8260003F8C7FCB3AD003FB6128048
15C0A46C1580283E7DBD33>I<D901FEEB1FE0903A0FFFC0FFF0013F01F313F84990B512
FC90B7FC5A48010313E12607FC00EB80F849017F1360484890383FC00049131FA2001F81
49130FA66D131F000F5DA26D133F6C6C495A6D13FF2603FF0390C7FCECFFFE485C5D5DD8
0FCF13C0D981FEC8FC0180C9FCA27FA26C7E7F90B512FC6CECFFC06C15F0000715FC4815
FF4816809038E0000748489038007FC090C8EA1FE048150F007E150700FE16F0481503A5
6C1507007E16E0007F150F6C6CEC1FC001E0147FD81FF8903801FF80270FFF801F13006C
90B55A6C5DC615F0013F14C0010F91C7FC010013F02E447DAB33>I<EA3FFC487E12FFA2
127F123F1200AB4AB4FC020713C0021F13F0027F7F91B5FC90B67EED07FEECF801ECF000
4A7F4A7F5CA291C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE
6C496C13FC303D7FBC33>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCAA383FFFF848
7FA47EEA0001B3AD007FB612C0B712E016F0A216E06C15C0243E78BD33>I<1570EC01FC
A2EC03FEA3EC01FCA2EC00701500AA90383FFFFC4913FE90B5FCA27F7F90C7FCB3B3A914
0115FCA21218007EEB03F81407B414F0140F9038803FE090B512C06C14806C14006C5B6C
13F8000113E01F557BBD33>I<383FFFFC487FB5FCA27E7EC7FCB3B3AD003FB612F84815
FCB712FEA26C15FC6C15F8273D7ABC33>108 D<02FC137E3B7FC3FF01FF80D8FFEF0187
7F90B500CF7F15DF92B57E6C010F13872607FE07130301FC01FE7F9039F803FC01A201F0
13F8A401E013F0B3A53C7FFE0FFF07FF80B548018F13C0A46C486C01071380322C80AB33
>I<4AB4FC263FFC0713C0267FFE1F13F000FF017F7F91B5FC6CB67E6CEC07FEC6EBF801
ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C49
6C13FE6C496C13FC302C7FAB33>I<EB01FE90380FFFC0013F13F0497F90B57E488048EB
03FF2607FC0013804848EB7FC049133F4848EB1FE049130F4848EB07F0A2007F15F890C7
1203A300FEEC01FCAA6C14036C15F8A26D1307003F15F06D130FA26C6CEB1FE06D133F6C
6CEB7FC06C6CEBFF802603FF0313006CEBFFFE6C5C6D5B6D5B010F13C0D901FEC7FC262E
7AAC33>I<EC01FE3A3FFC0FFFC0486C4813F000FF017F7F91B512FE6CB7FC6CEBFE07C6
D9F800138002E0EB7FC04AEB3FE04A131FEE0FF091C7FC16074915F81603A217FC1601A9
160317F8A26D140717F06E130F17E06E131FEE3FC06E137F9139F801FF80DAFE07130091
B55A495C6E5B6E13E0020F1380DA03FEC7FC91C9FCAF383FFFF8487FB57EA26C5B6C5B2E
427FAB33>I<02FF137C0107EBE0FE011F13F0017F13FC90B512FE4814FF4813C03907FE
003F4848131F01F0130F484813071503485A491301127F90C7FC15005A5AA97E7E15017F
123F6D130315076C7E6C6C130F6D131FD807FE137F3903FF81FF6CEBFFFE6C14FC6D13F8
6D13F0010F13C0903801FE0090C8FCAF92387FFFFC92B512FEA46F13FC2F427CAB33>I<
ED03FE3B7FFF801FFF80B5D8C07F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDF
F09139FFC007E092388003C092C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C
2C7DAB33>I<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE
147F5A153FA37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C68001
1F13FF01001480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14
E06D130F6DEB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7
FC242E79AC33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3
161FEE3F80A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07
FCC7FC29387EB633>I<D83FFCEB1FFE486C497E00FF5CA2007F80003F800000EC007FB3
A75EA25DA26D5B90387F800FDAE03F13FC6DB612FE17FF6D806D01FE13FE01039038F83F
FC010001C0C7FC302C7FAA33>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13
F86C496C13F0D801F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC80
07011F5CA2ECC00F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE
01005BA214FF6E5AA36E5AA26E5A6E5A2E2B7EAA33>I<3B3FFFC07FFF80486DB512C0B5
00F114E0A26C01E014C06C496C13803B00FE000FE000017F495AEB3F804B5A6D6C48C7FC
90380FE07E903807F0FEECF1FC903803FBF8EB01FF6D5B5D6E5A143F6E5A143F814A7E14
FF903801FBF0ECF9F8903803F1FCEB07E0157E90380FC07F011F6D7E90383F801F02007F
496D7E01FE6D7E484813033B7FFFC03FFFE0B56C4813F0A46C496C13E02C2B7DAA33>
120 D<3B7FFF801FFFE0B56C4813F06E4813F8A24A6C13F06C496C13E0D803F8C7EAFC00
000114015E7F000014036D5C137EA2017F495A7FA26E485A131FA26D6C485AA214E00107
49C7FCA214F01303157EEB01F8A2157C010013FC14FC5D147C147DEC3FF0A36E5AA36E5A
A2141F5DA2143F92C8FCA3147EA214FE003F5B1301387F81F81383EB87F0139FEBFFE06C
5B5C6C90C9FCEA0FFCEA03F02D427DAA33>I<127CA212FEB3B3B3B3127CA2074D6AC433>
124 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi12 12 3
/Fi 3 113 df<91267FFFC0933803FFFE91B55F6E4E13FC0200F1FE00DB6FE0EE1BF8A2
03CF4D5A1B67A21BC7DA018F4C485AA2DB87F0ED030FA2DA03079338061FC01A0CA21A18
02064D485AA26F6C1560A2020C4D48C7FCF10180A2F103000218040613FEA26F6C5CA202
304C485A1930A2196002604C485AA26F6CEB0180A24A4B48485A1806A26049484B495AA2
047F5BA249C74A495A60A24D5A01064BC7485AA2EE3F86A249038C4AC8FC1798A217B049
03E014FEA2705A133801784B495A01FC92C7FCD803FFEF07FE007F01F0011E0103B512FC
B56C011C49804A010C5E5F447BC35E>77 D<01FCEB03F8486CEB1FFE3B0307803C0F8000
069138E007C03A0C03C1C0030018D9E3007F14E683003013EC14F8495A12605CA2484848
495AA21200A24948495AA34C5A49C7FCA24CC7FCA2137E167EA21820494A1360A34B4813
C0485AA29338F00180EF0300485A17065F03005B4848EC78700003ED3FE06C48EC0F8033
2D7DAB3A>110 D<D907E0133F903A0FF001FFC0903A183C03C1E0013090380600F0496C
4813789026C01F18137C4B133C4B133ED801805B4B133F143FD8030090C7FCA30006137E
A2C7FCA24A147FA4494814FEA317FC49481301A217F81603494814F0A2EE07E0A2010FEC
0FC01780EE1F00163ED91FB0133C5E02985BED03E090393F0E0F806EB4C7FCEC01F891C9
FC137EA45BA4485AA412031207B512E0805C303F82AB31>112 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr12 12 56
/Fj 56 128 df<9239FF8003F8020F9038F01FFE913A3F807C3E07913BFC000E780F80D9
01F090381FF01F494890393FE03FC04948137F494814C0011FEE1F8091C7FC4991393F80
0600013E021F90C7FC137EAFB912F0A3D8007EC7D81F80C7FCB3B18301FF4A7E007FD9FE
1FB512E0A33A467EC539>11 D<4AB4FC020F13C091383F00F002FC1338D901F0130C4948
131E4948133E4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D800
7EC7FC8282B3B001FFEC7F80007FD9FC1FB5FCA330467EC536>I<DBFF80EB3FE0020F90
39E003FFF8913B3F80780FE01E913BFC001C3F0007D901F0D9067CEB01804948D90FF849
7E4948D93FF0130749484948497E011F171F91C75B5B013E6E486D5A017E021F6E5A96C8
FCADF10FE0BBFCA3D8007EC7391F80001F190F1907B3B001FF4A6C497E007FD9FE1FB500
87B512E0A34B467EC551>14 D<EA01FC127FA3120312011200B3B0487EB512F8A3152C7E
AB1B>16 D<127812FCA27E7E6C7E123FEA0FC06C7E6C7E12016C7E137C7F130E7FEB0380
EB0100111275C431>18 D<130FEB1F80A2133F137FEBFF005BEA01F8485A485A5B485A48
C7FC123E12385A5A124011126CC431>I<02FFED7F80010701E0903803FFE090261F80F8
903807C1F890263E003C90381E007C49010F497F496D6C487F48486D6C4814804848DAE1
E0EB0FC00007EC01E34848DAF3C0EB07E0001FEC00FF4918F0003F6F5A1903A248C816F8
70C7FCA25AA294B6FCA294C9FCA67E836D147F123FA2711418001F15FF7F000F912601F3
E014306C6C14E10003912603E0F014606C6C4A6C14C06C6C902607807CEB0180017C9026
0F001EEB03006D013C6D130E90261F80F8903807E03C902607FFE0903801FFF0010090C8
EA3FC0452E7DAC4C>27 D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0
A4EA0180A2EA0300A212065AA25A5A12200B1D78C41B>39 D<1406140E14181430147014
E0EB01C0EB0380EB0700A2130E5B133C133813785BA2485AA2485AA212075BA2120F90C7
FCA25A121EA2123EA3123C127CA6127812F8B21278127CA6123C123EA3121EA2121F7EA2
7F1207A27F1203A26C7EA26C7EA213781338133C131C7F7FA2EB0380EB01C0EB00E01470
14301418140E1406176477CA26>I<7E7E12607E12387E7E7E6C7EA26C7E6C7E7F137013
787FA27FA27FA214801307A214C01303A214E01301A214F0A3130014F8A61478147CB214
7814F8A614F01301A314E0A2130314C0A213071480A2130F1400A2131EA25BA25B137013
F05B485A485AA248C7FC120E5A5A12305A5A5A16647ACA26>I<121E123FEA7F80EAFFC0
A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D7889
1B>44 D<B612C0A51A057F9721>I<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A
78891B>I<143014F013011307131F13FFB5FC13E713071200B3B3AF497E497E007FB6FC
A3204178C031>49 D<EB03FE90381FFFC0017F13F03901F80FFC3903C001FE48C7127F00
0EEC3F80000CEC1FC04815E048EC0FF0A248EC07F8A2127C00FE15FC7E6D1303A46CC712
07123EC813F8A3ED0FF0A216E0151F16C0153F1680ED7F00157E5D4A5A5D4A5A4A5A4A5A
4AC7FC141E5C5C5C495A495A495A91C7120C130E5B4914185B5B485A49143848C8123000
061570000FB612F05A5A5AB712E0A326417BC031>I<49B4FC010F13F0013F13FC9038FE
01FE3901E0007FD80380EB3F8048C7EA1FC0000EEC0FE0D80F8014F0EA1FE016F86D1307
A36C5AA2D80380130FC813F0A3ED1FE016C0A2ED3F801600157E5DEC03F0EC1FC0D90FFF
C7FC15F090380001FCEC007EED1F8016C0ED0FE0ED07F016F8150316FC16FE1501A216FF
A3121E123F487E487EA216FEA24913036CC713FC127E0070EC07F8003015F06C140F000E
15E06CEC1FC0D803E0EB7F803A01FC01FE0039007FFFFC011F13E0010190C7FC28427CC0
31>I<1507A25D5DA25D5DA25DA25C5C811406140E140C141814381430146014E014C013
01EB038014005B13065B131C13185B137013605B12015B48C7FC5A1206120E120C5A1238
12305A12E0B812C0A3C86CC7FCAC4B7E4A7F91B61280A32A427DC131>I<EC07F8EC3FFF
91B51280903903FC03C0903907E000E0D90F80133090391F0001F0013EEB03F84913075B
1201485A49EB03F00007EC01E0000F91C7FC5B121FA25B123FA3127F90C9FCEC7F809038
01FFF039FF0780FC90380E003E0118130F49EB078016C049EB03E04914F0ED01F8A24914
FC150016FEA290C8FC16FFA27EA66C7EA216FE121FA2ED01FC6C7E16F8000714036C6C14
F06DEB07E0000115C06C6CEB0F80017EEB3F0090383F80FE90380FFFF86D5B0100138028
427CC031>54 D<121E123FEA7F80EAFFC0A4EA7F80EA3F00121EC7FCB3A5121E123FEA7F
80EAFFC0A4EA7F80EA3F00121E0A2B78AA1B>58 D<007FBAFCBB1280A3CEFCB0BB1280A3
6C190041187BA44C>61 D<DB0FFE146092B512C0020302F013E0913A1FFC01FC0191393F
C0001E02FFC7EA0703D901FCEC0387D907F0EC00C74948156F4948153F4948151F49C912
0F13FE000117075B484816031207491601120F491600121FA2123F491760A2127FA21900
5B12FFAC127F7FA21960123FA27F121FA26C6C17C0A212076DEE018012036C6C16036D17
0000001706137F6D6C5D6D6C5D6D6C5D6D6C5DD901FC4A5A6DB4EC0780DA3FC0011FC7FC
DA1FFC13FC0203B55A020014C0DB0FFEC8FC3B467BC446>67 D<B912F8A3000101C0C712
7F6C49EC07FC017F15011700187C183C181CA284A31806A41807040C7FA395C7FCA4161C
A2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA319C0A3F0018093C7FCA4
1803A21900A260A260A2181EA2183E187EEF01FE01FF1507486D147FB95AA33A447CC342
>69 D<B612F8A3000101E0C9FC6C5B6D5AB3B31830A418701860A518E0A3EF01C0A21703
1707A2170F173F177F01FFEC01FF486D011F1380B9FCA334447CC33D>76
D<B56C020FB5FC80A2C66C6C020013F06EED1F80016FEE0F00EB67F86E15061363EB61FE
8013606E7E81143F6E7E81140F6E7E8114036E7E81806F7E82153F6F7E82150F6F7E8215
036F7E8281EE7F8017C0163FEE1FE017F0160FEE07F817FC1603EE01FE17FF82EF7F8618
C6173FEF1FE618F6170FEF07FEA217031701A21700187E13F0183E486C161EEA0FFFB500
F0150E1806A240447CC349>78 D<ED1FFC4AB512C091390FF007F891393F8000FE027EC7
123FD901F8EC0FC049486E7ED90FE0EC03F849486E7E49486E7E49C9127F01FE707E4916
1F0001844848707EA24848707E000F84491603001F84A2491601003F84A3007F844982A3
00FF1980AC007F19006D5EA4003F606D1603A2001F606D1607000F60A26C6C4C5AA26C6C
4C5A0001606C6C4C5A6D167F6D94C7FC6D6C15FE6D6C4A5A6D6C4A5AD903F0EC07E0D901
FCEC1FC0D9007E4AC8FC6E6C13FE91390FF007F80201B512C09126001FFCC9FC41467BC4
4C>I<B712FCEEFFC017F800019039C0000FFE6C49EB01FF017F9138007F80EF1FE0170F
EF07F018F8EF03FCA218FE1701A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0
EF7F80933801FE00EE0FFC91B612F017800280C9FCB3A9497E487FB612C0A338447CC342
>I<49B41303010F13E0013FEBF8079038FE00FCD801F0EB1F0F4848EB079F4848EB01DF
48486DB4FC48C87E001E81123E007E81127C8212FC82A46C81A37E6C6C91C7FCA2EA3FE0
7FEA1FFEEBFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F80010F80010180D9001F7F
02017F9138001FFF150303001380167FEE3FC0161FA2EE0FE0124012C01607A47EA217C0
7E160F6C1680A26CED1F006C151E6C153ED8FBC05CD8F9F05CD8F07CEB03F03AE03FC00F
E0010FB51280D8C00349C7FC9038003FF02B467BC436>83 D<003FB912E0A3903BF0003F
F0007F01806D48130F003EC7150348EF01F00078170019701270A219301260A5481818A5
C81600B3B3A54B7EEDFFFC0103B7FCA33D447CC346>I<B600C0010FB5FCA3000101E0C8
13F06C49ED1F806D48ED0F00A21806B3B3A7013F5EA280131F6080010F5E13076E5D0103
16E06D6C4A5A6D6C4A5A027E4AC7FC6E6C131EDA1FE0137C913907F803F00201B55A6E6C
1380DB07FCC8FC40457CC349>I<B66C91383FFFF0A3000301E0C800071300C649ED01FC
6D4816F018006E5E013F5FA26E1501011F5F80010F4CC7FCA26E5D01071606A26D6C5DA2
8001015EA26E15386D163081027F5DA26F14E0023F5DA26E6C495AA281020F4AC8FCA26F
5B020714068102035CA26F131C02011418A26E6C5BA21680037F5BA2EEC0E0033F5B16E0
92381FE180A216F3030F90C9FCA2ED07FEA36F5AA36F5AA26F5AA3166044457EC349>I<
130C131E133F497EEBF3C03801E1E03803C0F03807807848487E001E7F487F0070EB0380
48EB01C00040EB00801A0E75C331>94 D<EB07F8EB3FFF9038F80FC03901C003E048C66C
7E00066D7E48147CD80F80137E486C133E6D133F8182A26C5A6C5AC8FCA4EC0FFF49B5FC
90380FFC1FEB3FC0EBFF00EA03FCEA07F0485A121F485A5B127F176048C7FCA4153FA26C
146F7F003F9138C7C0C0391FC001873B0FE00307E1803A07F81E03FF2701FFFC0113003A
001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120312011200B3EC01FC91380FFF809138
3E07E091387000F802C0137CD9FD807F01FFC77EEE0F804915C049EC07E017F0160317F8
A217FC1601A317FEA917FCA21603A217F8A2EE07F017E07FEE0FC001FBEC1F801700D9F1
80133ED9F0C05B9039E06001F891383C07E09039C01FFF8090260003FCC7FC2F467DC436
>I<EC7F80903803FFF090380FC07C90383E000E49130349EB01804848EB00C000031407
4848EB0FE04848131FA2121F5B003FEC0FC0ED0780007F91C7FC90C9FCA25AAA7EA27FA2
123F16306C7EA2000F15606C7E6C6C14C00001EC01806C7E017CEB07006D130E90381FC0
78903807FFF001001380242E7DAC2B>I<16FE157FA315011500167EB3EC7F80903803FF
F090380FC07890383F000C017C13064913034848EB01FE00031400485A4848147EA2121F
485AA2127FA290C8FCA25AA97EA37F123FA2121F7F000F15FE6C7E000314016C6CEB037E
6C6C147F017C010E13806D011C13FE90380FC0F0903803FFE09026007F0013002F467DC4
36>I<EB01FE903807FFC090381F03F090387C00F849137C48487F48487F000715804913
0F000F15C0121F4914E0003F1407A2127F90C713F0A35AA290B6FCA290C9FCA67EA36C7E
A21630121F7F000F15606C7E000315C06C6CEB01806C6CEB0300017C13066D131C90380F
C078903803FFE09038007F80242E7DAC2B>I<EC1FC0EC7FF0ECF038903803E07C903807
C0FC90380F81FEA2EB1F0190383F00FCA2013E1330017E1300B0B61280A3D8007EC7FCB3
B1137F497E007FEBFF80A31F467EC51E>I<D901FCEB1FC0903A0FFF807FE0903A3F07E1
E1F090397C01F7819039F800FE01484890387C00E048486D13000007143FA248486D7EA2
001F81A7000F5DA26C6C49C7FCA20003143E6C6C5B6C6C5B486C485A39033F07E090380F
FF80260701FCC8FC0006CAFCA3120E120F7EA27F13E06CB512F86CECFF806C15E06D14F8
48B67E3A07E0000FFED80F80EB00FF001EC8123F003EED1F8048150F17C0481507A6007C
ED0F80A26CED1F006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFE
C7FC010113E02C417DAB31>I<EA01FC12FFA3120312011200B3EC01FE913807FF809138
1E07E091383801F002607FECC000D9FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5
D8FC7F13FEA32F457DC436>I<13E0EA03F8487EA66C5AEA00E090C7FCADEA01FC127FA3
120312011200B3B0487EB512F8A315437EC21B>I<14F0EB01F8EB03FCEB07FEA4EB03FC
EB01F8EB00F01400AD14FE137FA313011300147EB3B3AB003C137C127EB413FC14F8A238
FE01F0007E13E0383803C0381E0780380FFF00EA01FC175783C21E>I<EA01FC12FFA312
0312011200B3B3B3A5487EB512FCA316457EC41B>108 D<2701FC01FEEC7F8000FF903B
07FFC001FFF0913B0E03F00380FC913B3800F80E003E0003495C000101C0D97C307F0000
037E81D9FD805C01FFC7D83EC0130F043F81495DA34992C7FCB3A9486C4A6C497EB5D8FC
3FB5000FB512C0A34A2C7DAB51>I<3901FC01FE00FF903807FF8091381E07E091383801
F0000301607F0001EBC0002600FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5D8FC
7F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F496D7E496D7E48
486D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E481680A44816C0AA6C
1680A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C
6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<3901FC01FC00
FF90380FFF8091383E07E091387001F800039038C0007C2601FD807F6CB4C7123FEE1F80
49EC0FC04915E0EE07F0A217F8160317FCA3160117FEA917FC1603A317F8160717F0EE0F
E07FEE1FC06D1580EE3F00D9FD80137ED9FCC05B91386001F891383C0FE091381FFF80DA
03FCC7FC91C9FCAE487EB512FCA32F3F7DAB36>I<91387F8006903903FFE00E90380FE0
7890383F001C017EEB061E5B4848EB033E4848EB01BE12074848EB00FEA2485A003F157E
5B127FA390C8FC5AA97E7FA3123F7F121F16FE6C7E000714016C7E6C6CEB037E00001406
017C130C013F131890380FC0F0903803FFE09038007F0091C7FCAE16FF037F13FEA32F3F
7DAB33>I<3901F807E000FFEB1FF8EC383CEC607E0003EBC0FF12013800F980EBFB0015
7E153C01FE1300A45BB3A77F487EB6FCA3202C7DAB26>I<90383FE0303801FFF83907C0
1E70390F0007F0001C1301481300A2481470A212F01530A37E7E007E1400EA7F80EA3FF0
EBFF806C13F86C13FE0003EBFF806C14C0D8003F13E0010313F09038001FF81403EC00FC
0040147C00C0147E153E7E151EA37E151C7E153C6C14386C147000FB14E039F18001C039
E0F00F8039C07FFE00EB0FF01F2E7DAC26>I<1306A5130EA4131EA3133E137EA213FE12
011207001FB512F0B6FCA2D8007EC7FCB3A4150CAA133E013F1318A27F90380F80300107
1360903803E0C0903801FF809038003F001E3E7EBC26>I<D801FC14FE00FF147FA30003
1401000114000000157EB3A916FEA3017C1301A2017EEB037E013E147F011E010613806D
011C13FE903807C078903803FFE09026007F8013002F2D7DAB36>I<B539E001FFFCA3D8
07FEC7EA7FE0D801FCEC1F8017000000150E160CA2017E5CA2017F14386D1430A26D6C5B
A26E13E0010F5CA26D6C485AA36D6C48C7FCA26E5A01011306A26D6C5AA2ECFE1CEC7E18
A26E5AA3EC1FE0A36E5AA26E5AA36EC8FC2E2C7EAA33>I<3B7FFFF007FFFCA30001D980
0113C06C90C7EAFE006D147C6D14706D6C5B6D6C5BECE0010107495AD903F090C7FCECF8
06903801FC0E01005BEC7E18EC7F30EC3F706E5A6E5A811407814A7EEC0DFC1418EC387E
4A7E02607FECC01F01016D7ED903807F4A6C7E01061303496D7E011C80013C1300017C14
7ED801FC14FFD80FFE4913C0B5D8800713FFA3302B7FAA33>120
D<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160C6D141C017E1418
A26D5CA26E1370011F1460A26D6C5BA2800107495AA2ECF003010391C7FCA2903801F806
A2ECFC0E0100130CA2EC7E18A2EC7F38EC3F30A2EC1FE0A36E5AA26E5AA36EC8FCA21406
A35CA2141C1418A200385B127C00FE5BA25C1301387C0380D87007C9FCEA3C1EEA1FFCEA
03F02E3F7EAA33>I<003FB612E0A29039E0000FC090C7EA1F80003C143F00381500157E
003014FE00705C4A5A14030060495A5D4A5A141F5DC748C7FC5C14FE5C495A13035C495A
130F494813605C49C7FC5B017E14C05B1201485A5B48481301120F491303485A003FEC0F
8090C7121F007E14FFB7FCA2232B7DAA2B>I<001EEB0780003FEB0FC0397F801FE039FF
C03FF0A4397F801FE0393F000FC0001EEB07801C0A76C231>127
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmcsc10 20.74 4
/Fk 4 110 df<952601FFF81638067FD9FFC015780507B600F815F8053F15FE4CB86C13
010407DAC00101E01303041F01F8C7EA1FF8047F0180DA03FE13074B4848C96C130F0307
01F093383F801F4B01C0EE0FE0033F49933807F03F4B48CA3803F87F4A4848EF00FC4A49
F07EFF4A01E0844A49844A49844A90CC7E4A5A4A48854949854987495B4B1A7F495B491C
3F49491A1FA24990CE120FA2495A481D075C5A1E03485BA21E015A5C5AA21E00485BA448
1E00A35CA2B5FCB07EA280A37EA21F78A26C7FA37E807E1FF0A26C7FA26C1D016E1CE07E
6D7EF603C06D7FF607806D7F6D6DF20F007F6F1A1E6D6D1A3E6D1C3C6D6D1A7C6E6C626E
6C4F5A6E6D4E5A6E6D18076E6D4E5A6E01F84E5A6E6D4EC7FC6E6C6C18FE6F6C6C4C5A03
0F01E0EE07F06F6D4C5A030101FEEE3FC06F6C6C6C4AB4C8FC041F01F8EC0FFC0407903A
FFC001FFF8040191B612E0DC003F93C9FC050715FCDD007F14C0060101F8CAFC6D7A74F7
87>67 D<17074D7E4D7EA34D7EA24D7EA34D7EA24C7FA34C7F17DF04077F178FA2040F80
1707041F80EE1E03A2043E80EE3C01047C80EE7800A204F8804C137FA24B486D7EA20303
814C131FA24B488084030F8293C77EA2031E8284033E82033C80A24B828403F8824B157F
A20201834B153F0203834B151F92B8FC4A83A24A8492C91207A24A84021E82023E84023C
82A2027C8402788202F8844A177FA20101854A173F1303747E130787010F84011F86133F
496C8501FF6000036D4D13F0000F01FE94B512FCB600C0031FECFFF8A45D5A7AD96A>97
D<B8FCA4C602F8CAFC013F13C06D5B7F92CBFCB3B3AB1A0FA51A1EA61A3EA41A7E1A7C1A
FCA21901A219031907190F191F197F49EE01FF496D020713F890B56C91B5FCBBFCA44858
78D758>108 D<B64FB6FC6F60A3C66E4E1400013F1CFC6D6C6C4E6C5A010F646E6C181E
A36E6C183CA26E6C1878A36E6C18F0A26E6CEF01E0A26E6DEE03C0A36E6DEE0780A26F6C
EE0F00A36F6C161EA26F6C5EA36F6C5EA26F6C5EA26F6C4B5AA36F6D4A5AA26F6D4A5AA3
706C4AC7FCA2706C141EA2706C5CA3706C5CA2706C5CA3706C495AA2706D485AA2706D48
5AA3716C48C8FCA294383FF01EA3716C5AA2716C5AA3716C5AA2496C6E6C5AA2715B497E
497E496C6E494B7E486D4F7F000F01FF6FC8000713FFB600F00507B7FCA2183E181C7058
78D781>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmr17 20.74 20
/Fl 20 121 df<EF7FF0933807FFFE043F6D7E923A01FFC01FE0923A07FC0001F8DB0FF0
EB007CDB3FE080DB7F80141E4A48C87E4A48ED3F804A4815FF4A4814034A4882604A5AA2
4A5AA24A5A725B7290C7FC4990C95A96C8FCB3A6F1FFC0BBFCA5D8000190C81207180184
A2197FB3B3B3A4496D4B7E010F01E0020313F8000FB6D8E003B612F8A54D797EF856>12
D<EC03E0EC07F0EC0FF8A2141F143F147F15F0ECFFE04913C04913801500495A495AEB1F
F05C495A495A49C7FC5B485A485A485A5B485A485A48C8FC123E5A5A12701D1F60F74F>
19 D<EE07FE93387FFFE00303B512F8030F14FE92393FF801FF923AFFC0001F804A90C7
EA07C0DA07FC6E7E4A486E7EDA1FE014004A4815784A4814014AC8EA0FF849484B7E4948
153F0107167F5C495A131F495AA249486F5A725A49486F5A95C8FC4890CCFCA25A5B1207
A2120F5BA2121FA25BA2123FA31620007F91380FFFC0033F13F84990B512FE913A03F000
FF80DA0780EB1FE04AC76C7E023E6E7E00FF013C6E7E4A6E7E4A6E7ED9F1E06F7E4A8201
F3707E5C01F7C96C7E8501FF160F4983A249707EA285A25B721380A51AC06C5AA57FA25B
7F123FA5121F1A80A27F120F601A0012077F000360180F616C7E4E5A6C6D5E183F6D6C5E
013F4C5A6E15FF6D6C5E6D6C4A90C7FC6D6C4A5A6D6C4A5A6D6CEC1FF86D01C0EB7FF091
3A7FF803FFC0021FB65A6E4AC8FC020314F8DA007F13E0DB0FFEC9FC42757AF14F>54
D<EA0780EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0780C7FCB3B3AAEA07
80EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA07800E4A72C92B>58
D<BA12F0F1FF801AF01AFCF2FF80D8003F01F0C86C7F010749030713F04B030013FC6DF0
3FFEF20FFF747F08017F747F757E88757E1B1F881B0F88A2751380A21DC0A287A21DE0AA
1DC0A263A21D80A2511300A2641B1F64515A515A1BFF6408035B5090C7FC505AF23FFCF2
FFF007075B077F138092B848C8FC1AF01A8007F0C9FC03C0CDFCB3B3AB497FA2013F13FC
B8FCA55B7678F56C>80 D<001FBE12F8A502F8C7000F01F0C7121F4801806E49020113FC
01FCC86C49EC003F491B1F01E01B07491B03491B0190C91800A2003E1D7CA2003C1D3CA3
481D1EA500701D0EA8481D07A6CA1900B3B3B3B14D7F4D7F057F13FE031FB812F8A56875
7BF473>84 D<913803FF80021F13F891B512FE903A03FC01FF80903A07E0003FE0D91F80
EB0FF8013EC76C7E496E7E01F06E7E48486E7F717E4848153F4982D807A06F7E13FC487E
6D6F7E80A2717EA46C90C8FC6C5A6C5ACAFCA6EE07FF0303B5FC157F913903FFFE07021F
138091387FF800903801FFC0010790C7FCEB1FFCEB3FF0EBFFE0485B485B4890C8FC5B48
5A485AA2485A1A0E485AA312FF5B170FA4171FA26D153F007F163B177B6DDBF1FE131C00
3F16E16C6C14016C6C912603C0FF13386C6CEC0F806C6C6C903A1F007F80706C6D017CEC
E1E028007FF803F8EB3FFF011FB500E06D1380010391C7000713009026003FF8EC01FC47
4D79CB4F>97 D<ED07FE92387FFFE00203B512FC91390FFC01FF913A3FE0001FC0DA7F80
EB03E0D901FEC812F84948157C494881494881494881013FEE0780494815034948ED0BC0
48177F91C9EAFFE048485D00075EA2485AA2485AA27113C0003F70138049EE7F0095C7FC
127FA35BA212FFAE127F7FA4123F7FA2121F6D1738120F19786C6C1770A26C6C17F019E0
6C6D15016C18C06D6C15036D6CED07806EED0F006D6C151E6D6C153ED903FE5D6D6C15F0
6D01C0EB03E0DA3FF0EB0FC0DA0FFE01FFC7FC0203B512FCDA007F13E0030790C8FC3D4D
7BCB46>99 D<191FF07FFF051FB5FCA5EF001F180784A284B3B0ED07FE92387FFFC00203
B512F091390FFC01FC91393FE0001FDAFF80EB07814990C7EA03E1D903FCEC01F14948EC
0079D91FF0153D4948151D4A151F49488101FF824890C9FC48835B0007835B120F5B121F
A2123F5BA2127FA35BA212FFAE127FA27FA3123FA36C7EA36C7EA200075F7F00035F6C7E
606C6D5D6D6C153D013F16396D6C03797F6D6C15F16D6CDA03E17FD903FEDA078113F0D9
00FFDA1F01EBFFF0DA7FC0137E91391FF803F80207B512E0020114809127001FF800EC80
004C797AF758>I<ED1FFC4AB512C0020714F091391FF00FFC91397F8001FFD901FEC7EA
7FC049486E7E49486E7E49486E7E49486E7E49486E7E4948140101FF824890C91380A248
48EE7FC0A2485A000FEF3FE05BA2001F18F0181F485AA3007F18F8A349160FA212FF90B9
FCA301E0CBFCAB127F7FA3123FA36C7EA219386C7E1978000718707F000318F06C6C17E0
18016C6DED03C06D6C1680013F16076D6CED0F006D6C151E6D6C5D6D6C5D6DB44A5A6D6C
6C495ADA3FE0EB1F80DA0FFE01FEC7FC0203B512F8DA007F13E0DB07FEC8FC3D4D7BCB46
>I<F103F8F13FFEDB1FF891B5FC92B5903903FC078002079139E007E01F913D1FF00FF8
1F803FC0913B3FC003FC3E0002FFC7B45A49486E5A49486E5A49486E48EB1F8049486E6C
EB060097C7FC49486E7E013F82A249486E7EA201FF82A24A80A24884AA6C95C8FCA26E5C
A2017F5EA26D6C4A5AA2011F5E6D6C4A5AA26D6C4A5A6D6C4A5A496C4A5A6E4AC9FC903A
0F3FC003FC903A1E1FF00FF80207B512E0D91C0091CAFC013CEB1FF892CCFCA25BA3137C
A4137EA27F8080EB1FF091B612FE6DEDFFF818FF6D17E06D17F8010017FE010383010F84
D93FE0C7000114E001FFC9120FD801FC04017F48489338003FF84848171F4848717E4848
1707003F727E49170148CBFC737EA200FE85A76C616C616D1701003F616D17036C6C4D5A
6C6C4D5A6C6C4D5A6C6C4D5A6C6C4D5A26007F80DB01FEC7FCD93FE0ED07FCD90FF8ED1F
F0D903FFEDFFC0010001F8011F90C8FC021FB612F802011580DA000F01F0C9FC4A707DCC
4F>103 D<EB01F0EA07FFB5FCA51201EA007F133FA2131FB3B3B3B3B3AC497EEBFFFEB6
12FEA51F787AF72A>108 D<D901F0902601FFC0ED0FFED807FF021F01FC92B512E0B502
7F01FF020314F8922601FC0101C090390FE00FFE922803E0003FE090391F0001FFDB0F80
D91FF8017C6D13C04BC7000F4A147FC6023C912707FC01E06E7E013F496E6C48486E7E01
1F0170DA01FF496E7E03F0160790260FF1E04CC8FCDAF3C06E019E6F7E4B169C02F717BC
92C913B802FFDC7FF86F7E4A5FA34A5FA44A5FB3B3A8496C4C6C4B7ED97FFF030301F803
1F13C0B7D88007B600FC013FB612E0A57B4B7ACA86>I<D901F0903803FF80D807FF021F
13F8B5027F13FE923A01FC03FF80923A03E0007FE0DB0F80EB1FF0031EC76C7EC65C013F
496E7E011F496E7E5DEB0FF1DAF3C06E7E5D14F792C9FC02FF835CA35CA45CB3B3A8496C
4B7FD97FFF030713F0B7D8800FB612F8A54D4B7ACA58>I<ED07FE92387FFFE00203B512
FC91390FFC03FF913A3FC0003FC04AC7EA0FE0D901FEEC07F8D903F8EC01FC49486E7E49
48157F49486F7E49486F7E017F8349C96C7E4916070001844848707EA200078449160100
0F84A24848701380A2003F19C0A349177F007F19E0A412FF1AF0AD007F19E0A26D17FFA2
003F19C0A46C6C4C1380A2000F1900A26C6C4C5AA26C6C4C5A0001606D160F6C606D6C4B
5A6D6C4B5AA26D6C4B5AD907F003FEC7FCD903FCEC03FC6D6C4A5A6D6C6CEB1FF0DA3FE0
EB7FC091270FFC03FFC8FC0203B512FCDA007F13E0DB07FEC9FC444D7BCB4F>I<02F849
B47ED803FF021F13F8B5027F13FE923A01FC01FF80923A07E0003FE0031FC76C7E033EEC
0FFCC60278EC03FE013F496E7E90261FF9E06E7FDAFBC0826DB4486F7E92C96C7E737E5C
4A707E864A160786851B80A2851BC0A2851BE0A5F27FF0AEF2FFE0A54F13C0A34F1380A2
1B0061626E160F626E161F626E4C5A4F5A6F5EDAFBC015FFDAF9E04A5BDAF8F04A48C7FC
03784A5A6F4A5A031FEC3FF06F6CEBFFC0922603F80790C8FC0300B512FC043F13E0DC07
FEC9FC93CBFCB3A7497EEB7FFFB77EA54C6C7BCA58>I<D903E0EB1FE0D80FFFECFFFCB5
01037F923907E01F8092391F807FC092383E00FF4B4813E000011478D8007F13F090383F
E1E015C0EB1FE39126E7800013C0EF7F8092C7EA3F0002EF91C7FC14EE14FE5CA45CA55C
B3B3A480133F90B5FCB712C0A5334B7ACA3D>114 D<DA1FFFEB038049B512E0010FECF8
07903A3FE001FE0F01FEC7EA1F9FD801F8EC07DFD807E0EC03FF484880498048C9127F48
163F003E161F127E170F127C12FC1707A46C1603A27E7F6C7E7F6D92C7FCEA3FFC13FF6C
13E06C13FF6C14F06CECFF806C15F86C15FE013F6E7E010F15E0010381010081020F14FE
DA007F7F1503DB003F1380040713C0040113E000E081177FEF3FF06C161F170FEF07F8A2
17037E1701A27EA37E18F07E17036D16E0A26D15076DED0FC06D168000FE161F017CED3F
00486C157E6DEC01F826F80FC0EB07F026F003F8EB7FC00100B6C7FC48013F13FC020713
80354D7CCB3E>I<02F8EE0F80D803FFEE3FFFB5030FB5FCA5C6EE000F013F1603011F82
A2010F82B3B3A660A460A3601307606E150E0103161E606E4B7F010116706D6C03F07F6F
D903E013F86E6C4948EBFFF8DA1FE0EB1F00DA0FFE13FE0203B512F8DA007F13E0030790
C7EBC0004D4C7ACA58>117 D<007FB500FC0203B512FEA5C66C01F06E14C0010F496E01
FCC7FC010349ED7FF06D18C06D60077EC8FC6E6C157C6E6C5D6E6C5D4E5A6E6C5D6E6C14
036E6C4A5A4EC9FC6E6D131E6E7F6F6C5B033F5C705B6F6C5B92380FFC010307495A7048
5A6F6C48CAFC6F138E6F139E17FC705A705A161F83707E707E835E4C7F043C7F4C6C7E16
709338F03FF04B486C7E4B486C7E168003076D7E4B486C7E031E6D7F5D03386D7F03786E
7E4B6E7E4A48141F4A4881727E4A486E7E4AC81203021E82023E6F7F027E6F7F4A167F01
0184010784D91FFE83017FEFFFFE0007B54B6D7EB600C00207ECFFC0A5524A80C953>
120 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop Black Black Black Black 482 809 a Fl(TP6)52 b
Fk(Caml)g Fl(:)g(Plus)h(grand)f(pr)l(\023)-74 b(e\014xe)51
b(comm)l(un)0 1469 y Fj(Le)30 b(but)g(de)g(ce)g(TP)h(est)f(de)g(r)m
(\023)-46 b(ealiser)31 b(un)f(programme)g(qui)g(rec)m(herc)m(he)i(le)e
(plus)h(grand)e(pr)m(\023)-46 b(e\014xe)32 b(comm)m(un)0
1590 y(dans)h(un)f(ensem)m(ble)i(de)f(mots)f(not)m(\023)-46
b(e)32 b Fi(M)10 b Fj(.)33 b(P)m(ar)f(exemple,)i(le)f(plus)f(grand)g
(pr)m(\023)-46 b(e\014xe)34 b(comm)m(un)f(de)f(la)g(liste)0
1710 y Fh(["indice";"initial";"init)q(ier")q(])38 b Fj(est)c
Fh("in")p Fj(.)0 1831 y(Ce)i(probl)m(\022)-46 b(eme)35
b(a)g(des)h(applications)f(pratiques)i(:)d(certains)i(en)m(vironnemen)m
(ts)i(informatiques)f(o\013ren)m(t)0 1951 y(la)42 b(p)s(ossibilit)m
(\023)-46 b(e)43 b(de)g(compl)m(\023)-46 b(eter)43 b(les)g(noms)f(de)h
(\014c)m(hiers)g(autan)m(t)f(que)h(p)s(ossible)g(tan)m(t)f(qu'il)h(n'y)
g(a)f(pas)0 2071 y(d'am)m(bigu)-11 b(\177)-38 b(\020t)m(\023)-46
b(e.)34 b(Si)f(par)f(exemple,)j(mon)e(r)m(\023)-46 b(ep)s(ertoire)33
b(couran)m(t)g(con)m(tien)m(t)h(les)f(trois)g(\014c)m(hiers)p
Black Black 859 2226 a Fh(recursivite.ml)106 b(recurrence.ml)157
b(arbres.ml)0 2381 y Fj(alors)27 b(la)f(c)m(ha)-11 b(^)-38
b(\020ne)28 b(de)f(caract)m(\022)-46 b(eres)28 b Fh(re)g
Fj(p)s(eut)c(^)-46 b(etre)27 b(compl)m(\023)-46 b(et)m(\023)g(e)28
b(en)f Fh(recur)p Fj(,)h Fh(recurs)h Fj(compl)m(\023)-46
b(et)m(\023)g(e)28 b(directemen)m(t)0 2501 y(en)33 b
Fh(recursivite.ml)j Fj(et)d Fh(a)g Fj(en)g Fh(arbres.ml)p
Fj(.)0 2834 y Fg(1)161 b(Liste)54 b(d'asso)t(ciation)0
3053 y Fj(Une)36 b(liste)f(d'asso)s(ciation)h(est)g(une)f(liste)h(de)g
(t)m(yp)s(e)f Fh(\('a*'b\))54 b(list)p Fj(,)36 b(asso)s(cian)m(t)f(des)
h(ob)5 b(jets)36 b(de)g(t)m(yp)s(es)0 3173 y Fh('b)d
Fj(\022)-49 b(a)32 b(des)i(ob)5 b(jets)33 b(de)g(t)m(yp)s(e)h
Fh('a)p Fj(.)f(On)g(p)s(eut)g(ainsi)g(asso)s(ci)m(\023)-46
b(e)33 b(des)h(noms)f(\022)-49 b(a)32 b(des)i(n)m(um)m(\023)-46
b(eros)34 b(de)f(t)m(\023)-46 b(elephone)34 b(:)p Black
Black 0 3328 a Fh(let)52 b(list_num)h(=)f(["Pierre",4131;)820
3448 y("Paul",2134;)820 3569 y("Jacques",7697;)820 3689
y("Arthur",2964;)820 3810 y("Michel",9871];;)0 3964 y
Ff(1.)34 b Fj(Ecrire)h(une)f(fonction)g Fh(appartient:)55
b(`a)c(->)h(\('a*'b\))h(list)g(->)e(bool)35 b Fj(qui)g(teste)g(si)f(un)
h(ob)5 b(jet)0 4085 y(de)33 b(t)m(yp)s(e)h Fh('a)f Fj(apparait)f(dans)h
(une)g(liste)h(d'asso)s(ciation.)0 4205 y(Exemple)h(:)p
Black Black 0 4360 a Fh(#appartient)54 b("Arthur")g(list_num;;)0
4480 y(-)e(:)f(bool)h(=)g(true)0 4601 y(#appartient)i("David")f
(list_num;;)0 4721 y(-)f(:)f(bool)h(=)g(false)0 4925
y Ff(2.)41 b Fj(Ecrire)g(une)g(fonction)g Fh(recherche:)54
b(`a)e(->)g(\('a*'b\))h(list)f(->)g('b)41 b Fj(qui)g(retourne)g(l'ob)5
b(jet)41 b(de)0 5046 y(t)m(yp)s(e)g Fh('b)f Fj(asso)s(ci)m(\023)-46
b(e)41 b(\022)-49 b(a)39 b(un)h(ob)5 b(jet)40 b Fh(a)g
Fj(de)g(t)m(yp)s(e)h Fh('a)f Fj(dans)g(une)h(liste)f(d'asso)s(ciation)h
(\(et)f(une)g(erreur)h(si)f Fh(a)0 5166 y Fj(n'est)34
b(pas)f(pr)m(\023)-46 b(esen)m(t)34 b(dans)f(la)f(liste\).)0
5287 y(Exemple)j(:)p Black Black 0 5441 a Fh(#recherche)54
b("Paul")f(list_num;;)0 5562 y(-)f(:)f(int)h(=)g(2134)0
5766 y Ff(3.)29 b Fj(Ecrire)h(une)f(fonction)g Fh(change)53
b(:)f(`a)f(->)h(`b)g(->)g(\('a*'b\))h(list)f(->)g(\('a*'b\))h(list)30
b Fj(qui)f(mo-)0 5887 y(di\014e)k(l'ob)5 b(jet)33 b(asso)s(ci)m(\023)
-46 b(e)33 b(\022)-49 b(a)33 b(une)g(en)m(tr)m(\023)-46
b(ee)33 b Fh(a)g Fj(dans)g(une)g(liste)g(d'asso)s(ciation)g(\(ou)f(cr)m
(\023)-46 b(ee)34 b(une)f(nouv)m(elle)h(asso-)p Black
1885 6180 a(1)p Black eop
%%Page: 2 2
2 1 bop Black 0 84 a Fj(TP6)33 b Fe(Caml)2165 b Fj(Plus)33
b(grand)g(pr)m(\023)-46 b(e\014xe)34 b(comm)m(un)p 0
124 3820 4 v Black 0 407 a(ciation)k(si)g Fh(a)g Fj(n')m(\023)-46
b(etait)38 b(pas)h(pr)m(\023)-46 b(esen)m(t)39 b(dans)g(la)e(liste\).)i
(On)f(supp)s(osera)h(qu'une)g(en)m(tr)m(\023)-46 b(ee)39
b Fh(a)f Fj(ne)g(p)s(eut)h(pas)0 527 y(appara)-11 b(^)-38
b(\020tre)32 b(plus)i(d'une)g(fois)e(dans)h(la)g(liste.)0
648 y(Exemple)i(:)p Black Black 0 802 a Fh(#change)53
b("Jacques")h(5555)e(list_num;;)0 923 y(-)g(:)f(\(string)i(*)f(int\))g
(list)g(=)51 1043 y(["Pierre",)i(4131;)f("Paul",)g(2134;)g("Jacques",)g
(5555;)g("Arthur",)h(2964;)103 1163 y("Michel",)f(9871])0
1284 y(#change)g("David")g(9292)g(list_num;;)0 1404 y(-)f(:)f(\(string)
i(*)f(int\))g(list)g(=)51 1525 y(["David",)i(9292;)f("Pierre",)g(4131;)
g("Paul",)g(2134;)g("Jacques",)g(7697;)103 1645 y("Arthur",)g(2964;)g
("Michel",)g(9871])0 2062 y Fg(2)161 b(Rec)l(herc)l(he)51
b(du)i(plus)h(grand)f(pr)l(\023)-77 b(e\014xe)52 b(comm)l(un)0
2310 y Fd(2.1)135 b(Con)l(v)l(ersion)46 b(c)l(ha)-15
b(^)-52 b(\020ne)46 b(de)f(caract)m(\022)-64 b(eres)46
b Fc($)e Fd(liste)j(de)d(caract)m(\022)-64 b(eres)0 2495
y Ff(4.)37 b Fj(Ecrire)h(une)g(fonction)g Fh(char)p 1198
2495 31 4 v 38 w(list)p 1440 2495 V 38 w(of)p 1580 2495
V 37 w(string)53 b(:)e(string)i(->)f(char)g(list)39 b
Fj(qui)e(con)m(v)m(ertit)i(une)0 2615 y(c)m(ha)-11 b(^)-38
b(\020ne)34 b(de)f(caract)m(\022)-46 b(eres)34 b(en)f(une)g(liste)g(de)
g(caract)m(\022)-46 b(eres.)0 2735 y(Exemple)35 b(:)p
Black Black 0 2890 a Fh(char_list_of_string)56 b("Caml";;)0
3011 y(#-)c(:)f(char)i(list)f(=)g(char_list_of_string)k([`C`;)c(`a`;)h
(`m`;)f(`l`];;)0 3215 y Ff(5.)37 b Fj(Ecrire)h(une)g(fonction)g
Fh(string)p 1300 3215 V 38 w(of)p 1440 3215 V 38 w(char)p
1682 3215 V 38 w(list)52 b(:)f(char)i(list)f(->)g(string)39
b Fj(qui)e(con)m(v)m(ertit)i(une)0 3335 y(liste)33 b(de)h(caract)m
(\022)-46 b(eres)33 b(en)g(une)h(c)m(ha)-11 b(^)-38 b(\020ne)33
b(de)g(caract)m(\022)-46 b(eres.)0 3456 y(Exemple)35
b(:)p Black Black 0 3610 a Fh(#string_of_char_list)57
b([`C`;)52 b(`a`;)h(`m`;)f(`l`];;)0 3731 y(-)g(:)f(string)i(=)e("Caml")
0 4104 y Fd(2.2)135 b(Utilisation)48 b(d'un)c(arbre)i
Fb(n)p Fc(\000)p Fd(aire)0 4289 y Fj(P)m(our)39 b(p)s(ouv)m(oir)g
(faire)f(une)h(rec)m(herc)m(he)i(e\016cace,)f(on)f(construit)g(\022)-49
b(a)38 b(partir)h(des)g(mots)g(de)g Fi(M)49 b Fj(un)39
b(arbre)0 4409 y Fi(n)p Fa(\000)p Fj(aire)d(don)m(t)f(les)g(branc)m
(hes)i(son)m(t)c(\023)-46 b(etiquet)m(\023)g(ees)37 b(a)m(v)m(ec)f(des)
g(lettres)g(et)f(les)g(n\033uds)h(a)m(v)m(ec)g(des)g(mots,)f(qui)0
4529 y(son)m(t)e(soit)g(des)h(pr)m(\023)-46 b(e\014xes)34
b(de)f Fi(M)10 b Fj(,)34 b(soit)e(des)i(mots)f(de)g Fi(M)10
b Fj(.)0 4650 y(Exemple)45 b(:)d(si)h Fi(M)55 b Fj(=)p
Fh(["caml";"caf\023)-51 b(e";"caf\023)g(es";"c)q(arte)q(";")q(java)q
("])p Fj(,)49 b(alors)42 b(l'arbre)h(est)g(le)g(sui-)0
4770 y(v)-5 b(an)m(t)33 b(:)p Black 1885 6180 a(2)p Black
eop
%%Page: 3 3
3 2 bop Black 0 84 a Fj(TP6)33 b Fe(Caml)2165 b Fj(Plus)33
b(grand)g(pr)m(\023)-46 b(e\014xe)34 b(comm)m(un)p 0
124 3820 4 v Black Black Black 2275 437 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 12.35 6.175 3.66666 }
false /N@T-0 16 {InitRnode } NewNode end end
 2275 437 a
Fh("")1517 910 y
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 18.52501 9.2625 3.66666
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1517 910 a Fh("c")1594 879 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1594 879
a 1594 879 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1594 879 a 1517 909 a Fh(`c`)1594 879 y
 tx@Dict begin PutEnd  end

1594 879 a 1491 1382 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 24.70001 12.35 3.66666
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1491 1382 a Fh("ca")1594 1352
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1594 1352 a 1594 1352 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1594 1352 a 1517 1382 a Fh(`a`)1594
1352 y
 tx@Dict begin PutEnd  end
 1594 1352 a 683 1855 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 30.87502 15.4375 3.66666
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 683 1855 a Fh("caf")811
1824 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 811 1824 a 811 1824 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 811 1824 a 734 1854 a Fh(`f`)811
1824 y
 tx@Dict begin PutEnd  end
 811 1824 a 657 2327 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-0-0-0-0 14 {/X 18.52501
def /Y 3.66666 def /w 21.21161 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 657 2327 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 21.21161 2 mul 6.35326 2 mul 0 18.52501 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial Fh("caf\023)-51 b(e")811 2297
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 811 2297 a 811 2297 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 811 2297 a 734 2327 a Fh(`\023)g(e`)811
2297 y
 tx@Dict begin PutEnd  end
 811 2297 a 632 2799 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-0-0-0-0-0 14 {/X 21.6125
def /Y 3.66666 def /w 24.2991 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 632 2799 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 24.2991 2 mul 6.35326 2 mul 0 21.6125 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial Fh("caf\023)g(es")811 2769 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0-0-0 /N@T-0-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

811 2769 a 811 2769 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 811 2769 a 734 2799 a Fh(`s`)811
2769 y
 tx@Dict begin PutEnd  end
 811 2769 a 1565 1855 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 30.87502 15.4375 3.66666
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 1565 1855 a Fh("cam")1693
1824 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1693 1824 a 1693 1824 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1693 1824 a 1616 1854
a Fh(`m`)1693 1824 y
 tx@Dict begin PutEnd  end
 1693 1824 a 1539 2327 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-0-0-1-0 14 {/X 18.52501
def /Y 3.66666 def /w 21.21161 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 1539 2327
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 21.21161 2 mul 6.35326 2 mul 0 18.52501 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial Fh("caml")1693
2297 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1693 2297 a 1693 2297 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1693 2297 a 1616 2327
a Fh(`l`)1693 2297 y
 tx@Dict begin PutEnd  end
 1693 2297 a 2248 1855 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 30.87502 15.4375 3.66666
} false /N@T-0-0-0-2 16 {InitRnode } NewNode end end
 2248 1855
a Fh("car")2376 1824 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0 /N@T-0-0-0-2 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2376 1824 a 2376 1824 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2376 1824
a 2299 1854 a Fh(`r`)2376 1824 y
 tx@Dict begin PutEnd  end
 2376 1824 a 2222 2327
a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 37.05002 18.52501 3.66666
} false /N@T-0-0-0-2-0 16 {InitRnode } NewNode end end
 2222 2327 a Fh("cart")2376 2297 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0-2 /N@T-0-0-0-2-0 InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2376 2297 a 2376
2297 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2376 2297 a 2299 2327 a Fh(`t`)2376 2297 y
 tx@Dict begin PutEnd  end
 2376
2297 a 2196 2799 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-0-0-2-0-0 14 {/X 21.6125
def /Y 3.66666 def /w 24.2991 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 2196 2799 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 24.2991 2 mul 6.35326 2 mul 0 21.6125 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial Fh("carte")2376 2769 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0-2-0 /N@T-0-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2376 2769 a 2376
2769 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2376 2769 a 2299 2799 a Fh(`e`)2376 2769 y
 tx@Dict begin PutEnd  end
 2376
2769 a 2982 899 a
 tx@Dict begin tx@NodeDict begin {7.33333 2.66666 18.52501 9.2625 2.33333
} false /N@T-0-1 16 {InitRnode } NewNode end end
 2982 899 a Fh("j")3059 879 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3059 879
a 3059 879 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 6.28331 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 3059 879 a 2982 909 a Fh(`j`)3059 879 y
 tx@Dict begin PutEnd  end

3059 879 a 2957 1371 a
 tx@Dict begin tx@NodeDict begin {7.33333 2.66666 24.70001 12.35 2.33333
} false /N@T-0-1-0 16 {InitRnode } NewNode end end
 2957 1371 a Fh("ja")3059 1352
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3059 1352 a 3059 1352 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 3059 1352 a 2982 1382 a Fh(`a`)3059
1352 y
 tx@Dict begin PutEnd  end
 3059 1352 a 2931 1844 a
 tx@Dict begin tx@NodeDict begin {7.33333 2.66666 30.87502 15.4375
2.33333 } false /N@T-0-1-0-0 16 {InitRnode } NewNode end end
 2931 1844 a Fh("jav")3059
1824 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3059 1824 a 3059 1824 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 3059 1824 a 2982 1854
a Fh(`v`)3059 1824 y
 tx@Dict begin PutEnd  end
 3059 1824 a 2905 2316 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-1-0-0-0 14 {/X 18.52501
def /Y 2.33333 def /w 21.21161 2 mul def /h 7.68658 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 2905 2316
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 21.21161 2 mul 7.68658 2 mul 0 18.52501 2.33333 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial Fh("java")3059
2297 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3059 2297 a 3059 2297 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 3059 2297 a 2982 2327
a Fh(`a`)3059 2297 y
 tx@Dict begin PutEnd  end
 3059 2297 a 0 2986 a Fj(Nous)33
b(consid)m(\023)-46 b(ererons)35 b(le)e(t)m(yp)s(e)g
Fh(arbre)h Fj(suiv)-5 b(an)m(t)34 b(:)p Black Black 0
3141 a Fh(type)52 b(etiquette)i(=)e(Mot)g(of)f(string)769
3261 y(|)h(Prefixe)h(of)e(string)i(;;)0 3502 y(type)f(arbre)h(=)e
(Noeud)i(of)f(etiquette)i(*)d(\(char)i(*)e(arbre\))i(list)f(;;)0
3657 y Fj(Les)39 b(di\013)m(\023)-46 b(eren)m(tes)41
b(branc)m(hes)f(partan)m(t)e(d'un)i(n\033ud)f(son)m(t)g(repr)m(\023)-46
b(esen)m(t)m(\023)g(ees)41 b(par)e(une)g(liste)g(d'asso)s(ciation)0
3777 y(qui)33 b(asso)s(cie)h(des)d(\023)-46 b(etiquettes)34
b(a)m(v)m(ec)g(des)g(arbres)f(\014ls.)0 4037 y Ff(2.2.1)112
b(Rec)m(herc)m(he)38 b(dans)g(l'arbre)0 4222 y Fj(V)-8
b(ous)27 b(testerez)i(les)e(fonctions)h(de)f(cette)g(section)h(sur)g
(les)f(exemples)j(donn)m(\023)-46 b(es)27 b(dans)h(le)f(\014c)m(hier)h
Fh(TP6.squ)p Fj(.)0 4342 y(Les)33 b(arbres)g(donn)m(\023)-46
b(es)34 b(son)m(t)f(les)h(suiv)-5 b(an)m(ts)34 b(:)p
Black Black 656 4497 2507 4 v 654 4617 4 121 v 730 4581
a Ff(arbre)p 1062 4617 V 902 w(ensem)m(ble)p 3161 4617
V 656 4621 2507 4 v 654 4741 4 121 v 706 4705 a Fh(arbre1)p
1062 4741 V 127 w(["caml";"caf\023)-51 b(e";"caf\023)g(es";"c)q(art)q
(e";")q(java)q("])p 3161 4741 V 656 4744 2507 4 v 654
4865 4 121 v 706 4828 a(arbre2)p 1062 4865 V 101 w
(["cantine";"canard";"ca)q(nari)q(";"c)q(andi)q(de")q(])p
3161 4865 V 656 4868 2507 4 v 654 4988 4 121 v 706 4952
a(arbre3)p 1062 4988 V 255 w(["abricot";"allumette";")q(allu)q(mer")q
(;)p 3161 4988 V 654 5109 V 1062 5109 V 1165 5073 a("caml";"caf\023)g
(e";"caf\023)g(es";"car)q(te";)q("jav)q(a";)p 3161 5109
V 654 5229 V 1062 5229 V 1139 5193 a("cantine";"canard";"canar)q(i";)q
("can)q(dide)q("])p 3161 5229 V 656 5232 2507 4 v 0 5344
a Ff(6.)29 b Fj(Ecrire)g(une)g(fonction)f Fh(plus)p 1162
5344 31 4 v 38 w(grand)p 1455 5344 V 39 w(prefixe)53
b(:)e(arbre)i(->)f(string)30 b Fj(qui)f(calcule)g(le)g(plus)g(grand)0
5465 y(pr)m(\023)-46 b(e\014xe)34 b(comm)m(un)g(d'un)f(ensem)m(ble)i
(de)e(mots.)0 5635 y(Exemple)i(:)p Black Black 0 5789
a Fh(#plus_grand_prefixe)56 b(arbre2;;)0 5910 y(-)c(:)f(string)i(=)e
("can")p Black 1885 6180 a Fj(3)p Black eop
%%Page: 4 4
4 3 bop Black 0 84 a Fj(TP6)33 b Fe(Caml)2165 b Fj(Plus)33
b(grand)g(pr)m(\023)-46 b(e\014xe)34 b(comm)m(un)p 0
124 3820 4 v Black 0 407 a Ff(7.)41 b Fj(Ecrire)h(une)f(fonction)g
Fh(arbre)p 1263 407 31 4 v 38 w(prefixe)53 b(:)f(string)h(->)f(arbre)g
(->)g(arbre)42 b Fj(qui)g(ren)m(v)m(oie,)g(p)s(our)0
527 y(un)36 b(mot)g Fi(p)p Fj(,)f(le)h(sous-arbre)h(des)f(mots)g(de)h
Fi(M)46 b Fj(don)m(t)36 b Fi(p)g Fj(est)g(un)g(pr)m(\023)-46
b(e\014xe.)37 b(Cette)g(fonction)f(ren)m(v)m(oie)h(une)0
648 y(erreur)c(si)g(le)g(pr)m(\023)-46 b(e\014xe)34 b(donn)m(\023)-46
b(e)34 b(ne)f(corresp)s(ond)g(\022)-49 b(a)32 b(aucun)i(mot)e(dans)h
(l'arbre.)0 768 y(Exemple)i(:)0 888 y Fh(arbre)p 261
888 V 38 w(prefixe)53 b("ca")g(arbre1)g(=)p Black Black
1807 1073 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 24.70001 12.35 3.66666
} false /N@T-0 16 {InitRnode } NewNode end end
 1807 1073 a Fh("ca")1910 1043 y
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1910 1043
a 1833 1073 a Fh(`a`)1910 1043 y
 tx@Dict begin PutEnd  end
 1910 1043 a 999 1546
a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 30.87502 15.4375 3.66666
} false /N@T-0-0 16 {InitRnode } NewNode end end
 999 1546 a Fh("caf")1127 1515 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1127 1515 a 1127 1515
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1127 1515 a 1050 1546 a Fh(`f`)1127 1515 y
 tx@Dict begin PutEnd  end
 1127 1515
a 973 2018 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-0-0 14 {/X 18.52501
def /Y 3.66666 def /w 21.21161 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 973 2018 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 21.21161 2 mul 6.35326 2 mul 0 18.52501 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
Fh("caf\023)-51 b(e")1127 1988 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1127 1988 a 1127 1988
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1127 1988 a 1050 2018 a Fh(`\023)g(e`)1127 1988 y
 tx@Dict begin PutEnd  end
 1127
1988 a 948 2491 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-0-0-0 14 {/X 21.6125
def /Y 3.66666 def /w 24.2991 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 948 2491 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 24.2991 2 mul 6.35326 2 mul 0 21.6125 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial Fh("caf\023)g(es")1127 2460 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1127 2460
a 1127 2460 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1127 2460 a 1050 2490 a Fh(`s`)1127 2460
y
 tx@Dict begin PutEnd  end
 1127 2460 a 1881 1546 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 30.87502 15.4375 3.66666
} false /N@T-0-1 16 {InitRnode } NewNode end end
 1881 1546 a Fh("cam")2009 1515
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2009 1515 a 2009 1515 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 2009 1515 a 1932 1546 a Fh(`m`)2009
1515 y
 tx@Dict begin PutEnd  end
 2009 1515 a 1855 2018 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-1-0 14 {/X 18.52501
def /Y 3.66666 def /w 21.21161 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 1855 2018 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 21.21161 2 mul 6.35326 2 mul 0 18.52501 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial Fh("caml")2009 1988 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2009 1988
a 2009 1988 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 2009 1988 a 1932 2018 a Fh(`l`)2009 1988
y
 tx@Dict begin PutEnd  end
 2009 1988 a 2564 1546 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 30.87502 15.4375 3.66666
} false /N@T-0-2 16 {InitRnode } NewNode end end
 2564 1546 a Fh("car")2692 1515
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2692 1515 a 2692 1515 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2692 1515 a 2615 1546 a Fh(`r`)2692
1515 y
 tx@Dict begin PutEnd  end
 2692 1515 a 2538 2018 a
 tx@Dict begin tx@NodeDict begin {7.33333 0.0 37.05002 18.52501 3.66666
} false /N@T-0-2-0 16 {InitRnode } NewNode end end
 2538 2018 a Fh("cart")2692
1988 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2692 1988 a 2692 1988 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2692 1988 a 2615 2018
a Fh(`t`)2692 1988 y
 tx@Dict begin PutEnd  end
 2692 1988 a 2512 2491 a
 tx@Dict begin tx@NodeDict begin {} false /N@T-0-2-0-0 14 {/X 21.6125
def /Y 3.66666 def /w 24.2991 2 mul def /h 6.35326 2 mul def /NodePos
{ DiaNodePos } def} NewNode end end
 2512 2491
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /Lineto /lineto load
def false pop .5 24.2991 2 mul 6.35326 2 mul 0 21.6125 3.66666 Diamond
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial Fh("carte")2692
2460 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.0
2.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2692 2460 a 2692 2460 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 9.2625 def
/r 9.2625 def /h 3.71667 def /d 3.61665 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2692 2460 a 2615 2490
a Fh(`e`)2692 2460 y
 tx@Dict begin PutEnd  end
 2692 2460 a 0 2727 a Ff(8.)22 b
Fj(Ecrire)h(une)f(fonction)g Fh(complete)53 b(:)f(arbre)g(->)g(string)h
(->)f(string)23 b Fj(rec)m(herc)m(han)m(t)h(le)e(plus)h(grand)0
2848 y(compl)m(\023)-46 b(emen)m(t)30 b(p)s(ossible)g(d'un)f(mot)f
Fi(p)p Fj(,)g(c'est-\022)-49 b(a-dire)29 b(le)g(plus)g(grand)f(pr)m
(\023)-46 b(e\014xe)30 b(comm)m(un)g(\022)-49 b(a)28
b(tous)g(les)i(mots)0 2968 y(de)j Fi(M)43 b Fj(don)m(t)33
b Fi(p)g Fj(est)g(un)g(pr)m(\023)-46 b(e\014xe.)0 3089
y(Exemple)35 b(:)p Black Black 0 3243 a Fh(#complete)54
b(arbre3)f("al";;)0 3364 y(-)f(:)f(string)i("allume")0
3568 y Ff(9.)d Fj(Ecrire)g(une)g(fonction)g Fh(trouve)p
1349 3568 31 4 v 38 w(complements)k(:)e(arbre)g(->)g(string)h(->)f
(string)h(list)d Fj(qui)0 3689 y(ren)m(v)m(oie,)34 b(p)s(our)f(un)g
(mot)f Fi(p)p Fj(,)h(tous)g(les)g(mots)g(de)g Fi(M)43
b Fj(don)m(t)33 b Fi(p)g Fj(est)g(pr)m(\023)-46 b(e\014xe.)0
3809 y(P)m(our)35 b(cette)g(fonction)g(v)m(ous)g(aurez)g(b)s(esoin)g
(de)g(plusieurs)i(sous-fonctions)e(don)m(t)g(la)f(fonction)g
Fh(map)h Fj(de)0 3929 y Fe(Caml)24 b Fj(et)g(une)g(fonction)f
Fh(concat)p 1247 3929 V 39 w(list)52 b(:)g('a)g(list)g(list)g(->)g('a)g
(list)24 b Fj(\(\022)-49 b(a)21 b(\023)-46 b(ecrire\))24
b(qui)g(concat)m(\022)-46 b(ene)0 4050 y(les)33 b(listes)h(d'une)g
(liste.)0 4170 y(Exemple)h(:)p Black Black 0 4325 a Fh(#concat_list)54
b([[1;2];[3];[];[4;5;6]];)q(;)0 4445 y(-)e(:)f(int)h(list)g(=)g([1;)g
(2;)g(3;)g(4;)f(5;)h(6])0 4789 y Ff(2.2.2)112 b(Construction)37
b(de)h(l'arbre)0 4974 y Fj(L'arbre)23 b(de)g(rec)m(herc)m(he)j(est)d
(construit)h(en)g(partan)m(t)e(d'un)i(arbre)f(initialemen)m(t)h(vide)g
(\()p Fh(Noeud)53 b(\(Prefixe)0 5094 y("",[])p Fj(\))34
b(et)f(en)g(y)g(ins)m(\023)-46 b(eran)m(t)33 b(les)h(mots)f(de)g
Fi(M)43 b Fj(un)33 b(\022)-49 b(a)32 b(un.)0 5215 y Ff(10.)k
Fj(Ecrire)i(une)f(fonction)f Fh(insere)p 1352 5215 V
38 w(mot)p 1543 5215 V 38 w(liste)53 b(:)e(arbre)i(->)f(char)g(list)g
(->)g(arbre)38 b Fj(qui)f(ins)m(\022)-46 b(ere)0 5335
y(un)36 b(mot,)g(donn)m(\023)-46 b(e)36 b(sous)h(forme)f(de)g(liste)h
(de)f(caract)m(\022)-46 b(eres,)37 b(dans)g(un)f(arbre.)g(En)g(d)m
(\023)-46 b(eduire)37 b(une)g(fonction)0 5455 y Fh(insere)p
312 5455 V 39 w(mot)52 b(:)f(arbre)i(->)e(string)i(->)f(arbre)34
b Fj(qui)f(ins)m(\022)-46 b(ere)34 b(un)f(mot)g(de)g(t)m(yp)s(e)g
Fh(string)p Fj(.)0 5626 y Ff(11.)43 b Fj(En)g(d)m(\023)-46
b(eduire)44 b(une)f(fonction)g Fh(construit)p 1752 5626
V 40 w(arbre)52 b(:)g(string)h(list)f(->)g(arbre)44 b
Fj(qui)f(construit)0 5746 y(l'arbre)33 b(asso)s(ci)m(\023)-46
b(e)33 b(\022)-49 b(a)33 b(une)g(liste)g(de)h(mots.)f(T)-8
b(ester)34 b(v)m(otre)f(programme.)p Black 1885 6180
a(4)p Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
