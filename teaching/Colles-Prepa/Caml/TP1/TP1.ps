%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP1.dvi
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP1.ps TP1.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.27:0939
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP1.dvi)
@start
%DVIPSBitmapFont: Fa cmmi12 12 1
/Fa 1 60 df<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2
EA0300A212065AA25A5A12200B1D78891B>59 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmex10 12 6
/Fb 6 68 df<187C18FCEF01F8A2EF03F0EF07E0EF0FC0171F1880EF3F005F177E17FE4C
5A5F16034C5AA24C5A4C5AA24C5A167F94C7FC5E5E15015E15034B5AA24B5AA24B5AA24B
5AA2157F5E15FF93C8FCA24A5AA214035D14075DA2140F5D141FA25D143FA24A5AA34A5A
A34990C9FCA35B5CA213075CA3130F5CA2131FA25CA2133FA35C137FA4495AA5485BA55A
91CAFCA55A5BA5120FA35BA4121FA55BA4123FA75BA4127FAF5BA212FFB3A836B3638257
>48 D<12F87E127EA27E6C7E6C7E7F12076C7E7F12017F6C7E137E137F6D7EA26D7E6D7E
A26D7E801303801301801300806E7EA26E7EA26E7EA26E7EA2811407811403A26E7EA281
8082157FA282153F82A2151F82A26F7EA36F7EA36F7EA38281A28381A383167FA283A216
3FA283A3161F83A4707EA5707EA58382A5188082A518C0A382A418E0A5177FA418F0A717
3FA418F8AF171FA218FCB3A836B37D8257>I<EAFFE0B3A8127FA27FAF123FA47FA7121F
A47FA5120FA47FA31207A57F7EA5807EA56C7FA56D7EA4133F80A3131FA280A2130FA280
1307A3801303A2807FA36D7FA36E7EA36E7EA2141F81A2140F811407A2811403811401A2
6E7EA282157F82153FA26F7EA26F7EA26F7EA26F7E1501821500828283163F707EA2707E
707EA2707E160183707E177E177F83EF1F8018C0170FEF07E0EF03F0EF01F8A2EF00FC18
7C36B3638457>64 D<EF1FFCB3A818F8A2173FAF18F0A4177FA718E0A417FFA518C0A45E
A31880A55E1800A55E5FA54C5AA54C5AA45F163FA35FA2167FA25FA216FF5FA35D94C7FC
A25D5EA34B5AA34B5AA34B5AA25E153FA25E157F5EA215FF93C8FC5C5DA24A5AA214075D
140F5DA24A5AA24A5AA24A5AA24AC9FC5C13015C13035C13075C495AA2495A495AA249CA
FC137E13FE485A5B12035B485A120F5B485A48CBFC127EA25A5A36B37D8457>I<EAFFE0
B3B3B3A80B3E638057>I<EAFFE0B3B3B3A80B3E528057>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy10 12 2
/Fc 2 34 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<1AF0A3861A78A21A7C1A
3CA21A3E1A1E1A1F747EA2747E747E87747E747E1B7E87757EF30FE0F303F8007FBC12FE
BE1280A26CF3FE00CEEA03F8F30FE0F31F8051C7FC1B7E63505A505A63505A505AA250C8
FC1A1E1A3E1A3CA21A7C1A78A21AF862A359347BB264>33 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmbx12 12 11
/Fd 11 58 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC3FF849B5FC010F14E0013F14F890397FF01FFC9039FFC007FE489038
0001FF48486D1380000716C049147F000F16E049143F001F16F0A2003F16F8A249141F00
7F16FCA600FF16FEB3A3007F16FCA56C6CEC3FF8A3001F16F0A2000F16E06D147F000716
C06D14FF6C6C4913806C6D4813006C6D485A90397FF01FFC6DB55A010F14E00103148090
26003FF8C7FC2F427CC038>48 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003
B3B3ADB712FCA5264177C038>I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC
0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F
17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A
4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F049
5A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<
ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D13
8013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F138090
2607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A2
17F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81F
F0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>
I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E
147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B
48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<00071503
01E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF0
01C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C049
7F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B00
7EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D01
3F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC0107
9038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA2
48486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091
B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A3
17F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C
6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<
121E121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E
5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2
141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<
EC7FF00103B5FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E497F4848EC
7F80163F484815C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F014006C01FC
5B6E485A6C9038FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F80
90B7FC48013F14802607FC0F14C0260FF80314E04848C6FC496D13F0003F141F48481307
496D13F8150000FF157F90C8123F161F160FA21607A36D15F0127F160F6D15E06C6C141F
6DEC3FC06C6CEC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F
91C7FC010013F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF0
489038800FF848496C7E48488048486D7E001F80003F1680A2484815C08117E0A212FF17
F0A617F8A45D127FA3003F5CA26C7E5D6C6C5B12076C6C131E6CEBC07C6CEBFFF8013F5B
010F01C013F00101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C491380A21700
4B5A150F5E49495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0
D907FEC8FC2D427BC038>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmtt12 12 42
/Fe 42 126 df<EA07C0EA0FF0EA1FF8A213FCA213FE120F1207EA007EA613FE13FCA212
01EA03F8A2EA07F0120FEA1FE0EA7FC0EAFF8013005A5A12700F1E6EBC33>39
D<140FEC3F80147F14FF491300495AEB07F8495A495A495A495A49C7FC5B12015B485A12
075B120F5B121F5BA2123F5BA2127F90C8FCA45A5AAD7E7EA47F123FA27F121FA27F120F
7F12077F12036C7E7F12007F6D7E6D7E6D7E6D7E6D7EEB03FE6D7E6D1380147F143FEC0F
00194D6FC433>I<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E6C7E6C7E6D7E133F80131F
6D7E801307801303801301A2801300A28080A41580143FAD147F1500A45C5CA213015CA2
13035C13075C130F5C495A133F5C137F49C7FC485A485A485A485AEA3FE0485A485A90C8
FC5A1278194D78C433>I<14F0497EA8007015E000F8EC01F000FE140700FF140F01C113
3F01F113FF263FF9F913C0000FB61200000314FCC614F06D5B011F1380D907FEC7FC9038
1FFF80017F13E090B57E000314FC000F14FF263FF9F913C026FFF1F813F001C1133F0101
130F00FE140700F814010070EC00E000001500A86D5A242B79B333>I<EA07C0EA0FF0EA
1FF8123F13FCA213FEA2121F120F1207EA007E13FEA213FC1201EA03F81207EA0FF0EA7F
E012FF13C013005A12780F196E8A33>44 D<007FB612FEA2B8FCA36C15FEA228077BA133
>I<EB01E0497EA21307A2130FA2131F133F137F13FF1203123F5AEAFFF713E71387EA7E
071200B3B3A2003FB512FE48801680A216006C5C213E76BD33>49
D<EB03FF011F13E0017F13FC48B57E48ECFF804815C0260FFE0313E03A1FF0007FF049EB
1FF84848130F49EB03FC127F90C7EA01FE4814005A6C15FF167FA3127E123CC9FCA216FF
16FEA2150116FC150316F81507ED0FF0ED1FE0153F16C0ED7F80EDFF004A5AEC07FC4A5A
4A5A4A5A4A5A4A5A4990C7FC495AEB07F8EB1FF0495A495A495A4890C8FC4848143E4848
147FEA0FF0485A48B7FCB8FCA37E6C15FE283E7BBD33>I<15FF4A7F5C5CA25C5C15DFEC
3F9FA2EC7F1F14FEA2EB01FCA2EB03F8EB07F0A2EB0FE0EB1FC0A2EB3F80A2EB7F0013FE
A2485A12035B485AA2485A485AA2485AA248C7FC12FEB812E017F0A46C16E0C8381F8000
AC021FB512804A14C04A14E0A26E14C06E14802C3E7DBD33>52 D<121FEA3F80EA7FC0EA
FFE0A5EA7FC0EA3F80EA1F00C7FCB3A3121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F
000B2B6CAA33>58 D<EA07C0EA0FE0EA1FF0EA3FF8A5EA1FF0EA0FE0EA07C0C7FCB3A3EA
07C0EA0FE0EA1FF0EA3FF8A213FCA3121F120F12071200A2120113F81203EA07F0120FEA
1FE0127FEAFFC01380130012FC12700E396EAA33>I<1608163E16FF5D15075DED3FFEED
7FFC913801FFF0020713E04A1380023F1300EC7FFC49485A4913E0010F13804990C7FCEB
7FFC495A000313E0485B001F90C8FCEA7FFE13F8485A13C013F06C7E13FEEA1FFF000713
C06C7FC613F86D7EEB1FFF6D7F010313E06D13F86D6C7E6EB4FC020F13806E13E0020113
F09138007FFCED3FFEED0FFF81150181163E160828337BB733>I<007FB71280A2B812C0
A36C16806C1600CBFCA9003FB7FC481680B812C0A36C1680A22A177CA933>I<1210127C
B4FC7F13E07FEA7FFC6C7E380FFF806C13E000017F6C13FCEB3FFE6D6C7E01077F010113
F06D7FEC3FFE6E7E020713C06E13E0020013F8ED7FFE151FED0FFF1503150FED1FFE157F
EDFFF8020313E04A13C0021F13004A5AECFFF8495B010713C0011F5B4948C7FCEBFFFC48
13F000075B481380D83FFEC8FC485AEAFFF05B138090C9FC127C121028337BB733>I<00
3FB712E04816F0B8FCA27E7ED801FCC71207A8EE03E093C7FCA7151F4B7EA490B6FCA690
38FC003FA46FC7FC92C8FCB1383FFFF8487FB57EA26C5B6C5B2C3D7DBC33>70
D<D87FFC90381FFFE0486C4913F07FA36C6D6C13E00003913800FC0013F780A213F380A3
EBF1F0A38013F0A280A2147C147EA2143E143FA2801580A3140F15C0A2140715E0A21403
15F0A21401A215F81400A3157CA3153C153EA2151E151F387FFF80B5EAC00FA315076C49
6C5A2C3D7DBC33>78 D<D87FFF903803FFF8B56C4813FCA46C496C13F8D807F09038003F
806D147F00031600A36D5C00015DA46C6C495AA46D13036D5CA3EC8007013F5CA3ECC00F
011F5CA46D6C485AA46D6C485AA4010391C7FC6E5AA30101137EA2ECFCFEA201005BA5EC
7FF8A46E5AA26E5A6E5A2E3E7EBC33>86 D<007FB612FEA2B8FCA36C15FEA228077B7D33
>95 D<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F6C48806C
48131FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00EA3FF0EA
7FC05B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C14F36C14
C1C69138003FF0D91FF090C7FC2D2E7BAC33>97 D<EA3FFC487E12FFA2127F123F1200AB
EC01FE91380FFFC04A13F0027F7F91B512FE90B7FCECFE07DAF800138002E0EB7FC04AEB
3FE04A131FEE0FF091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E13
0F17E06E131FEE3FC06E137F9139F801FF80DAFE07130091B55A495C6E5BD97E3F13E0D9
3C0F138090260003FEC7FC2E3E7FBC33>I<ECFFF0010713FE011FEBFF804914C04914E0
48B612F048EBC01F9038FE000F485A485A4848EB07E049EB03C0484890C7FC5BA2127F90
C9FCA25A5AA97E7EA27F003FEC01F06DEB03F86C7E6D13076C6C14F06C6C130F01FFEB1F
E06CEBE07F6C90B512C06C1580013F14006D13FC01075B010013C0252E79AC33>I<ED7F
F84B7E5CA280157F1501ABEB01FF010713C1011F13F1017F13F990B6FC5A4813813907FE
003FD80FF8131F49130F48481307491303123F491301127F90C7FCA25A5AA97E7E15037F
123F6D1307A26C6C130F6D131F6C6C133F6C6C137F2603FF81B512F091B612F8C602FD13
FC6D13F96D01E113F8010F018013F0D901FEC8FC2E3E7DBC33>I<ECFF80010713F0011F
13FC497F90B6FC48158048018013C03A07FE003FE001F8EB0FF048481307484814F84913
03003F15FC491301127F90C7FC16FE15005A5AB7FCA516FC48C9FC7E7EA36C7E167C6C6C
14FE7F6C7E6D13016C6CEB03FC6CB4130F6C9038C03FF86C90B512F06D14E06D14C0010F
1400010313FC9038007FE0272E7BAC33>I<ED3FE0913801FFFC020713FE141F4A13FF5C
ECFFC015004948137E4A133C010314005CA8003FB612F84815FCB7FCA36C15F8260003F8
C7FCB3AD003FB612804815C0A46C1580283E7DBD33>I<D901FEEB1FE0903A0FFFC0FFF0
013F01F313F84990B512FC90B7FC5A48010313E12607FC00EB80F849017F136048489038
3FC00049131FA2001F8149130FA66D131F000F5DA26D133F6C6C495A6D13FF2603FF0390
C7FCECFFFE485C5D5DD80FCF13C0D981FEC8FC0180C9FCA27FA26C7E7F90B512FC6CECFF
C06C15F0000715FC4815FF4816809038E0000748489038007FC090C8EA1FE048150F007E
150700FE16F0481503A56C1507007E16E0007F150F6C6CEC1FC001E0147FD81FF8903801
FF80270FFF801F13006C90B55A6C5DC615F0013F14C0010F91C7FC010013F02E447DAB33
>I<EA3FFC487E12FFA2127F123F1200AB4AB4FC020713C0021F13F0027F7F91B5FC90B6
7EED07FEECF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB5
6C4813FFA26C496C13FE6C496C13FC303D7FBC33>I<14E0EB03F8A2497EA36D5AA2EB00
E091C8FCAA383FFFF8487FA47EEA0001B3AD007FB612C0B712E016F0A216E06C15C0243E
78BD33>I<383FFFFC487FB5FCA27E7EC7FCB3B3AD003FB612F84815FCB712FEA26C15FC
6C15F8273D7ABC33>108 D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF
92B57E6C010F13872607FE07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3
A53C7FFE0FFF07FF80B548018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC
0713C0267FFE1F13F000FF017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5C
A291C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC
302C7FAB33>I<EB01FE90380FFFC0013F13F0497F90B57E488048EB03FF2607FC001380
4848EB7FC049133F4848EB1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FC
AA6C14036C15F8A26D1307003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF
802603FF0313006CEBFFFE6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<EC01FE
3A3FFC0FFFC0486C4813F000FF017F7F91B512FE6CB7FC6CEBFE07C6D9F800138002E0EB
7FC04AEB3FE04A131FEE0FF091C7FC16074915F81603A217FC1601A9160317F8A26D1407
17F06E130F17E06E131FEE3FC06E137F9139F801FF80DAFE07130091B55A495C6E5B6E13
E0020F1380DA03FEC7FC91C9FCAF383FFFF8487FB57EA26C5B6C5B2E427FAB33>I<ED03
FE3B7FFF801FFF80B5D8C07F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF091
39FFC007E092388003C092C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7D
AB33>114 D<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE
147F5A153FA37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C68001
1F13FF01001480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14
E06D130F6DEB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7
FC242E79AC33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3
161FEE3F80A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07
FCC7FC29387EB633>I<D83FFCEB1FFE486C497E00FF5CA2007F80003F800000EC007FB3
A75EA25DA26D5B90387F800FDAE03F13FC6DB612FE17FF6D806D01FE13FE01039038F83F
FC010001C0C7FC302C7FAA33>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13
F86C496C13F0D801F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC80
07011F5CA2ECC00F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE
01005BA214FF6E5AA36E5AA26E5A6E5A2E2B7EAA33>I<3B3FFFC07FFF80486DB512C0B5
00F114E0A26C01E014C06C496C13803B00FE000FE000017F495AEB3F804B5A6D6C48C7FC
90380FE07E903807F0FEECF1FC903803FBF8EB01FF6D5B5D6E5A143F6E5A143F814A7E14
FF903801FBF0ECF9F8903803F1FCEB07E0157E90380FC07F011F6D7E90383F801F02007F
496D7E01FE6D7E484813033B7FFFC03FFFE0B56C4813F0A46C496C13E02C2B7DAA33>
120 D<3B7FFF801FFFE0B56C4813F06E4813F8A24A6C13F06C496C13E0D803F8C7EAFC00
000114015E7F000014036D5C137EA2017F495A7FA26E485A131FA26D6C485AA214E00107
49C7FCA214F01303157EEB01F8A2157C010013FC14FC5D147C147DEC3FF0A36E5AA36E5A
A2141F5DA2143F92C8FCA3147EA214FE003F5B1301387F81F81383EB87F0139FEBFFE06C
5B5C6C90C9FCEA0FFCEA03F02D427DAA33>I<ED07FEED7FFF4AB5FC14075C4A13FE9138
3FFE0015E0EC7F8092C7FCB3A45C495A1303EB1FFCEA3FFFB55A14E05C8014F8003F7FEA
001FEB03FE13016D7E80B3A481EC3FE015FE91381FFFFE6E13FF8014016E7EED07FE284D
7BC433>123 D<127CA212FEB3B3B3B3127CA2074D6AC433>I<EA7FF0B5FC14C014F0806C
7F38003FFE1303EB00FF80B3A4816E7E81EC1FFCEDFFFC6E13FF1403805C140F4A13FCED
FC00EC3FE05D4A5A92C7FCB3A45CEB03FE133F387FFFFCB55A5C14C091C8FCEA7FF0284D
7BC433>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmcsc10 12 4
/Ff 4 110 df<DB03FF140C033F01F0131C4AB500FC133C91390FFE007FDA1FF090380F
C07CDA7F80903803E0FC4948C812F0D903FC15794948153FD91FF0151F4948150F494815
074A150349C9FC48481601120349160012074848177CA24848173CA2123FA249171C127F
A319005B12FFAC127F7FA2191CA2123F7FA2001F183C19386C7EA26C6C1778000318706D
17F0000118E06C6C16016D6C16C06E15036D6CED07806D6CED0F00D907F8151E6D6C5D6D
B45D6D6C6C495ADA1FF0EB07C0DA0FFEEB7F800201B500FEC7FCDA003F13F0030313803E
4879C54E>67 D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A
6C7EA34A6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA249
81011CC7121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7E
D81FF84A7EB5027F13F8A335357CB43D>97 D<B512FEA3000390C9FCEA01FCB3A9EE01C0
A416031780A41607A2160F161FA2167FEEFF00486C1307B8FCA32A337BB233>108
D<D8FFFEEE7FFFA26D93B5FC000318C06C1880D9DF80EC01DFA2D9CFC0EC039FA3D9C7E0
EC071FA2D9C3F0140EA3D9C1F8141CA2D9C0FC1438A3027E1470A26E14E0A391391F8001
C0A291390FC00380A3913907E00700A2913803F00EA36E6C5AA26E6C5AA3ED7E70A26F5A
A3486C6D5A487ED81FFC6D48EB3FC0B50080020FB5FCA2ED070040337BB24A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmr12 12 56
/Fg 56 122 df<4AB4FC020F13C091383F00F002FC1338D901F0130C4948131E4948133E
4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D8007EC7FC8282B3
B001FFEC7F80007FD9FC1FB5FCA330467EC536>12 D<EA01FC127FA3120312011200B3B0
487EB512F8A3152C7EAB1B>16 D<127812FCA27E7E6C7E123FEA0FC06C7E6C7E12016C7E
137C7F130E7FEB0380EB0100111275C431>18 D<130FEB1F80A2133F137FEBFF005BEA01
F8485A485A5B485A48C7FC123E12385A5A124011126CC431>I<02FFED7F80010701E090
3803FFE090261F80F8903807C1F890263E003C90381E007C49010F497F496D6C487F4848
6D6C4814804848DAE1E0EB0FC00007EC01E34848DAF3C0EB07E0001FEC00FF4918F0003F
6F5A1903A248C816F870C7FCA25AA294B6FCA294C9FCA67E836D147F123FA2711418001F
15FF7F000F912601F3E014306C6C14E10003912603E0F014606C6C4A6C14C06C6C902607
807CEB0180017C90260F001EEB03006D013C6D130E90261F80F8903807E03C902607FFE0
903801FFF0010090C8EA3FC0452E7DAC4C>27 D<121E123FEA7F80EAFFC0A313E0127FEA
3F60121E1200A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78C41B>39
D<1406140E14181430147014E0EB01C0EB0380EB0700A2130E5B133C133813785BA2485A
A2485AA212075BA2120F90C7FCA25A121EA2123EA3123C127CA6127812F8B21278127CA6
123C123EA3121EA2121F7EA27F1207A27F1203A26C7EA26C7EA213781338133C131C7F7F
A2EB0380EB01C0EB00E0147014301418140E1406176477CA26>I<7E7E12607E12387E7E
7E6C7EA26C7E6C7E7F137013787FA27FA27FA214801307A214C01303A214E01301A214F0
A3130014F8A61478147CB2147814F8A614F01301A314E0A2130314C0A213071480A2130F
1400A2131EA25BA25B137013F05B485A485AA248C7FC120E5A5A12305A5A5A16647ACA26
>I<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A2
12065AA25A5A12200B1D78891B>44 D<B612C0A51A057F9721>I<121E123FEA7F80EAFF
C0A4EA7F80EA3F00121E0A0A78891B>I<143014F013011307131F13FFB5FC13E7130712
00B3B3AF497E497E007FB6FCA3204178C031>49 D<EB03FE90381FFFC0017F13F03901F8
0FFC3903C001FE48C7127F000EEC3F80000CEC1FC04815E048EC0FF0A248EC07F8A2127C
00FE15FC7E6D1303A46CC71207123EC813F8A3ED0FF0A216E0151F16C0153F1680ED7F00
157E5D4A5A5D4A5A4A5A4A5A4AC7FC141E5C5C5C495A495A495A91C7120C130E5B491418
5B5B485A49143848C8123000061570000FB612F05A5A5AB712E0A326417BC031>I<49B4
FC010F13F0013F13FC9038FE01FE3901E0007FD80380EB3F8048C7EA1FC0000EEC0FE0D8
0F8014F0EA1FE016F86D1307A36C5AA2D80380130FC813F0A3ED1FE016C0A2ED3F801600
157E5DEC03F0EC1FC0D90FFFC7FC15F090380001FCEC007EED1F8016C0ED0FE0ED07F016
F8150316FC16FE1501A216FFA3121E123F487E487EA216FEA24913036CC713FC127E0070
EC07F8003015F06C140F000E15E06CEC1FC0D803E0EB7F803A01FC01FE0039007FFFFC01
1F13E0010190C7FC28427CC031>I<1507A25D5DA25D5DA25DA25C5C811406140E140C14
1814381430146014E014C01301EB038014005B13065B131C13185B137013605B12015B48
C7FC5A1206120E120C5A123812305A12E0B812C0A3C86CC7FCAC4B7E4A7F91B61280A32A
427DC131>I<000215C0D807C0130701FCEB7F8090B612005D5D15F05D158026063FFCC7
FC90C9FCAE14FF010713E090381F01F0903878007C01E07FD807807F90C71380ED0FC012
02C8EA07E016F0A3ED03F8A316FCA4121C123E127F487EA216F890C7FC4814074815F012
60A26CEC0FE016C06C141F001C15806CEC3F006C147E3903C001FC3901F807F039007FFF
E06D1380D907FCC7FC26427BC031>I<EC07F8EC3FFF91B51280903903FC03C0903907E0
00E0D90F80133090391F0001F0013EEB03F84913075B1201485A49EB03F00007EC01E000
0F91C7FC5B121FA25B123FA3127F90C9FCEC7F80903801FFF039FF0780FC90380E003E01
18130F49EB078016C049EB03E04914F0ED01F8A24914FC150016FEA290C8FC16FFA27EA6
6C7EA216FE121FA2ED01FC6C7E16F8000714036C6C14F06DEB07E0000115C06C6CEB0F80
017EEB3F0090383F80FE90380FFFF86D5B0100138028427CC031>I<121CA2EA1F8090B7
12C0A34816801700A25E0038C8120C00305D127000605D5EA25E484A5A4BC7FCA2C81206
5DA25D5D5DA25D14015D1403A24AC8FCA25C140E141EA2143E143CA2147CA214FCA31301
5CA31303A61307AA6D5A6D5A2A447BC231>I<14FF010713E0011F13F890383F00FE0178
131F01E0EB0F804848EB03C04848EB01E048C7FCED00F0120E1678121EA4121FA26D14F0
7FD80FF0EB01E07FD807FEEB03C06DEB07806C9038C00F006CEBE01E6CEBF83890387FFE
F090383FFFC0130F6D7F010113F801077F90381E3FFFD9781F1380D9F00713C02601C003
13E04848C613F048C7EA7FF8000E141F001EEC0FFC48EC03FE150148EC007E163FA24815
1FA2160FA4160E1278161E161C6C15186C1538001F15706C6C14E06C6CEB03C0D803F0EB
0F80C6B4EB7F0090383FFFFC010F13F00101138028427CC031>I<14FF010713E0011F13
F890387F80FC9038FC003E48487F4848EB0F804848EB07C0484814E01503484814F0123F
ED01F848C7FCA216FC5AA2ED00FEA516FFA37E5DA27E7F001F5CA26C7E000714066C6C5B
12016C6C5B017C137090383F01E090390FFF80FE903801FE0090C8FCA2ED01FCA416F815
0316F0A2D80780EB07E0487E486CEB0FC01680151F160049133E6C485B390C0001F80007
495A3903E01FC06CB55A6C6C48C7FCEB1FF028427CC031>I<121E123FEA7F80EAFFC0A4
EA7F80EA3F00121EC7FCB3A5121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A2B78AA1B
>I<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA2ED39FF1530A203707FED607FA203C07F
163FA2DA01807F161FA24A486C7EA302066D7EA2020E80020C1303A2021C8002181301A2
4A8082A24A81177FA291B77EA3D90180C7EA1FE0A201038291C8120FA2498201061507A2
010E82010C1503A249821701A2498283137801F883487ED80FFF030313E0B500E0027FEB
FFC0A342467DC549>65 D<B8FC17F017FC00019039C00007FF6C499038007FC0017FED1F
E0EF07F0EF03FC717E717E84727E727E727EA2727E85180385A2180185A38584A31A80AD
1A00A36061A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5AEF1FE001FF
ED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B>68 D<B912F8A3000101C0C712
7F6C49EC07FC017F15011700187C183C181CA284A31806A41807040C7FA395C7FCA4161C
A2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA319C0A3F0018093C7FCA4
1803A21900A260A260A2181EA2183E187EEF01FE01FF1507486D147FB95AA33A447CC342
>I<DB0FFE146092B512C0020302F013E0913A1FFC01FC0191393FC0001E02FFC7EA0703
D901FCEC0387D907F0EC00C74948156F4948153F4948151F49C9120F13FE000117075B48
4816031207491601120F491600121FA2123F491760A2127FA296C7FC5B12FFAC007F4BB6
12C07FA293C7387FF000003F715A181F7F121FA26C7EA212077F12036C7E7F1200137F6D
7E6D6C153F6D7ED907F81567D901FC15C76DB4EC0383DA3FE0EB0F01DA1FFC137E0203B5
EAF800020002E01360DB0FFEC9FC42467BC44D>71 D<B56C020FB5FC80A2C66C6C020013
F06EED1F80016FEE0F00EB67F86E15061363EB61FE8013606E7E81143F6E7E81140F6E7E
8114036E7E81806F7E82153F6F7E82150F6F7E8215036F7E8281EE7F8017C0163FEE1FE0
17F0160FEE07F817FC1603EE01FE17FF82EF7F8618C6173FEF1FE618F6170FEF07FEA217
031701A21700187E13F0183E486C161EEA0FFFB500F0150E1806A240447CC349>78
D<ED1FFC4AB512C091390FF007F891393F8000FE027EC7123FD901F8EC0FC049486E7ED9
0FE0EC03F849486E7E49486E7E49C9127F01FE707E49161F0001844848707EA24848707E
000F84491603001F84A2491601003F84A3007F844982A300FF1980AC007F19006D5EA400
3F606D1603A2001F606D1607000F60A26C6C4C5AA26C6C4C5A0001606C6C4C5A6D167F6D
94C7FC6D6C15FE6D6C4A5A6D6C4A5AD903F0EC07E0D901FCEC1FC0D9007E4AC8FC6E6C13
FE91390FF007F80201B512C09126001FFCC9FC41467BC44C>I<B712FCEEFFC017F80001
9039C0000FFE6C49EB01FF017F9138007F80EF1FE0170FEF07F018F8EF03FCA218FE1701
A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B6
12F017800280C9FCB3A9497E487FB612C0A338447CC342>I<B712E016FF17C000019039
C0003FF86C49EB03FC017FEC00FF717E717E717E717E717EA284170384A760A21707604D
5AA24D5A4D5A4DC8FCEE01FEEE07F8EE3FE091B6C9FC16FC913980007F80EE0FE0707EEE
01F883707E177FA284173F84A784A61A6084171FA2050F14C0496C6E7E486D0203EB0180
B600C0903901FC0300716C5AF03FFCCBEA07F843457CC348>82 D<49B41303010F13E001
3FEBF8079038FE00FCD801F0EB1F0F4848EB079F4848EB01DF48486DB4FC48C87E001E81
123E007E81127C8212FC82A46C81A37E6C6C91C7FCA2EA3FE07FEA1FFEEBFFE06C13FE6C
EBFFE06C14FC6C14FF6C15C0013F80010F80010180D9001F7F02017F9138001FFF150303
001380167FEE3FC0161FA2EE0FE0124012C01607A47EA217C07E160F6C1680A26CED1F00
6C151E6C153ED8FBC05CD8F9F05CD8F07CEB03F03AE03FC00FE0010FB51280D8C00349C7
FC9038003FF02B467BC436>I<003FB912E0A3903BF0003FF0007F01806D48130F003EC7
150348EF01F00078170019701270A219301260A5481818A5C81600B3B3A54B7EEDFFFC01
03B7FCA33D447CC346>I<B600C0010FB5FCA3000101E0C813F06C49ED1F806D48ED0F00
A21806B3B3A7013F5EA280131F6080010F5E13076E5D010316E06D6C4A5A6D6C4A5A027E
4AC7FC6E6C131EDA1FE0137C913907F803F00201B55A6E6C1380DB07FCC8FC40457CC349
>I<130C131E133F497EEBF3C03801E1E03803C0F03807807848487E001E7F487F0070EB
038048EB01C00040EB00801A0E75C331>94 D<EB07F8EB3FFF9038F80FC03901C003E048
C66C7E00066D7E48147CD80F80137E486C133E6D133F8182A26C5A6C5AC8FCA4EC0FFF49
B5FC90380FFC1FEB3FC0EBFF00EA03FCEA07F0485A121F485A5B127F176048C7FCA4153F
A26C146F7F003F9138C7C0C0391FC001873B0FE00307E1803A07F81E03FF2701FFFC0113
003A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120312011200B3EC01FC91380FFF80
91383E07E091387000F802C0137CD9FD807F01FFC77EEE0F804915C049EC07E017F01603
17F8A217FC1601A317FEA917FCA21603A217F8A2EE07F017E07FEE0FC001FBEC1F801700
D9F180133ED9F0C05B9039E06001F891383C07E09039C01FFF8090260003FCC7FC2F467D
C436>I<EC7F80903803FFF090380FC07C90383E000E49130349EB01804848EB00C00003
14074848EB0FE04848131FA2121F5B003FEC0FC0ED0780007F91C7FC90C9FCA25AAA7EA2
7FA2123F16306C7EA2000F15606C7E6C6C14C00001EC01806C7E017CEB07006D130E9038
1FC078903807FFF001001380242E7DAC2B>I<16FE157FA315011500167EB3EC7F809038
03FFF090380FC07890383F000C017C13064913034848EB01FE00031400485A4848147EA2
121F485AA2127FA290C8FCA25AA97EA37F123FA2121F7F000F15FE6C7E000314016C6CEB
037E6C6C147F017C010E13806D011C13FE90380FC0F0903803FFE09026007F0013002F46
7DC436>I<EB01FE903807FFC090381F03F090387C00F849137C48487F48487F00071580
49130F000F15C0121F4914E0003F1407A2127F90C713F0A35AA290B6FCA290C9FCA67EA3
6C7EA21630121F7F000F15606C7E000315C06C6CEB01806C6CEB0300017C13066D131C90
380FC078903803FFE09038007F80242E7DAC2B>I<EC1FC0EC7FF0ECF038903803E07C90
3807C0FC90380F81FEA2EB1F0190383F00FCA2013E1330017E1300B0B61280A3D8007EC7
FCB3B1137F497E007FEBFF80A31F467EC51E>I<D901FCEB1FC0903A0FFF807FE0903A3F
07E1E1F090397C01F7819039F800FE01484890387C00E048486D13000007143FA248486D
7EA2001F81A7000F5DA26C6C49C7FCA20003143E6C6C5B6C6C5B486C485A39033F07E090
380FFF80260701FCC8FC0006CAFCA3120E120F7EA27F13E06CB512F86CECFF806C15E06D
14F848B67E3A07E0000FFED80F80EB00FF001EC8123F003EED1F8048150F17C0481507A6
007CED0F80A26CED1F006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261F
FFFEC7FC010113E02C417DAB31>I<EA01FC12FFA3120312011200B3EC01FE913807FF80
91381E07E091383801F002607FECC000D9FD807F167C01FFC7FC167E5BA35BB3A9486C14
FFB5D8FC7F13FEA32F457DC436>I<13E0EA03F8487EA66C5AEA00E090C7FCADEA01FC12
7FA3120312011200B3B0487EB512F8A315437EC21B>I<14F0EB01F8EB03FCEB07FEA4EB
03FCEB01F8EB00F01400AD14FE137FA313011300147EB3B3AB003C137C127EB413FC14F8
A238FE01F0007E13E0383803C0381E0780380FFF00EA01FC175783C21E>I<EA01FC12FF
A3120312011200B3B3B3A5487EB512FCA316457EC41B>108 D<2701FC01FEEC7F8000FF
903B07FFC001FFF0913B0E03F00380FC913B3800F80E003E0003495C000101C0D97C307F
0000037E81D9FD805C01FFC7D83EC0130F043F81495DA34992C7FCB3A9486C4A6C497EB5
D8FC3FB5000FB512C0A34A2C7DAB51>I<3901FC01FE00FF903807FF8091381E07E09138
3801F0000301607F0001EBC0002600FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5
D8FC7F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F496D7E496D
7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E481680A44816C0
AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C495A6C6C49
5A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<3901FC01
FC00FF90380FFF8091383E07E091387001F800039038C0007C2601FD807F6CB4C7123FEE
1F8049EC0FC04915E0EE07F0A217F8160317FCA3160117FEA917FC1603A317F8160717F0
EE0FE07FEE1FC06D1580EE3F00D9FD80137ED9FCC05B91386001F891383C0FE091381FFF
80DA03FCC7FC91C9FCAE487EB512FCA32F3F7DAB36>I<91387F8006903903FFE00E9038
0FE07890383F001C017EEB061E5B4848EB033E4848EB01BE12074848EB00FEA2485A003F
157E5B127FA390C8FC5AA97E7FA3123F7F121F16FE6C7E000714016C7E6C6CEB037E0000
1406017C130C013F131890380FC0F0903803FFE09038007F0091C7FCAE16FF037F13FEA3
2F3F7DAB33>I<3901F807E000FFEB1FF8EC383CEC607E0003EBC0FF12013800F980EBFB
00157E153C01FE1300A45BB3A77F487EB6FCA3202C7DAB26>I<90383FE0303801FFF839
07C01E70390F0007F0001C1301481300A2481470A212F01530A37E7E007E1400EA7F80EA
3FF0EBFF806C13F86C13FE0003EBFF806C14C0D8003F13E0010313F09038001FF81403EC
00FC0040147C00C0147E153E7E151EA37E151C7E153C6C14386C147000FB14E039F18001
C039E0F00F8039C07FFE00EB0FF01F2E7DAC26>I<1306A5130EA4131EA3133E137EA213
FE12011207001FB512F0B6FCA2D8007EC7FCB3A4150CAA133E013F1318A27F90380F8030
01071360903803E0C0903801FF809038003F001E3E7EBC26>I<D801FC14FE00FF147FA3
00031401000114000000157EB3A916FEA3017C1301A2017EEB037E013E147F011E010613
806D011C13FE903807C078903803FFE09026007F8013002F2D7DAB36>I<B539E001FFFC
A3D807FEC7EA7FE0D801FCEC1F8017000000150E160CA2017E5CA2017F14386D1430A26D
6C5BA26E13E0010F5CA26D6C485AA36D6C48C7FCA26E5A01011306A26D6C5AA2ECFE1CEC
7E18A26E5AA3EC1FE0A36E5AA26E5AA36EC8FC2E2C7EAA33>I<3B7FFFF007FFFCA30001
D9800113C06C90C7EAFE006D147C6D14706D6C5B6D6C5BECE0010107495AD903F090C7FC
ECF806903801FC0E01005BEC7E18EC7F30EC3F706E5A6E5A811407814A7EEC0DFC1418EC
387E4A7E02607FECC01F01016D7ED903807F4A6C7E01061303496D7E011C80013C130001
7C147ED801FC14FFD80FFE4913C0B5D8800713FFA3302B7FAA33>120
D<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160C6D141C017E1418
A26D5CA26E1370011F1460A26D6C5BA2800107495AA2ECF003010391C7FCA2903801F806
A2ECFC0E0100130CA2EC7E18A2EC7F38EC3F30A2EC1FE0A36E5AA26E5AA36EC8FCA21406
A35CA2141C1418A200385B127C00FE5BA25C1301387C0380D87007C9FCEA3C1EEA1FFCEA
03F02E3F7EAA33>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmbx12 17.28 23
/Fh 23 119 df<140CEC7F80ECFFC04913E04913F015F85B5B4913FC5BA24913F890B5FC
4814F015E04814C0481400485B4813F814E04813804848C7FC485A13F013C06CC8FC123C
12181E1C5EE551>19 D<16F04B7E1507151F153FEC01FF1407147F011FB5FCB7FCA41487
EBE007C7FCB3B3B3B2007FB91280A6395D74DC51>49 D<913801FFF8021FEBFFC091B612
F8010315FF010F16C0013F16F09026FFF80180489026C0003F13FE4890C7000F7FD807FC
0203148048486E14C048486E14E04981D83FF86F13F001FE6F13F8487E6E6E13FC80B56F
13FE80A319FF83A26C5BA26C5BA26C90C8FCEA07FCD800E04B13FE90C9FCA219FC5FA219
F85F19F04D13E0A24D13C0198094B512004C5B604C5B4C5B4C5B604C90C7FC4C5A4C5A4C
5A4B13E04B5B4B5B4CC8FC4B5A4B5AED3FE04B48143F4B5A4A90C8FC4A5ADA07F8157E4A
5A4A5A4A5A4A5A02FEC912FE495A495A4948ED01FC4948150749B8FC5B5B90B9FC5A4818
F85A5A5A5A5AA2BAFC19F0A4405D78DC51>I<ED7FFE0207B512F8023F14FF49B712C049
16F0010FD9800F13FC90271FF800037FD97FE001007FD9FF806E7F49C86C7F486C834801
C06E7F80486D826E80804884A3805CA27EA24A4A5B6C5B6C5B6C6C485E011EC85A90C95C
A24D5B6194B5FC96C7FC4C5B4C13F84C5B4C5B043F1380922607FFFEC8FC020FB512F817
E094C9FC17F817FF91C7001F13E0040313F8040013FE717E7113C0717F85717F858385A2
85831A80A31AC0EA03FCEA0FFF487F487FA2487FA2B57E1A80A34D1400A25C6C604A5C6C
6091C8485B6C5A01F04B5BD80FFC4B5B6CB492B55A6C01E0010391C7FC6C01FF011F5B6C
6C90B65A011F16F0010716C001014BC8FCD9001F14F0020049C9FC425E79DC51>I<F00F
E04E7EA24E7EA34E7EA24E7EA24D7FA34D80A24D80A34D80A24D80A34D80A2DD7FBF7FA2
181F05FF8017FE04016D7FA24D7E04038217F804076D80A24D7E040F8217E0041F6D805F
85043F825F047F6E7F94C7FC854C824C800301835E850303844C800307845E030F6F80A2
4C80031F845E033F707FA24C814BB97EA292BA7EA34A8503FCC9120F02037180A24B8202
07865D020F7180A24B82021F865D023F727FA24B83027F8692CBFC4A727F5C87010187A2
90261FFFE07180B700E092B812FEA66F637BE27A>65 D<94381FFFE00407B67E047F15F8
0303B8FC030F17C0033F9026F8007F13F092B50080010713FC020349C7000113FF020F01
F86E6C13C04A01E0031F7F4A496F7F91B5C9000313FC4949707F4949707F4949717F4949
717F49874B834949717F498790B548717FA24891CB6C7FA24849727FA2481D804A84481D
C0A2481DE04A85A2481DF0A448497313F8A6B51CFCAF6C1DF8A26E61A46C1DF0A36E96B5
FC6C1DE0A26C1DC06E60A26C1D806E606C1D006F5F6C646F5F6C646D6D4D5B6D636F5F6D
6D4D5B6D6D94B55A6D6D4C5C6D6D4C91C7FC6D6E4B5B6D6E4B5B6E6D4B5B021F01F8037F
13E06E01FE4AB55A0203D9FFC0010F91C8FC6E02FC90B55A6E6C90B712F8030F17C00303
94C9FCDB007F15F804071580DC001F01E0CAFC666477E279>79 D<BA12F8F1FFE01AFEF2
FFC01BF01BFED800010280C76C7F070714C0070080083F13F8080F7F747F747F89868974
80A3757FA389A865A398B55AA26562655091C9FC64505B081F5B505B97B55A0707148007
7F49CAFC93B812F81BC050CBFCA2747E932680000314E0DE007F13F8071F7F07077F737F
7380738088747FA2747FA3747FA988A91F0F76EC1F80A286A277133F741700748067746E
13FEB96E6E485A093F9038FE07F87590B55A09075D09015DE1003F5CD001FCC7FC71637A
E178>82 D<91381FFFFC0103B612E0011F15FC017F15FF90B812C0489026F0003F13F048
03077F6E01017F707F486D6E7E8583717FA26C4982836C4982A238007FC0011FC8FC90C9
FCA7047FB5FC033FB6FC0203B7FC143F49B5EAF00F0107EBFE00011F13F0017F13C048B5
C7FC4813FC485B485B485B5C5A485BA291C8FCB5FCA45FA25F6C6D143B177B6C6D14F36E
EB01E36C6D0107806C6DD90FC313FF6C01FFD9FF8114FE00019126FFFE0114FF6C6C4A7E
011F02F07F010302C0131F9026003FFCC7000313FE48407BBF4E>97
D<903807FF80B6FCA6C6FC7F7FB3A9EFFFF8040FEBFF80047F14F00381B612FC038715FF
92278FFE007F13C0DBBFE0010F7FDBFF8001037F93C76C13FC03FC6E7F4B6F7E4B814B6F
13804B17C0851BE0851BF0A21BF8A2851BFCA41BFEAC1BFCA44F13F8A31BF0A24F13E0A2
1BC04F13806F5D6F17006F4B5A6F4B5A4A6C02035B9126FC7F80495BDB3FE0011F13C091
27F80FFC01B55A4A6CB648C7FCDAE00115F84A6C6C14E04A011F91C8FC91C7000113E04F
647BE35A>I<92380FFFFC4AB612E0020F15FC023F15FF91B8128001039026FE000713C0
4901F015E0011F01C05B4990C7FC49484A13F0495A485B5A5C487013E0485B7113C0485B
0501130048EE007C95C7FCA2485BA4B5FCAC7EA280A27EA36C7F19FC7E806CEF01F86C7F
6EED03F06C6D15076CEF0FE06D6C6CEC1FC06D6DEC3F806D6DEC7F00010701FCEB01FE6D
9039FF801FFC010091B55A023F15E0020F1580020102FCC7FCDA000F13C03E407BBF48>
I<F17FF8050FB5FCA6EF000F8484B3A9ED0FFF4AB512F0020F14FE023FECFF8391B712E3
01039138007FF34901F0EB07FB011F01C00101B5FC49497F4948C8123F49488148498148
835C485B5AA2485BA25AA3485BA4B5FCAC7EA47E80A27EA27E807E6E5D6C5F6C6D5D6C6D
5D6E92B5FC6D6C5C011F6D0107806D01E0D91FF77F6D01FCD9FFE7EBFFFE010190B61287
6D6CECFE07021F14F8020314C09139001FFE004F647BE35A>I<92381FFFC04AB512FE02
0F6E7E027F15F091B77E0103D9FE0113FE010F9039F0003FFF4901C0010F7F4990C76C7F
494802017F49488248498048496F7E85485B48717EA24849151F855AA34849811A80A3B5
FCA291B9FCA31A000280CBFCA67EA3807EA36C7F190F6CF01F806C7F193F6C6D17006C60
6C6D16FE6D6C4B5A6D6C4B5A6D01C0EC0FF06D01F0EC3FE06D01FCECFFC001019026FFC0
0F5B6D91B6C7FC023F15FC020715F002001580030701F0C8FC41407CBF4A>I<903807FF
80B6FCA6C6FC7F7FB3A9EF0FFF94B512F0040314FC040F14FF043F8193267FC03F7F9326
FE000F7FDB81F86D7FED83E0DB87C06D7FED8F8093C780039E8015BC03B88215F85DA25D
A45DB3B2B7D8F007B71280A651647BE35A>104 D<EB0FE0EB3FF8497E497E487F4880A2
4880A76C5CA26C91C7FC6C5B6D5A6D5AEB0FE090C9FCB0903807FF80007FB5FCA6C6FC7F
7FB3B3ADB712C0A622657BE42C>I<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB712E0A6
23647BE32C>108 D<902607FF80EB0FFFB691B512F0040314FC040F14FF043F8193267F
C03F7F9326FE000F7FC6DA81F86D7F6DEB83E06DD987C06D7FED8F8093C780039E8015BC
03B88215F85DA25DA45DB3B2B7D8F007B71280A651407BBF5A>110
D<923807FFE092B6FC020715E0023F15FC91B8FC010349C66C13C04901F0010F7F011F01
80010113F84990C87F49486F7E49486F7E48496F138048496F13C04A814819E04819F04A
814819F8A24819FC4A81A24819FEA4B518FFAC6C19FEA46C6D4B13FCA36C19F8A26C6D4B
13F0A26C19E06E5D6C19C06C6D4B13806C6D4B13006D6C4B5A6D6C4B5A6D01C001035B6D
01F0010F5B010301FE017F13C0010090B7C7FC023F15FC020F15F0020092C8FC030713E0
48407CBF51>I<902607FF80EBFFF8B6010FEBFF80047F14F00381B612FC038715FF9226
8FFE0014C0DBBFE0011F7FC6DAFF806D7F6D91C7000313FC6D01FC6E7F4B6E7F4B814B17
804B6F13C0851BE0A27313F0A21BF885A21BFCA285A21BFEAC1BFC61A31BF8A2611BF0A2
4F13E0A24F13C01B806F5D6F92B512006F4A5B6F4A5B6F4A5B6F6C495B04E0013F13C092
26CFFC01B55A03C7B648C7FC03C115F8DBC07F14E0041F91C8FC040113E093CBFCB3A4B7
12F0A64F5C7BBF5A>I<D90FFFEB07F8B6EB3FFF4C13C04BB512F04B14F8923907F87FFC
ED0FE0C6923880FFFE6D495A6DD91E0113FF153CA21578A24B6C13FEA24BEB7FFCA2EF1F
F04BEB07C094C7FCA45DB3B0B712F8A638407BBF42>114 D<913A3FFF8007800103B5EA
F80F011FECFE3F017F91B5FC48B8FC48EBE0004848C7120FD80FF814034848804980003F
167F49153F127FA200FF161FA27FA213F86D92C7FC13FF14F06CEBFF8015FEEDFFE06C15
FCEEFF806C16E06C826C16FC6C826C826C6C1680131F010716C0010116E0EB001F020015
F01503ED003F040713F8007C150100FC81177F6C163FA2171F7E18F07FA26D16E06D153F
7F6DED7FC06DEDFF8001FF5C02C00107130002F8EB7FFE019FB612F8010F15E0D8FC0315
8048C66C49C7FC48010713C035407BBF40>I<EC07E0A6140FA5141FA3143FA2147FA214
FF5BA25B5B5B5B137F48B5FC000F91B512FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC6DED
1F80A2816DED3F00816D157E6D6D5B6DEBFF036EEBFFF86E5C020F14C0020191C7FC9138
001FFC325B7DDA3F>I<902607FFC0ED3FFEB60207B5FCA6C6EE00076D826D82B3B360A3
60A26D5E181E181C6D163C6F14F86D4B487F6D01F8D907E08003FED93FC0ECFF80010090
B65A6E5D021F14FC020314F0DA003F138051407BBF5A>I<B700C00103B512FCA6D8003F
01C0C8381FFE006FED07F06D606F150FA26D6D4B5AA26D6D5E193F6D6D93C7FC616D177E
6F15FE6D5F701301A26E6D5C18036E6D5C18076E6D5C180F6E5E70131F6E5E70133FA26E
6D91C8FC606E6D137E18FE6E6E5A17816F5C17C36F5C17E7A26FEBF7E017FF6F5CA26F5C
A26F91C9FCA36F5BA26F5BA2705AA2705AA2705AA2705A4E407DBF55>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmcsc10 20.74 4
/Fi 4 110 df<952601FFF81638067FD9FFC015780507B600F815F8053F15FE4CB86C13
010407DAC00101E01303041F01F8C7EA1FF8047F0180DA03FE13074B4848C96C130F0307
01F093383F801F4B01C0EE0FE0033F49933807F03F4B48CA3803F87F4A4848EF00FC4A49
F07EFF4A01E0844A49844A49844A90CC7E4A5A4A48854949854987495B4B1A7F495B491C
3F49491A1FA24990CE120FA2495A481D075C5A1E03485BA21E015A5C5AA21E00485BA448
1E00A35CA2B5FCB07EA280A37EA21F78A26C7FA37E807E1FF0A26C7FA26C1D016E1CE07E
6D7EF603C06D7FF607806D7F6D6DF20F007F6F1A1E6D6D1A3E6D1C3C6D6D1A7C6E6C626E
6C4F5A6E6D4E5A6E6D18076E6D4E5A6E01F84E5A6E6D4EC7FC6E6C6C18FE6F6C6C4C5A03
0F01E0EE07F06F6D4C5A030101FEEE3FC06F6C6C6C4AB4C8FC041F01F8EC0FFC0407903A
FFC001FFF8040191B612E0DC003F93C9FC050715FCDD007F14C0060101F8CAFC6D7A74F7
87>67 D<17074D7E4D7EA34D7EA24D7EA34D7EA24C7FA34C7F17DF04077F178FA2040F80
1707041F80EE1E03A2043E80EE3C01047C80EE7800A204F8804C137FA24B486D7EA20303
814C131FA24B488084030F8293C77EA2031E8284033E82033C80A24B828403F8824B157F
A20201834B153F0203834B151F92B8FC4A83A24A8492C91207A24A84021E82023E84023C
82A2027C8402788202F8844A177FA20101854A173F1303747E130787010F84011F86133F
496C8501FF6000036D4D13F0000F01FE94B512FCB600C0031FECFFF8A45D5A7AD96A>97
D<B8FCA4C602F8CAFC013F13C06D5B7F92CBFCB3B3AB1A0FA51A1EA61A3EA41A7E1A7C1A
FCA21901A219031907190F191F197F49EE01FF496D020713F890B56C91B5FCBBFCA44858
78D758>108 D<B64FB6FC6F60A3C66E4E1400013F1CFC6D6C6C4E6C5A010F646E6C181E
A36E6C183CA26E6C1878A36E6C18F0A26E6CEF01E0A26E6DEE03C0A36E6DEE0780A26F6C
EE0F00A36F6C161EA26F6C5EA36F6C5EA26F6C5EA26F6C4B5AA36F6D4A5AA26F6D4A5AA3
706C4AC7FCA2706C141EA2706C5CA3706C5CA2706C5CA3706C495AA2706D485AA2706D48
5AA3716C48C8FCA294383FF01EA3716C5AA2716C5AA3716C5AA2496C6E6C5AA2715B497E
497E496C6E494B7E486D4F7F000F01FF6FC8000713FFB600F00507B7FCA2183E181C7058
78D781>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr17 20.74 9
/Fj 9 116 df<150E151E153E157E15FE14031407141F14FF130790B5FCB6FC14E71407
13F81300C7FCB3B3B3B3B24A7E4A7F49B512F8007FB812E0A5337272F14F>49
D<EA0780EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0780C7FCB3B3AAEA07
80EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA07800E4A72C92B>58
D<F007804E7EA34E7EA34E7EA34E7EA34E7EA24D7FA34D7F18DF18CF0507801887A2050F
801803A2051F80EF1E01A2053E80EF3C00A24D80197FA24D80193F0401815F191F040381
5F850407824D7FA2040F8294C77EA24C82041E80A2043E82043C80A24C821A7FA24C821A
3F0301835E1A1F0303835E860307844C81A2030F8493C97EA24B84031E82A2033FB97EA3
4B84A20378CA127F4B841B3F0201855D1B1F0203855D870207864B83A2020F8692CB7EA2
4A86021E84A2023E86023C84A24A861C7FA24A861C3F010187A201031A1F891307010F86
496C4F7F496C87D9FFFE4F7F00076D6C4DB512F8B600F8057FECFFFCA56E7A7CF977>65
D<BA12F0F1FF801AF01AFCF2FF80D8003F01F0C86C7F010749030713F04B030013FC6DF0
3FFEF20FFF747F08017F747F757E88757E1B1F881B0F88A2751380A21DC0A287A21DE0AA
1DC0A263A21D80A2511300A2641B1F64515A515A1BFF6408035B5090C7FC505AF23FFCF2
FFF007075B077F138092B848C8FC1AF01A8007F0C9FC03C0CDFCB3B3AB497FA2013F13FC
B8FCA55B7678F56C>80 D<001FBE12F8A502F8C7000F01F0C7121F4801806E49020113FC
01FCC86C49EC003F491B1F01E01B07491B03491B0190C91800A2003E1D7CA2003C1D3CA3
481D1EA500701D0EA8481D07A6CA1900B3B3B3B14D7F4D7F057F13FE031FB812F8A56875
7BF473>84 D<14F8EA03FFB5FCA5C6FC133F131FA2130FB3B04CB47E041F13F8047F13FE
923A01FC01FF80923A07E0003FE0031FC7EA0FF0033EEC07FC0378EC01FE4B6E7EDAF9E0
6F7EDAFBC06F7EDAFF808292C96C7E737E5C4A707E864A160386851B80A37313C0A31BE0
A31A7FA21BF0AE1BE0A21AFFA31BC0A2611B80A21B0061626E1607626E160F626E4C5A02
F75FDAE7804B5ADAE3C0157FDAC1E04B5ADAC0F04A48C7FC03784A5A4A6CEC0FF8031F4A
5A4A6C6CEB7FC0922703F803FFC8FC0300B512FC010E023F13E090C8D807FEC9FC4C797B
F758>98 D<ED1FFC4AB512C0020714F091391FF00FFC91397F8001FFD901FEC7EA7FC049
486E7E49486E7E49486E7E49486E7E49486E7E4948140101FF824890C91380A24848EE7F
C0A2485A000FEF3FE05BA2001F18F0181F485AA3007F18F8A349160FA212FF90B9FCA301
E0CBFCAB127F7FA3123FA36C7EA219386C7E1978000718707F000318F06C6C17E018016C
6DED03C06D6C1680013F16076D6CED0F006D6C151E6D6C5D6D6C5D6DB44A5A6D6C6C495A
DA3FE0EB1F80DA0FFE01FEC7FC0203B512F8DA007F13E0DB07FEC8FC3D4D7BCB46>101
D<D903E0EB1FE0D80FFFECFFFCB501037F923907E01F8092391F807FC092383E00FF4B48
13E000011478D8007F13F090383FE1E015C0EB1FE39126E7800013C0EF7F8092C7EA3F00
02EF91C7FC14EE14FE5CA45CA55CB3B3A480133F90B5FCB712C0A5334B7ACA3D>114
D<DA1FFFEB038049B512E0010FECF807903A3FE001FE0F01FEC7EA1F9FD801F8EC07DFD8
07E0EC03FF484880498048C9127F48163F003E161F127E170F127C12FC1707A46C1603A2
7E7F6C7E7F6D92C7FCEA3FFC13FF6C13E06C13FF6C14F06CECFF806C15F86C15FE013F6E
7E010F15E0010381010081020F14FEDA007F7F1503DB003F1380040713C0040113E000E0
81177FEF3FF06C161F170FEF07F8A217037E1701A27EA37E18F07E17036D16E0A26D1507
6DED0FC06D168000FE161F017CED3F00486C157E6DEC01F826F80FC0EB07F026F003F8EB
7FC00100B6C7FC48013F13FC02071380354D7CCB3E>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop 1190 809 a Fj(TP1)53 b Fi(Caml)e Fj(:)70 b(Arbres)0
1546 y Fh(1)161 b(Op)l(\023)-77 b(erations)53 b(de)h(base)f(sur)g(les)h
(arbres)f(binaires)0 1765 y Fg(On)33 b(consid)m(\022)-46
b(ere)34 b(des)f(arbres)h(binaires)f(d)m(\023)-46 b(ecrits)34
b(par)f(le)f(t)m(yp)s(e)i Ff(Caml)f Fg(suiv)-5 b(an)m(t)34
b(:)103 1968 y Fe(type)52 b(\('f,'n\))h(arbre)g(=)205
2089 y(Feuille)g(of)f('f)103 2209 y(|)f(Noeud)i(of)e('n)h(*)g
(\('f,'n\))h(arbre)g(*)e(\('f,'n\))i(arbre)g(;;)0 2413
y Fd(1.)44 b Fg(Ecrire)33 b(une)g(fonction)g Fe(hauteur)h
Fg(qui)g(calcule)f(la)g(hauteur)g(d'un)g(arbre.)0 2583
y Fd(2.)44 b Fg(Ecrire)33 b(une)g(fonction)g Fe(nombre)p
1292 2583 31 4 v 39 w(feuille)h Fg(qui)f(calcule)h(le)f(nom)m(bre)g(de)
h(feuilles)g(d'un)f(arbre.)0 2753 y Fd(3.)44 b Fg(Ecrire)33
b(une)g(fonction)g Fe(nombre)p 1292 2753 V 39 w(noeud)g
Fg(qui)h(calcule)f(le)g(nom)m(bre)h(de)f(n\033uds)g(d'un)h(arbre.)0
2923 y Fd(4.)44 b Fg(Ecrire)33 b(une)g(fonction)g Fe(miroir)h
Fg(qui)f(calcule)h(l'image)f(miroir)g(d'un)g(arbre.)0
3306 y Fh(2)161 b(Arbres)53 b(binaires)h(de)f(rec)l(herc)l(he)0
3525 y Fg(Un)32 b(arbre)f(binaire)i(de)f(rec)m(herc)m(he)i(est)e(un)g
(arbre)f(binaire)h(tel)g(qu'en)h(c)m(haque)g(n\033ud,)f(la)g(v)-5
b(aleur)32 b(appa-)0 3645 y(raissan)m(t)26 b(est)h(plus)f(grande)g(que)
g(toutes)g(les)h(v)-5 b(aleurs)26 b(apparaissan)m(t)h(dans)f(le)g
(\014ls)g(gauc)m(he)g(et)g(plus)g(p)s(etite)0 3766 y(que)g(toutes)h
(les)f(v)-5 b(aleurs)26 b(apparaissan)m(t)h(dans)f(le)g(\014ls)g
(droit,)h(p)s(our)e(une)h(relation)g(d'ordre)g(donn)m(\023)-46
b(e.)42 b(Seuls)0 3886 y(les)35 b(n\033uds)h(p)s(oss)m(\022)-46
b(eden)m(t)36 b(une)g(information,)f(donc)g(il)f(n'y)i(a)e(pas)h(b)s
(esoin)g(d')m(\023)-46 b(etiquette)37 b(sur)e(les)g(feuilles.)0
4006 y(On)e(prend)g(ainsi)g(comme)h(t)m(yp)s(e)f(:)103
4210 y Fe(type)52 b('n)g(arbre_r)h(=)205 4330 y(Vide)103
4450 y(|)e(Noeud)i(of)e('n)h(*)g('n)g(arbre_r)h(*)e('n)h(arbre_r)h(;;)0
4654 y Fg(On)33 b(prendra)g(comme)h(con)m(v)m(en)m(tion)h(que)f(tous)f
(les)f(\023)-46 b(el)m(\023)g(emen)m(ts)34 b(d'un)g(arbre)f(binaire)g
(de)h(rec)m(herc)m(he)h(son)m(t)0 4774 y(distincts.)0
4895 y Fd(5.)45 b Fg(Ecrire)34 b(une)g(fonction)f Fe(insere)i
Fg(telle)f(que)g Fe(insere)52 b(comp)h(x)e(arbre)35 b
Fg(ins)m(\022)-46 b(ere)34 b(l')m(\023)-46 b(el)m(\023)g(emen)m(t)35
b Fe(x)e Fg(de)h(t)m(yp)s(e)0 5015 y Fe(a)j Fg(dans)f(l'arbre)h
(binaire)g(de)g(rec)m(herc)m(he)i Fe(arbre)p Fg(,)f(p)s(our)f(la)f
(relation)g(de)h(comparaison)g Fe(comp)g Fg(de)g(t)m(yp)s(e)0
5135 y Fe(a)52 b(->)f(a)h(->)g(bool)33 b Fg(\(on)g(ins)m(\022)-46
b(ere,)34 b(lorsque)g(c'est)f(n)m(\023)-46 b(ecessaire,)35
b(aux)e(niv)m(eaux)i(des)e(feuilles)h(de)f(l'arbre\).)0
5306 y Fd(6.)43 b Fg(Ecrire)32 b(une)f(fonction)g Fe(retire)p
1286 5306 V 39 w(plus)p 1529 5306 V 38 w(grand)h Fg(qui,)g(appliqu)m
(\023)-46 b(ee)32 b(\022)-49 b(a)31 b(un)g(arbre)g(binaire)g(de)g(rec)m
(herc)m(he,)0 5426 y(ren)m(v)m(oie)41 b(une)e(paire)g(form)m(\023)-46
b(ee)40 b(de)f(son)g(plus)h(grand)c(\023)-46 b(el)m(\023)g(emen)m(t)40
b(et)f(de)h(l'arbre)f(de)g(d)m(\023)-46 b(epart)39 b(priv)m(\023)-46
b(e)40 b(de)f(cet)-3 5546 y(\023)-46 b(el)m(\023)g(emen)m(t)34
b(\(sans)g(conna)-11 b(^)-38 b(\020tre)33 b(la)f(relation)h(de)g
(comparaison)g(utilis)m(\023)-46 b(ee\).)0 5717 y Fd(7.)43
b Fg(En)32 b(d)m(\023)-46 b(eduire)33 b(une)f(fonction)g
Fe(retire)p 1499 5717 V 38 w(racine)h Fg(qui,)g(appliqu)m(\023)-46
b(ee)33 b(\022)-49 b(a)31 b(un)h(arbre)f(binaire)h(de)g(rec)m(herc)m
(he)0 5837 y Fe(arbre)p Fg(,)i(retourne)f(cet)g(arbre)g(priv)m(\023)-46
b(e)34 b(de)f(sa)f(racine.)1885 6180 y(1)p eop
%%Page: 2 2
2 1 bop 0 84 a Fg(TP1)33 b Ff(Caml)3052 b Fg(Arbres)p
0 124 3820 4 v 0 407 a Fd(8.)40 b Fg(En)23 b(d)m(\023)-46
b(eduire)24 b(une)f(fonction)g Fe(retire)h Fg(telle)f(que)h
Fe(retire)53 b(comp)f(x)g(arbre)23 b Fg(retourne)g(l'arbre)g(binaire)0
527 y(de)33 b(rec)m(herc)m(he)i Fe(arbre)f Fg(priv)m(\023)-46
b(e)34 b(de)f(l')m(\023)-46 b(el)m(\023)g(emen)m(t)34
b Fe(x)f Fg(\(s'il)g(appartien)m(t)g(\022)-49 b(a)33
b(l'arbre\).)0 697 y Fd(9.)40 b Fg(Ecrire)23 b(une)f(fonction)g
Fe(separe)h Fg(telle)g(que)f Fe(separe)53 b(comp)g(x)e(arbre)23
b Fg(retourne)f(un)h(couple)f Fe(\(arbre1,)0 818 y(arbre2\))k
Fg(d'arbres)f(binaires)f(de)h(rec)m(herc)m(he)h(o)s(\022)-51
b(u)23 b Fe(arbre1)j Fg(\(resp.)41 b Fe(arbre2)p Fg(\))25
b(con)m(tien)m(t)h(tous)e(les)e(\023)-46 b(el)m(\023)g(emen)m(ts)0
938 y(de)37 b(l'arbre)g(binaire)h(de)f(rec)m(herc)m(he)i
Fe(arbre)g Fg(inf)m(\023)-46 b(erieurs)38 b(\(resp.)57
b(sup)m(\023)-46 b(erieurs\))39 b(\022)-49 b(a)36 b Fe(x)h
Fg(p)s(our)g(l'ordre)g Fe(comp)p Fg(,)0 1059 y(au)32
b(sens)j(strict.)44 b(P)m(ar)33 b(exemple)h(:)531 1290
y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 531 1290 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(6)209
1527 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 209 1527 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fg(2)234 1495 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 234 1495 a 48 1763 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end
 48 1763 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(1)73 1731 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 73 1731 a 370
1763 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 370 1763 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fg(4)395 1731 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 395 1731 a 209 1999 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-0 11
{InitCnode } NewNode end end
 209 1999 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(3)234 1967 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 234 1967 a 531
1999 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1 11
{InitCnode } NewNode end end
 531 1999 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fg(5)556 1967 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 556 1967 a 854 1527 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 854 1527 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(8)878 1495 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 878 1495 a 692
1763 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end
 692 1763 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fg(7)717 1731 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 717 1731 a 1015 1763 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 1015 1763 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(9)1039 1731 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1039 1731 a
1279 1638 a Fe(separe)53 b(\(prefix)g(<\))e(4)1181 1692
y Fc(\000)-40 b(\000)-22 b(\000)g(\000)h(\000)f(\000)h(\000)f(\000)g
(\000)h(\000)f(\000)g(\000)h(\000)f(\000)g(\000)h(\000)f(\000)g(\000)h
(\000)f(\000)-40 b(!)2389 1318 y Fb(0)2389 1493 y(B)2389
1553 y(B)2389 1613 y(B)2389 1672 y(B)2389 1736 y(@)2685
1527 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 2685 1527 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fg(2)2524 1763 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 2524 1763 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial Fg(1)2548 1731 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2548 1731 a 2846 1763 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end

2846 1763 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(3)2870
1731 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2870 1731 a 2981 1638 a Fa(;)3266 1409 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 3266
1409 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(6)3105
1645 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 3105 1645 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fg(5)3129 1613 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3129 1613 a 3427 1645 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 3427 1645 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(8)3452 1613
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3452 1613 a 3266 1881 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end
 3266 1881 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial Fg(7)3290 1849 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3290 1849 a 3588 1881 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end

3588 1881 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fg(9)3613
1849 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3613 1849 a 3766 1318 a Fb(1)3766 1493 y(C)3766
1553 y(C)3766 1613 y(C)3766 1672 y(C)3766 1736 y(A)0
2318 y Fd(10.)47 b Fg(En)35 b(d)m(\023)-46 b(eduire)35
b(une)f(fonction)g Fe(insere)p 1568 2318 31 4 v 39 w(racine)h
Fg(qui)g(a)5 b(joute)34 b(un)d(\023)-46 b(el)m(\023)g(emen)m(t)35
b(\022)-49 b(a)34 b(un)g(arbre)g(binaire)g(de)0 2438
y(rec)m(herc)m(he)h(en)e(l'ins)m(\023)-46 b(eran)m(t)34
b(\022)-49 b(a)32 b(la)h(racine.)0 2608 y Fd(11.)52 b
Fg(Ecrire)37 b(une)f(fonction)f Fe(test)i Fg(telle)f(que)g
Fe(test)53 b(comp)f(a)g(b)f(arbre)37 b Fg(v)m(\023)-46
b(eri\014e)37 b(si)f(l'arbre)g Fe(arbre)g Fg(est)0 2729
y(un)g(arbre)g(binaire)h(de)f(rec)m(herc)m(he)j(don)m(t)d(tous)h(les)d
(\023)-46 b(el)m(\023)g(emen)m(ts)38 b(son)m(t)e(sup)m(\023)-46
b(erieurs)39 b(\022)-49 b(a)35 b Fe(a)h Fg(et)h(inf)m(\023)-46
b(erieurs)37 b(\022)-49 b(a)36 b Fe(b)0 2849 y Fg(p)s(our)c(l'ordre)h
Fe(comp)p Fg(.)0 3019 y Fd(12.)83 b Fg(En)46 b(d)m(\023)-46
b(eduire)47 b(une)g(fonction)f Fe(test)p 1550 3019 V
38 w(int)g Fg(qui)g(v)m(\023)-46 b(eri\014e)48 b(si)e(un)g(arbre)g(est)
g(un)g(arbre)g(binaire)g(de)0 3140 y(rec)m(herc)m(he)35
b(sur)e(les)h(en)m(tiers)g(\(p)s(our)e(l'ordre)h Fe(prefix)53
b(<)p Fg(\).)0 3522 y Fh(3)161 b(Repr)l(\023)-77 b(esen)l(tation)52
b(a)l(v)l(ec)h(des)f(p)t(oin)l(teurs)0 3741 y Fg(Dans)32
b(certains)i(sujets)g(de)f(concours,)g(les)g(arbres)h(manipul)m(\023)
-46 b(es)34 b(ne)f(son)m(t)g(pas)g(repr)m(\023)-46 b(esen)m(t)m(\023)g
(es)35 b(par)d(le)h(t)m(yp)s(e)0 3862 y(pr)m(\023)-46
b(ec)m(\023)g(eden)m(t.)46 b(Nous)33 b(allons)d(\023)-46
b(etudier)33 b(ici)g(un)g(autre)g(t)m(yp)s(e)g(de)g(repr)m(\023)-46
b(esen)m(tation.)35 b(:)103 4065 y Fe(type)52 b('n)g(arbre_p)h(=)205
4185 y(Vide_p)103 4306 y(|)e(Noeud)i(of)e('n)h(enreg_Noeud)103
4426 y(and)g('n)f(enreg_Noeud)k(=)205 4546 y({)d(mutable)h(val)f(:)f
('n;)308 4667 y(mutable)i(gauche)g(:)e('n)h(arbre_p;)308
4787 y(mutable)h(droit)104 b(:)51 b('n)h(arbre_p)h(};;)0
4991 y Fg(On)41 b(utilise)h(ici)g(les)g(c)m(hamps)h(m)m(utables)f(des)g
(enregistremen)m(ts)j(p)s(our)40 b(d)m(\023)-46 b(e\014nir)42
b(les)g(arbres.)70 b(Gr^)-49 b(ace)41 b(\022)-49 b(a)0
5111 y(cette)33 b(mise)h(en)f(\033uvre,)h(on)e(p)s(eut)h(mo)s(di\014er)
g(un)g(arbre)g(sans)g(le)g(recopier.)0 5231 y Fd(13.)59
b Fg(R)m(\023)-46 b(e)m(\023)g(ecrire)39 b(la)e(fonction)h
Fe(miroir)h Fg(et)f(la)g(fonction)f Fe(insere)i Fg(\(p)s(our)f(un)g
(arbre)g(non)f(vide\))i(a)m(v)m(ec)g(ce)0 5352 y(nouv)m(eau)f(t)m(yp)s
(e)f(de)g(repr)m(\023)-46 b(esen)m(tation.)57 b(Dans)36
b(la)g(mesure)j(du)d(p)s(ossible)i(on)e(mo)s(di\014era)h(les)g(c)m
(hamps)h(de)0 5472 y(l'arbre)33 b(donn)m(\023)-46 b(e)33
b(en)g(param)m(\022)-46 b(etre,)33 b(plut^)-49 b(ot)33
b(que)h(d'un)f(recr)m(\023)-46 b(eer)34 b(un.)1885 6180
y(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
