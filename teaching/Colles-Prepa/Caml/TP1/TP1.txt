type ('f,'n) arbre =
  Feuille of 'f
 |Noeud of 'n * ('f,'n) arbre * ('f,'n) arbre
;;

let rec hauteur = function
  Feuille _ -> 0
 |Noeud (_,g,d) -> 1 + max (hauteur g) (hauteur d)
;;

let rec nombre_feuille = function
  Feuille _ -> 1
| Noeud (_,g,d) -> nombre_feuille g + nombre_feuille d
;;

let rec miroir = function
  Feuille f -> Feuille f
| Noeud (n,g,d) -> Noeud (n,miroir d,miroir g)
;;

type 'n arbre_r =
  Vide
| Noeud of 'n * 'n arbre_r * 'n arbre_r
;;

let rec insere comp x = function
  Vide -> Noeud (x,Vide,Vide)
| Noeud (n,g,d) -> if x=n then Noeud (n,g,d)
                   else if comp x n then Noeud (n,insere comp x g,d)
                        else Noeud (n,g,insere comp x d)
;;

let rec retire_plus_grand = function
  Vide -> failwith "arbre vide"
| Noeud (n,g,Vide) -> (n,g)
| Noeud (n,g,d) -> let (m,a) = retire_plus_grand d in (m,Noeud (n,g,a))
;;

let retire_racine = function
  Vide -> failwith "arbre vide"
| Noeud (n,Vide,d) -> d
| Noeud (n,g,d) -> let (m,a) = retire_plus_grand g in Noeud (m,a,d)
;;

let rec retire comp x = function
  Vide -> Vide
| Noeud (n,g,d) -> if x=n then retire_racine (Noeud (n,g,d))
                   else if comp x n then Noeud (n,retire comp x g,d)
                        else Noeud (n,g,retire comp x d)
;;

let rec separe comp x = function
  Vide -> (Vide,Vide)
| Noeud (n,g,d) -> if x=n then (g,d)
                   else if comp x n then 
                        let (a,b)=separe comp x g in (a,Noeud (n,b,d))
                   else let (a,b)=separe comp x d in (Noeud (n,g,a),b)
;;

let insere_racine comp x arbre =
  let (g,d)=separe comp x arbre in Noeud (x,g,d)
;;

let rec test comp a b = function
  Vide -> true
| Noeud (n,g,d) -> comp a n & comp n b &
                   test comp a n g & test comp n b d;; 

let test_int = test (prefix <) min_int max_int;;

type 'n arbre_p =
  Vide_p
| Noeud of 'n enreg_Noeud
and 'n enreg_Noeud = 
  { mutable val : 'n;
    mutable gauche : 'n arbre_p;
    mutable droit  : 'n arbre_p };;

let rec miroir = function
  Vide_p -> ()
| Noeud n ->
       begin 
        miroir n.gauche;
        miroir n.droit;
        let temp=n.gauche in
        n.gauche <- n.droit;
        n.droit <- temp
       end
;;

let rec insere comp x = function
   Vide_p -> failwith "arbre_vide"
 | Noeud n -> if n.val=x then ()
                  else if comp x n.val then
                    match n.gauche with
                     Vide_p -> n.gauche <- Noeud { val=x; gauche=Vide_p; droit=Vide_p }
                   | Noeud ng -> insere comp x n.gauche
                  else match n.droit with
                     Vide_p -> n.droit <- Noeud { val=x; gauche=Vide_p; droit=Vide_p }
                   | Noeud nd -> insere comp x n.droit
;;






