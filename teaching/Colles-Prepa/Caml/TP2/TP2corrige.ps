%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP2corrige.dvi
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP2corrige.ps TP2corrige.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.27:0942
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin /setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse /TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def /TeXcolorgrey{setgray}def /TeXcolorgray{
setgray}def /TeXcolorhsb{sethsbcolor}def /currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse /DC{exch dup userdict exch
known{pop pop}{X}ifelse}B /GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC /Goldenrod{0 0.10 0.84 0 setcmykcolor}
DC /Dandelion{0 0.29 0.84 0 setcmykcolor}DC /Apricot{0 0.32 0.52 0
setcmykcolor}DC /Peach{0 0.50 0.70 0 setcmykcolor}DC /Melon{0 0.46 0.50
0 setcmykcolor}DC /YellowOrange{0 0.42 1 0 setcmykcolor}DC /Orange{0
0.61 0.87 0 setcmykcolor}DC /BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC /RedOrange{0 0.77 0.87 0
setcmykcolor}DC /Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC /Maroon{0
0.87 0.68 0.32 setcmykcolor}DC /BrickRed{0 0.89 0.94 0.28 setcmykcolor}
DC /Red{0 1 1 0 setcmykcolor}DC /OrangeRed{0 1 0.50 0 setcmykcolor}DC
/RubineRed{0 1 0.13 0 setcmykcolor}DC /WildStrawberry{0 0.96 0.39 0
setcmykcolor}DC /Salmon{0 0.53 0.38 0 setcmykcolor}DC /CarnationPink{0
0.63 0 0 setcmykcolor}DC /Magenta{0 1 0 0 setcmykcolor}DC /VioletRed{0
0.81 0 0 setcmykcolor}DC /Rhodamine{0 0.82 0 0 setcmykcolor}DC /Mulberry
{0.34 0.90 0 0.02 setcmykcolor}DC /RedViolet{0.07 0.90 0 0.34
setcmykcolor}DC /Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC /Lavender{0
0.48 0 0 setcmykcolor}DC /Thistle{0.12 0.59 0 0 setcmykcolor}DC /Orchid{
0.32 0.64 0 0 setcmykcolor}DC /DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}
DC /Purple{0.45 0.86 0 0 setcmykcolor}DC /Plum{0.50 1 0 0 setcmykcolor}
DC /Violet{0.79 0.88 0 0 setcmykcolor}DC /RoyalPurple{0.75 0.90 0 0
setcmykcolor}DC /BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC /Periwinkle
{0.57 0.55 0 0 setcmykcolor}DC /CadetBlue{0.62 0.57 0.23 0 setcmykcolor}
DC /CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC /MidnightBlue{0.98 0.13
0 0.43 setcmykcolor}DC /NavyBlue{0.94 0.54 0 0 setcmykcolor}DC
/RoyalBlue{1 0.50 0 0 setcmykcolor}DC /Blue{1 1 0 0 setcmykcolor}DC
/Cerulean{0.94 0.11 0 0 setcmykcolor}DC /Cyan{1 0 0 0 setcmykcolor}DC
/ProcessBlue{0.96 0 0 0 setcmykcolor}DC /SkyBlue{0.62 0 0.12 0
setcmykcolor}DC /Turquoise{0.85 0 0.20 0 setcmykcolor}DC /TealBlue{0.86
0 0.34 0.02 setcmykcolor}DC /Aquamarine{0.82 0 0.30 0 setcmykcolor}DC
/BlueGreen{0.85 0 0.33 0 setcmykcolor}DC /Emerald{1 0 0.50 0
setcmykcolor}DC /JungleGreen{0.99 0 0.52 0 setcmykcolor}DC /SeaGreen{
0.69 0 0.50 0 setcmykcolor}DC /Green{1 0 1 0 setcmykcolor}DC
/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC /PineGreen{0.92 0 0.59
0.25 setcmykcolor}DC /LimeGreen{0.50 0 1 0 setcmykcolor}DC /YellowGreen{
0.44 0 0.74 0 setcmykcolor}DC /SpringGreen{0.26 0 0.76 0 setcmykcolor}
DC /OliveGreen{0.64 0 0.95 0.40 setcmykcolor}DC /RawSienna{0 0.72 1 0.45
setcmykcolor}DC /Sepia{0 0.83 1 0.70 setcmykcolor}DC /Brown{0 0.81 1
0.60 setcmykcolor}DC /Tan{0.14 0.42 0.56 0 setcmykcolor}DC /Gray{0 0 0
0.50 setcmykcolor}DC /Black{0 0 0 1 setcmykcolor}DC /White{0 0 0 0
setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP2corrige.dvi)
@start
%DVIPSBitmapFont: Fa cmsy10 12 2
/Fa 2 34 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<1AF0A3861A78A21A7C1A
3CA21A3E1A1E1A1F747EA2747E747E87747E747E1B7E87757EF30FE0F303F8007FBC12FE
BE1280A26CF3FE00CEEA03F8F30FE0F31F8051C7FC1B7E63505A505A63505A505AA250C8
FC1A1E1A3E1A3CA21A7C1A78A21AF862A359347BB264>33 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi12 12 1
/Fb 1 59 df<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A78891B>58
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi8 8 2
/Fc 2 104 df<151FEC03FFA2EC003FA2153EA2157EA2157CA215FCA215F8A21401EB07
E190381FF9F0EB7C1DEBF80FEA01F03903E007E0EA07C0120FEA1F8015C0EA3F00140F5A
007E1480A2141F12FE481400A2EC3F021506143E5AEC7E0E007CEBFE0C14FC0101131C39
3E07BE18391F0E1E38390FFC0FF03903F003C0202F7DAD24>100
D<14FCEB03FF90380F839C90381F01BC013E13FCEB7C005B1201485A15F8485A1401120F
01C013F0A21403121F018013E0A21407A215C0A2000F130F141F0007EB3F80EBC07F3803
E1FF3800FF9F90383E1F0013005CA2143EA2147E0038137C00FC13FC5C495A38F807E038
F00F80D87FFEC7FCEA1FF81E2C7E9D22>103 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmmi10 10.95 2
/Fd 2 103 df<EC07F0EC7FFE903801FC0F903907E0038090390FC001C0D93F8013E090
387F000701FE131F485A485A16C0485A000F15804990C7FC121F485AA3127F5BA312FF90
C9FCA6007E1560007F15E01501ED03C06CEC07806DEB0F00001F141E6C6C137C3907E001
F03901F01FC06CB5C7FCEB1FF023297DA727>99 D<163EEEFFC0923803E1E0923807C0F0
ED0F811687ED1F8F160F153FA217E092387E038093C7FCA45DA514015DA30103B512FCA3
90260003F0C7FCA314075DA4140F5DA5141F5DA4143F92C8FCA45C147EA414FE5CA41301
5CA4495AA35CEA1E07127F5C12FF495AA200FE90C9FCEAF81EEA703EEA7878EA1FF0EA07
C02C537CBF2D>102 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmtt12 12 53
/Fe 53 126 df<00085B003EEB07C0007FEB0FE0A24814F0A26C14E0B3A2007E1307003E
14C0A20008EB01001C1E75BD33>34 D<EB03E0EB0FF8497E497E497E90B5FC9038FE3F80
3801FC1F13F8000380EBF00FA7141F5D91393F87FFE001F84913F00001137F147E14FE90
26F9FC0713E001FF903801F8006C13F8ECF00302E05B1507D97FC05B14809038FF000F48
5D148048141F4801C05B5A391FEFE03FD83FC791C7FC903887F07FD87F03137EECF8FE6D
6C5A12FEEB00FF6E5AA291393FF00180EE03C091391FE007E0140F6CEB1FF06C133FEC7F
F8903980FFFE0FD83FC301FF13C0D9FFFC13FF6C496C13806C497E6CD9E00F13006C9038
8007FE3A00FE0001F82C3F7DBD33>38 D<EA07C0EA0FF0EA1FF8A213FCA213FE120F1207
EA007EA613FE13FCA21201EA03F8A2EA07F0120FEA1FE0EA7FC0EAFF8013005A5A12700F
1E6EBC33>I<140FEC3F80147F14FF491300495AEB07F8495A495A495A495A49C7FC5B12
015B485A12075B120F5B121F5BA2123F5BA2127F90C8FCA45A5AAD7E7EA47F123FA27F12
1FA27F120F7F12077F12036C7E7F12007F6D7E6D7E6D7E6D7E6D7EEB03FE6D7E6D138014
7F143FEC0F00194D6FC433>I<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E6C7E6C7E6D7E
133F80131F6D7E801307801303801301A2801300A28080A41580143FAD147F1500A45C5C
A213015CA213035C13075C130F5C495A133F5C137F49C7FC485A485A485A485AEA3FE048
5A485A90C8FC5A1278194D78C433>I<14F0497EA8007015E000F8EC01F000FE140700FF
140F01C1133F01F113FF263FF9F913C0000FB61200000314FCC614F06D5B011F1380D907
FEC7FC90381FFF80017F13E090B57E000314FC000F14FF263FF9F913C026FFF1F813F001
C1133F0101130F00FE140700F814010070EC00E000001500A86D5A242B79B333>I<141F
A24A7EB0007FB71280A2B812C0A36C1680A2C7D83F80C7FCB06EC8FCA22A2B7CB333>I<
EA07C0EA0FF0EA1FF8123F13FCA213FEA2121F120F1207EA007E13FEA213FC1201EA03F8
1207EA0FF0EA7FE012FF13C013005A12780F196E8A33>I<007FB612FEA2B8FCA36C15FE
A228077BA133>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B6C8A33>I<EB
01E0497EA21307A2130FA2131F133F137F13FF1203123F5AEAFFF713E71387EA7E071200
B3B3A2003FB512FE48801680A216006C5C213E76BD33>49 D<EB03FF011F13E0017F13FC
48B57E48ECFF804815C0260FFE0313E03A1FF0007FF049EB1FF84848130F49EB03FC127F
90C7EA01FE4814005A6C15FF167FA3127E123CC9FCA216FF16FEA2150116FC150316F815
07ED0FF0ED1FE0153F16C0ED7F80EDFF004A5AEC07FC4A5A4A5A4A5A4A5A4A5A4990C7FC
495AEB07F8EB1FF0495A495A495A4890C8FC4848143E4848147FEA0FF0485A48B7FCB8FC
A37E6C15FE283E7BBD33>I<903801FFC0010F13F8013F13FF90B67E4881488148903880
7FF03A0FFC000FF801F06D7E484813036F7EA21500A26C5A6C5AC9FC15015EA215034B5A
150F4B5A4B5A913803FFC00103B55A4991C7FC5D8116C06D8090C76C7EED0FF8ED03FC6F
7E6F7E821780163FA2EE1FC0A3123C127EB4FCA2163F1780167F6C16006D5C6D495A6C6C
1303D81FF8EB0FFC3A0FFF807FF86C90B55A6C5D6C15806C6C91C7FC010F13FC010113C0
2A3F7CBD33>I<15FF4A7F5C5CA25C5C15DFEC3F9FA2EC7F1F14FEA2EB01FCA2EB03F8EB
07F0A2EB0FE0EB1FC0A2EB3F80A2EB7F0013FEA2485A12035B485AA2485A485AA2485AA2
48C7FC12FEB812E017F0A46C16E0C8381F8000AC021FB512804A14C04A14E0A26E14C06E
14802C3E7DBD33>I<0007B612F04815F85AA316F001C0C8FCB0ECFFC001C713F801DF7F
90B6FC168016C0028013E09039FC001FF001F0EB0FF849130749EB03FC6C4813016CC713
FEC9FCA216FF167FA41218127EA2B415FF16FEA24814016C15FC6C14036DEB07F86D130F
6C6CEB1FF06C6CEB7FE09039FE03FFC06CB612806C150000015C6C14F8013F13E0010390
C7FC283E7BBC33>I<EA07C0EA0FE0EA1FF0EA3FF8A5EA1FF0EA0FE0EA07C0C7FCB3A3EA
07C0EA0FE0EA1FF0EA3FF8A213FCA3121F120F12071200A2120113F81203EA07F0120FEA
1FE0127FEAFFC01380130012FC12700E396EAA33>59 D<1608163E16FF5D15075DED3FFE
ED7FFC913801FFF0020713E04A1380023F1300EC7FFC49485A4913E0010F13804990C7FC
EB7FFC495A000313E0485B001F90C8FCEA7FFE13F8485A13C013F06C7E13FEEA1FFF0007
13C06C7FC613F86D7EEB1FFF6D7F010313E06D13F86D6C7E6EB4FC020F13806E13E00201
13F09138007FFCED3FFEED0FFF81150181163E160828337BB733>I<007FB71280A2B812
C0A36C16806C1600CBFCA9003FB7FC481680B812C0A36C1680A22A177CA933>I<121012
7CB4FC7F13E07FEA7FFC6C7E380FFF806C13E000017F6C13FCEB3FFE6D6C7E01077F0101
13F06D7FEC3FFE6E7E020713C06E13E0020013F8ED7FFE151FED0FFF1503150FED1FFE15
7FEDFFF8020313E04A13C0021F13004A5AECFFF8495B010713C0011F5B4948C7FCEBFFFC
4813F000075B481380D83FFEC8FC485AEAFFF05B138090C9FC127C121028337BB733>I<
007FB512F8B7FC16C082826C813A03F8000FFCED03FE15016F7E82A2EE3F80A7EE7F00A2
5E4B5AA2ED07FCED1FF890B65A5E1680828216F89039F8000FFCED01FE6F7EEE7F80163F
17C0161FA2EE0FE0A7161F17C0A2163FEE7F8016FF4B1300150F007FB65AB75A5E16E05E
6C4AC7FC2B3D7DBC33>66 D<003FB712E04816F0B8FCA27E7ED801FCC71207A8EE03E093
C7FCA7151F4B7EA490B6FCA69038FC003FA46FC7FC92C8FCB1383FFFF8487FB57EA26C5B
6C5B2C3D7DBC33>70 D<003FB612804815C0B712E0A26C15C06C1580260003F8C7FCB3B3
AD003FB612804815C0B712E0A26C15C06C1580233D78BC33>73 D<D87FFC90381FFFE048
6C4913F07FA36C6D6C13E00003913800FC0013F780A213F380A3EBF1F0A38013F0A280A2
147C147EA2143E143FA2801580A3140F15C0A2140715E0A2140315F0A21401A215F81400
A3157CA3153C153EA2151E151F387FFF80B5EAC00FA315076C496C5A2C3D7DBC33>78
D<003FB512FC48ECFF80B712E016F86C816C813A01FC000FFF030313801500EE7FC0163F
EE1FE0160FA217F01607A6160F17E0A2161FEE3FC0167FEEFF801503030F130090B65A5E
5E16E0168003FCC7FC01FCC9FCB3383FFFE0487FB57EA26C5B6C5B2C3D7EBC33>80
D<007FB57EB612F815FE81826C812603F8007FED3FF0ED0FF815076F7E1501A26F7EA74B
5AA215034B5A150FED3FF0EDFFE090B65A5E93C7FC5D8182D9F8007F153F6F7E150F8215
07AA173E177FA416F8030313FF267FFFC014FEB538E001FF17FC81EE7FF86C49EB3FF0C9
EA0FC0303E7EBC33>82 D<D907FE137890393FFFC07C90B5EAF0FC4814FC000714FF5AEB
FC03391FF0007F4848133F0180131F007F140F90C712074814035AA21501A46CEC00F86C
15007F7F6C7E7FEA1FFE380FFFE06C13FF6C14F06C14FC6C6C13FF011F1480010314C0D9
003F13E0020313F09138003FF8ED0FFC1507ED03FE1501150016FFA2007C157F12FEA56C
15FF16FE7FED01FC6D130301F0EB07F801FC130F9039FF807FF091B512E016C000FC1580
013FEBFE00D8F80F5BD8780013E0283F7BBD33>I<D87FFF903803FFF8B56C4813FCA46C
496C13F8D807F09038003F806D147F00031600A36D5C00015DA46C6C495AA46D13036D5C
A3EC8007013F5CA3ECC00F011F5CA46D6C485AA46D6C485AA4010391C7FC6E5AA3010113
7EA2ECFCFEA201005BA5EC7FF8A46E5AA26E5A6E5A2E3E7EBC33>86
D<007FB612FEA2B8FCA36C15FEA228077B7D33>95 D<EB1FFC90B57E000314E048804814
FC48809038F007FFEBE0016E7F153F6C48806C48131FC87F150FA5EC0FFF49B5FC131F13
7F48B6FC0007140F4813C0381FFC00EA3FF0EA7FC05B48C7FC5AA56C141F7E6D137FD83F
E0497ED9F807EBFFF06CB712F87E6C14F36C14C1C69138003FF0D91FF090C7FC2D2E7BAC
33>97 D<EA3FFC487E12FFA2127F123F1200ABEC01FE91380FFFC04A13F0027F7F91B512
FE90B7FCECFE07DAF800138002E0EB7FC04AEB3FE04A131FEE0FF091C7FC16074915F816
03A217FC1601A9160317F8A26D140717F06E130F17E06E131FEE3FC06E137F9139F801FF
80DAFE07130091B55A495C6E5BD97E3F13E0D93C0F138090260003FEC7FC2E3E7FBC33>
I<ECFFF0010713FE011FEBFF804914C04914E048B612F048EBC01F9038FE000F485A485A
4848EB07E049EB03C0484890C7FC5BA2127F90C9FCA25A5AA97E7EA27F003FEC01F06DEB
03F86C7E6D13076C6C14F06C6C130F01FFEB1FE06CEBE07F6C90B512C06C1580013F1400
6D13FC01075B010013C0252E79AC33>I<ED7FF84B7E5CA280157F1501ABEB01FF010713
C1011F13F1017F13F990B6FC5A4813813907FE003FD80FF8131F49130F48481307491303
123F491301127F90C7FCA25A5AA97E7E15037F123F6D1307A26C6C130F6D131F6C6C133F
6C6C137F2603FF81B512F091B612F8C602FD13FC6D13F96D01E113F8010F018013F0D901
FEC8FC2E3E7DBC33>I<ECFF80010713F0011F13FC497F90B6FC48158048018013C03A07
FE003FE001F8EB0FF048481307484814F8491303003F15FC491301127F90C7FC16FE1500
5A5AB7FCA516FC48C9FC7E7EA36C7E167C6C6C14FE7F6C7E6D13016C6CEB03FC6CB4130F
6C9038C03FF86C90B512F06D14E06D14C0010F1400010313FC9038007FE0272E7BAC33>
I<ED3FE0913801FFFC020713FE141F4A13FF5CECFFC015004948137E4A133C010314005C
A8003FB612F84815FCB7FCA36C15F8260003F8C7FCB3AD003FB612804815C0A46C158028
3E7DBD33>I<D901FEEB1FE0903A0FFFC0FFF0013F01F313F84990B512FC90B7FC5A4801
0313E12607FC00EB80F849017F1360484890383FC00049131FA2001F8149130FA66D131F
000F5DA26D133F6C6C495A6D13FF2603FF0390C7FCECFFFE485C5D5DD80FCF13C0D981FE
C8FC0180C9FCA27FA26C7E7F90B512FC6CECFFC06C15F0000715FC4815FF4816809038E0
000748489038007FC090C8EA1FE048150F007E150700FE16F0481503A56C1507007E16E0
007F150F6C6CEC1FC001E0147FD81FF8903801FF80270FFF801F13006C90B55A6C5DC615
F0013F14C0010F91C7FC010013F02E447DAB33>I<EA3FFC487E12FFA2127F123F1200AB
4AB4FC020713C0021F13F0027F7F91B5FC90B67EED07FEECF801ECF0004A7F4A7F5CA291
C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC303D
7FBC33>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCAA383FFFF8487FA47EEA0001B3
AD007FB612C0B712E016F0A216E06C15C0243E78BD33>I<383FFFFC487FB5FCA27E7EC7
FCB3B3AD003FB612F84815FCB712FEA26C15FC6C15F8273D7ABC33>108
D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F13872607FE
07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3A53C7FFE0FFF07FF80B548
018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC0713C0267FFE1F13F000FF
017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFF
F80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33>I<EB01FE90
380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848EB7FC049133F4848EB
1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C14036C15F8A26D1307
003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF802603FF0313006CEBFFFE
6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<EC01FE3A3FFC0FFFC0486C4813F0
00FF017F7F91B512FE6CB7FC6CEBFE07C6D9F800138002E0EB7FC04AEB3FE04A131FEE0F
F091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17E06E131FEE
3FC06E137F9139F801FF80DAFE07130091B55A495C6E5B6E13E0020F1380DA03FEC7FC91
C9FCAF383FFFF8487FB57EA26C5B6C5B2E427FAB33>I<ED03FE3B7FFF801FFF80B5D8C0
7F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF09139FFC007E092388003C092
C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>114
D<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE147F5A153F
A37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C680011F13FF0100
1480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14E06D130F6D
EB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7FC242E79AC
33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3161FEE3F80
A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07FCC7FC2938
7EB633>I<D83FFCEB1FFE486C497E00FF5CA2007F80003F800000EC007FB3A75EA25DA2
6D5B90387F800FDAE03F13FC6DB612FE17FF6D806D01FE13FE01039038F83FFC010001C0
C7FC302C7FAA33>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13F86C496C13
F0D801F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC8007011F5CA2
ECC00F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE01005BA214
FF6E5AA36E5AA26E5A6E5A2E2B7EAA33>I<3B7FFF8007FFF8B56C4813FC6E5AA24A7E6C
496C13F8D80FC0C7EA0FC06D141F00071680A56D143F00031600A3EC0FC0EC1FE0A23A01
F83FF07EA3EC7FF8147CA20000157C9039FCFCFCFCA3ECF87CA2017C5C017D137EECF03E
A2017F133FA26D486C5AA3ECC00F90390F8007C02E2B7EAA33>I<3B3FFFC07FFF80486D
B512C0B500F114E0A26C01E014C06C496C13803B00FE000FE000017F495AEB3F804B5A6D
6C48C7FC90380FE07E903807F0FEECF1FC903803FBF8EB01FF6D5B5D6E5A143F6E5A143F
814A7E14FF903801FBF0ECF9F8903803F1FCEB07E0157E90380FC07F011F6D7E90383F80
1F02007F496D7E01FE6D7E484813033B7FFFC03FFFE0B56C4813F0A46C496C13E02C2B7D
AA33>I<3B7FFF801FFFE0B56C4813F06E4813F8A24A6C13F06C496C13E0D803F8C7EAFC
00000114015E7F000014036D5C137EA2017F495A7FA26E485A131FA26D6C485AA214E001
0749C7FCA214F01303157EEB01F8A2157C010013FC14FC5D147C147DEC3FF0A36E5AA36E
5AA2141F5DA2143F92C8FCA3147EA214FE003F5B1301387F81F81383EB87F0139FEBFFE0
6C5B5C6C90C9FCEA0FFCEA03F02D427DAA33>I<ED07FEED7FFF4AB5FC14075C4A13FE91
383FFE0015E0EC7F8092C7FCB3A45C495A1303EB1FFCEA3FFFB55A14E05C8014F8003F7F
EA001FEB03FE13016D7E80B3A481EC3FE015FE91381FFFFE6E13FF8014016E7EED07FE28
4D7BC433>123 D<127CA212FEB3B3B3B3127CA2074D6AC433>I<EA7FF0B5FC14C014F080
6C7F38003FFE1303EB00FF80B3A4816E7E81EC1FFCEDFFFC6E13FF1403805C140F4A13FC
EDFC00EC3FE05D4A5A92C7FCB3A45CEB03FE133F387FFFFCB55A5C14C091C8FCEA7FF028
4D7BC433>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmbx12 12 11
/Ff 11 58 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC3FF849B5FC010F14E0013F14F890397FF01FFC9039FFC007FE489038
0001FF48486D1380000716C049147F000F16E049143F001F16F0A2003F16F8A249141F00
7F16FCA600FF16FEB3A3007F16FCA56C6CEC3FF8A3001F16F0A2000F16E06D147F000716
C06D14FF6C6C4913806C6D4813006C6D485A90397FF01FFC6DB55A010F14E00103148090
26003FF8C7FC2F427CC038>48 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003
B3B3ADB712FCA5264177C038>I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC
0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F
17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A
4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F049
5A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<
ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D13
8013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F138090
2607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A2
17F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81F
F0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>
I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E
147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B
48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<00071503
01E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF0
01C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C049
7F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B00
7EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D01
3F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC0107
9038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA2
48486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091
B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A3
17F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C
6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<
121E121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E
5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2
141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<
EC7FF00103B5FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E497F4848EC
7F80163F484815C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F014006C01FC
5B6E485A6C9038FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F80
90B7FC48013F14802607FC0F14C0260FF80314E04848C6FC496D13F0003F141F48481307
496D13F8150000FF157F90C8123F161F160FA21607A36D15F0127F160F6D15E06C6C141F
6DEC3FC06C6CEC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F
91C7FC010013F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF0
489038800FF848496C7E48488048486D7E001F80003F1680A2484815C08117E0A212FF17
F0A617F8A45D127FA3003F5CA26C7E5D6C6C5B12076C6C131E6CEBC07C6CEBFFF8013F5B
010F01C013F00101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C491380A21700
4B5A150F5E49495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0
D907FEC8FC2D427BC038>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmcsc10 12 4
/Fg 4 110 df<DB03FF140C033F01F0131C4AB500FC133C91390FFE007FDA1FF090380F
C07CDA7F80903803E0FC4948C812F0D903FC15794948153FD91FF0151F4948150F494815
074A150349C9FC48481601120349160012074848177CA24848173CA2123FA249171C127F
A319005B12FFAC127F7FA2191CA2123F7FA2001F183C19386C7EA26C6C1778000318706D
17F0000118E06C6C16016D6C16C06E15036D6CED07806D6CED0F00D907F8151E6D6C5D6D
B45D6D6C6C495ADA1FF0EB07C0DA0FFEEB7F800201B500FEC7FCDA003F13F0030313803E
4879C54E>67 D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A
6C7EA34A6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA249
81011CC7121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7E
D81FF84A7EB5027F13F8A335357CB43D>97 D<B512FEA3000390C9FCEA01FCB3A9EE01C0
A416031780A41607A2160F161FA2167FEEFF00486C1307B8FCA32A337BB233>108
D<D8FFFEEE7FFFA26D93B5FC000318C06C1880D9DF80EC01DFA2D9CFC0EC039FA3D9C7E0
EC071FA2D9C3F0140EA3D9C1F8141CA2D9C0FC1438A3027E1470A26E14E0A391391F8001
C0A291390FC00380A3913907E00700A2913803F00EA36E6C5AA26E6C5AA3ED7E70A26F5A
A3486C6D5A487ED81FFC6D48EB3FC0B50080020FB5FCA2ED070040337BB24A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmr12 12 47
/Fh 47 122 df<4AB4FC020F13C091383F00F002FC1338D901F0130C4948131E4948133E
4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D8007EC7FC8282B3
B001FFEC7F80007FD9FC1FB5FCA330467EC536>12 D<127812FCA27E7E6C7E123FEA0FC0
6C7E6C7E12016C7E137C7F130E7FEB0380EB0100111275C431>18
D<130FEB1F80A2133F137FEBFF005BEA01F8485A485A5B485A48C7FC123E12385A5A1240
11126CC431>I<02FFED7F80010701E0903803FFE090261F80F8903807C1F890263E003C
90381E007C49010F497F496D6C487F48486D6C4814804848DAE1E0EB0FC00007EC01E348
48DAF3C0EB07E0001FEC00FF4918F0003F6F5A1903A248C816F870C7FCA25AA294B6FCA2
94C9FCA67E836D147F123FA2711418001F15FF7F000F912601F3E014306C6C14E1000391
2603E0F014606C6C4A6C14C06C6C902607807CEB0180017C90260F001EEB03006D013C6D
130E90261F80F8903807E03C902607FFE0903801FFF0010090C8EA3FC0452E7DAC4C>27
D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212
065AA25A5A12200B1D78C41B>39 D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E12
00A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78891B>44
D<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A78891B>46
D<14FF010713E090381F81F890387E007E01F8131F4848EB0F80000315C04913074848EB
03E0000F15F0A24848EB01F8A3003F15FCA348C812FEA64815FFB3A26C15FEA56D130100
3F15FCA3001F15F8A26D1303000F15F0A26C6CEB07E0000315C06D130F6C6CEB1F806C6C
EB3F00017E137E90381F81F8903807FFE0010090C7FC28427CC031>48
D<143014F013011307131F13FFB5FC13E713071200B3B3AF497E497E007FB6FCA3204178
C031>I<EB03FE90381FFFC0017F13F03901F80FFC3903C001FE48C7127F000EEC3F8000
0CEC1FC04815E048EC0FF0A248EC07F8A2127C00FE15FC7E6D1303A46CC71207123EC813
F8A3ED0FF0A216E0151F16C0153F1680ED7F00157E5D4A5A5D4A5A4A5A4A5A4AC7FC141E
5C5C5C495A495A495A91C7120C130E5B4914185B5B485A49143848C8123000061570000F
B612F05A5A5AB712E0A326417BC031>I<49B4FC010F13F0013F13FC9038FE01FE3901E0
007FD80380EB3F8048C7EA1FC0000EEC0FE0D80F8014F0EA1FE016F86D1307A36C5AA2D8
0380130FC813F0A3ED1FE016C0A2ED3F801600157E5DEC03F0EC1FC0D90FFFC7FC15F090
380001FCEC007EED1F8016C0ED0FE0ED07F016F8150316FC16FE1501A216FFA3121E123F
487E487EA216FEA24913036CC713FC127E0070EC07F8003015F06C140F000E15E06CEC1F
C0D803E0EB7F803A01FC01FE0039007FFFFC011F13E0010190C7FC28427CC031>I<1507
A25D5DA25D5DA25DA25C5C811406140E140C141814381430146014E014C01301EB038014
005B13065B131C13185B137013605B12015B48C7FC5A1206120E120C5A123812305A12E0
B812C0A3C86CC7FCAC4B7E4A7F91B61280A32A427DC131>I<000215C0D807C0130701FC
EB7F8090B612005D5D15F05D158026063FFCC7FC90C9FCAE14FF010713E090381F01F090
3878007C01E07FD807807F90C71380ED0FC01202C8EA07E016F0A3ED03F8A316FCA4121C
123E127F487EA216F890C7FC4814074815F01260A26CEC0FE016C06C141F001C15806CEC
3F006C147E3903C001FC3901F807F039007FFFE06D1380D907FCC7FC26427BC031>I<EC
07F8EC3FFF91B51280903903FC03C0903907E000E0D90F80133090391F0001F0013EEB03
F84913075B1201485A49EB03F00007EC01E0000F91C7FC5B121FA25B123FA3127F90C9FC
EC7F80903801FFF039FF0780FC90380E003E0118130F49EB078016C049EB03E04914F0ED
01F8A24914FC150016FEA290C8FC16FFA27EA66C7EA216FE121FA2ED01FC6C7E16F80007
14036C6C14F06DEB07E0000115C06C6CEB0F80017EEB3F0090383F80FE90380FFFF86D5B
0100138028427CC031>I<121E123FEA7F80EAFFC0A4EA7F80EA3F00121EC7FCB3A5121E
123FEA7F80EAFFC0A4EA7F80EA3F00121E0A2B78AA1B>58 D<16C04B7EA34B7EA34B7EA3
4B7EA3ED19FEA2ED39FF1530A203707FED607FA203C07F163FA2DA01807F161FA24A486C
7EA302066D7EA2020E80020C1303A2021C8002181301A24A8082A24A81177FA291B77EA3
D90180C7EA1FE0A201038291C8120FA2498201061507A2010E82010C1503A249821701A2
498283137801F883487ED80FFF030313E0B500E0027FEBFFC0A342467DC549>65
D<DB0FFE146092B512C0020302F013E0913A1FFC01FC0191393FC0001E02FFC7EA0703D9
01FCEC0387D907F0EC00C74948156F4948153F4948151F49C9120F13FE000117075B4848
16031207491601120F491600121FA2123F491760A2127FA219005B12FFAC127F7FA21960
123FA27F121FA26C6C17C0A212076DEE018012036C6C16036D170000001706137F6D6C5D
6D6C5D6D6C5D6D6C5DD901FC4A5A6DB4EC0780DA3FC0011FC7FCDA1FFC13FC0203B55A02
0014C0DB0FFEC8FC3B467BC446>67 D<B8FC17F017FC00019039C00007FF6C499038007F
C0017FED1FE0EF07F0EF03FC717E717E84727E727E727EA2727E85180385A2180185A385
84A31A80AD1A00A36061A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5A
EF1FE001FFED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B>I<B612F8A30001
01E0C9FC6C5B6D5AB3B31830A418701860A518E0A3EF01C0A217031707A2170F173F177F
01FFEC01FF486D011F1380B9FCA334447CC33D>76 D<ED1FFC4AB512C091390FF007F891
393F8000FE027EC7123FD901F8EC0FC049486E7ED90FE0EC03F849486E7E49486E7E49C9
127F01FE707E49161F0001844848707EA24848707E000F84491603001F84A2491601003F
84A3007F844982A300FF1980AC007F19006D5EA4003F606D1603A2001F606D1607000F60
A26C6C4C5AA26C6C4C5A0001606C6C4C5A6D167F6D94C7FC6D6C15FE6D6C4A5A6D6C4A5A
D903F0EC07E0D901FCEC1FC0D9007E4AC8FC6E6C13FE91390FF007F80201B512C0912600
1FFCC9FC41467BC44C>79 D<B712FCEEFFC017F800019039C0000FFE6C49EB01FF017F91
38007F80EF1FE0170FEF07F018F8EF03FCA218FE1701A218FFA718FEA2170318FCA2EF07
F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B612F017800280C9FCB3A9497E487F
B612C0A338447CC342>I<49B41303010F13E0013FEBF8079038FE00FCD801F0EB1F0F48
48EB079F4848EB01DF48486DB4FC48C87E001E81123E007E81127C8212FC82A46C81A37E
6C6C91C7FCA2EA3FE07FEA1FFEEBFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F8001
0F80010180D9001F7F02017F9138001FFF150303001380167FEE3FC0161FA2EE0FE01240
12C01607A47EA217C07E160F6C1680A26CED1F006C151E6C153ED8FBC05CD8F9F05CD8F0
7CEB03F03AE03FC00FE0010FB51280D8C00349C7FC9038003FF02B467BC436>83
D<003FB912E0A3903BF0003FF0007F01806D48130F003EC7150348EF01F0007817001970
1270A219301260A5481818A5C81600B3B3A54B7EEDFFFC0103B7FCA33D447CC346>I<13
0C131E133F497EEBF3C03801E1E03803C0F03807807848487E001E7F487F0070EB038048
EB01C00040EB00801A0E75C331>94 D<EB07F8EB3FFF9038F80FC03901C003E048C66C7E
00066D7E48147CD80F80137E486C133E6D133F8182A26C5A6C5AC8FCA4EC0FFF49B5FC90
380FFC1FEB3FC0EBFF00EA03FCEA07F0485A121F485A5B127F176048C7FCA4153FA26C14
6F7F003F9138C7C0C0391FC001873B0FE00307E1803A07F81E03FF2701FFFC0113003A00
1FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120312011200B3EC01FC91380FFF8091383E
07E091387000F802C0137CD9FD807F01FFC77EEE0F804915C049EC07E017F0160317F8A2
17FC1601A317FEA917FCA21603A217F8A2EE07F017E07FEE0FC001FBEC1F801700D9F180
133ED9F0C05B9039E06001F891383C07E09039C01FFF8090260003FCC7FC2F467DC436>
I<EC7F80903803FFF090380FC07C90383E000E49130349EB01804848EB00C00003140748
48EB0FE04848131FA2121F5B003FEC0FC0ED0780007F91C7FC90C9FCA25AAA7EA27FA212
3F16306C7EA2000F15606C7E6C6C14C00001EC01806C7E017CEB07006D130E90381FC078
903807FFF001001380242E7DAC2B>I<16FE157FA315011500167EB3EC7F80903803FFF0
90380FC07890383F000C017C13064913034848EB01FE00031400485A4848147EA2121F48
5AA2127FA290C8FCA25AA97EA37F123FA2121F7F000F15FE6C7E000314016C6CEB037E6C
6C147F017C010E13806D011C13FE90380FC0F0903803FFE09026007F0013002F467DC436
>I<EB01FE903807FFC090381F03F090387C00F849137C48487F48487F0007158049130F
000F15C0121F4914E0003F1407A2127F90C713F0A35AA290B6FCA290C9FCA67EA36C7EA2
1630121F7F000F15606C7E000315C06C6CEB01806C6CEB0300017C13066D131C90380FC0
78903803FFE09038007F80242E7DAC2B>I<EC1FC0EC7FF0ECF038903803E07C903807C0
FC90380F81FEA2EB1F0190383F00FCA2013E1330017E1300B0B61280A3D8007EC7FCB3B1
137F497E007FEBFF80A31F467EC51E>I<D901FCEB1FC0903A0FFF807FE0903A3F07E1E1
F090397C01F7819039F800FE01484890387C00E048486D13000007143FA248486D7EA200
1F81A7000F5DA26C6C49C7FCA20003143E6C6C5B6C6C5B486C485A39033F07E090380FFF
80260701FCC8FC0006CAFCA3120E120F7EA27F13E06CB512F86CECFF806C15E06D14F848
B67E3A07E0000FFED80F80EB00FF001EC8123F003EED1F8048150F17C0481507A6007CED
0F80A26CED1F006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7
FC010113E02C417DAB31>I<EA01FC12FFA3120312011200B3EC01FE913807FF8091381E
07E091383801F002607FECC000D9FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5D8
FC7F13FEA32F457DC436>I<13E0EA03F8487EA66C5AEA00E090C7FCADEA01FC127FA312
0312011200B3B0487EB512F8A315437EC21B>I<14F0EB01F8EB03FCEB07FEA4EB03FCEB
01F8EB00F01400AD14FE137FA313011300147EB3B3AB003C137C127EB413FC14F8A238FE
01F0007E13E0383803C0381E0780380FFF00EA01FC175783C21E>I<EA01FC12FFA31203
12011200B3B3B3A5487EB512FCA316457EC41B>108 D<2701FC01FEEC7F8000FF903B07
FFC001FFF0913B0E03F00380FC913B3800F80E003E0003495C000101C0D97C307F000003
7E81D9FD805C01FFC7D83EC0130F043F81495DA34992C7FCB3A9486C4A6C497EB5D8FC3F
B5000FB512C0A34A2C7DAB51>I<3901FC01FE00FF903807FF8091381E07E091383801F0
000301607F0001EBC0002600FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5D8FC7F
13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F496D7E496D7E4848
6D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E481680A44816C0AA6C16
80A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C6C
495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<3901FC01FC00FF
90380FFF8091383E07E091387001F800039038C0007C2601FD807F6CB4C7123FEE1F8049
EC0FC04915E0EE07F0A217F8160317FCA3160117FEA917FC1603A317F8160717F0EE0FE0
7FEE1FC06D1580EE3F00D9FD80137ED9FCC05B91386001F891383C0FE091381FFF80DA03
FCC7FC91C9FCAE487EB512FCA32F3F7DAB36>I<91387F8006903903FFE00E90380FE078
90383F001C017EEB061E5B4848EB033E4848EB01BE12074848EB00FEA2485A003F157E5B
127FA390C8FC5AA97E7FA3123F7F121F16FE6C7E000714016C7E6C6CEB037E0000140601
7C130C013F131890380FC0F0903803FFE09038007F0091C7FCAE16FF037F13FEA32F3F7D
AB33>I<3901F807E000FFEB1FF8EC383CEC607E0003EBC0FF12013800F980EBFB00157E
153C01FE1300A45BB3A77F487EB6FCA3202C7DAB26>I<90383FE0303801FFF83907C01E
70390F0007F0001C1301481300A2481470A212F01530A37E7E007E1400EA7F80EA3FF0EB
FF806C13F86C13FE0003EBFF806C14C0D8003F13E0010313F09038001FF81403EC00FC00
40147C00C0147E153E7E151EA37E151C7E153C6C14386C147000FB14E039F18001C039E0
F00F8039C07FFE00EB0FF01F2E7DAC26>I<1306A5130EA4131EA3133E137EA213FE1201
1207001FB512F0B6FCA2D8007EC7FCB3A4150CAA133E013F1318A27F90380F8030010713
60903803E0C0903801FF809038003F001E3E7EBC26>I<D801FC14FE00FF147FA3000314
01000114000000157EB3A916FEA3017C1301A2017EEB037E013E147F011E010613806D01
1C13FE903807C078903803FFE09026007F8013002F2D7DAB36>I<B539E001FFFCA3D807
FEC7EA7FE0D801FCEC1F8017000000150E160CA2017E5CA2017F14386D1430A26D6C5BA2
6E13E0010F5CA26D6C485AA36D6C48C7FCA26E5A01011306A26D6C5AA2ECFE1CEC7E18A2
6E5AA3EC1FE0A36E5AA26E5AA36EC8FC2E2C7EAA33>I<3B7FFFF007FFFCA30001D98001
13C06C90C7EAFE006D147C6D14706D6C5B6D6C5BECE0010107495AD903F090C7FCECF806
903801FC0E01005BEC7E18EC7F30EC3F706E5A6E5A811407814A7EEC0DFC1418EC387E4A
7E02607FECC01F01016D7ED903807F4A6C7E01061303496D7E011C80013C1300017C147E
D801FC14FFD80FFE4913C0B5D8800713FFA3302B7FAA33>120 D<B539E001FFFCA3D807
FEC7EA7FE0D801FCEC1F8017000000150E160C6D141C017E1418A26D5CA26E1370011F14
60A26D6C5BA2800107495AA2ECF003010391C7FCA2903801F806A2ECFC0E0100130CA2EC
7E18A2EC7F38EC3F30A2EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA2141C1418A20038
5B127C00FE5BA25C1301387C0380D87007C9FCEA3C1EEA1FFCEA03F02E3F7EAA33>I
E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop Black 0 84 a Fh(Corrig)m(\023)-46 b(e)33 b(TP2)g
Fg(Caml)2054 b Fh(Arbres)33 b(blancs)h(et)f(noirs)p 0
124 3820 4 v Black 0 407 a Ff(1.)p Black Black 0 561
a Fe(let)52 b(pere)g(=)g(function)103 682 y(Vide)g(->)g(failwith)h
("pere)g(inconnu")51 802 y(|Noeud)g(n)f(->)f(n.pere)i(;;)0
1043 y(let)f(fils_gauche)i(=)e(function)103 1163 y(Vide)g(->)g
(failwith)h("fils)g(inconnu")51 1284 y(|Noeud)g(n)f(->)f(n.gauche)j(;;)
0 1524 y(let)e(fils_droit)i(=)e(function)103 1645 y(Vide)g(->)g
(failwith)h("fils)g(inconnu")51 1765 y(|Noeud)g(n)f(->)f(n.droit)j(;;)0
2006 y(let)e(valeur)h(=)e(function)103 2126 y(Vide)h(->)g(failwith)h
("arbre)g(vide")51 2247 y(|Noeud)g(n)f(->)f(n.val)i(;;)0
2487 y(let)f(couleur)h(=)f(function)103 2608 y(Vide)g(->)g(Noir)51
2728 y(|Noeud)h(n)f(->)f(n.couleur)j(;;)0 2932 y Ff(2.)p
Black Black 0 3087 a Fe(let)e(est_fils_gauche)j(a)d(=)f(fils_gauche)k
(\(pere)d(a\)=a)h(;;)0 3327 y(let)f(est_fils_droit)j(a)d(=)f
(fils_droit)j(\(pere)f(a\)=a)f(;;)0 3531 y Ff(3.)p Black
Black 0 3686 a Fe(let)g(frere)h(a)e(=)103 3806 y(if)g(est_fils_gauche)
56 b(a)51 b(then)104 b(fils_droit)54 b(\(pere)e(a\))103
3926 y(else)g(fils_gauche)i(\(pere)f(a\))e(;;)0 4167
y(let)h(oncle)h(a)e(=)h(\(frere)h(\(pere)f(a\)\))g(;;)0
4371 y Ff(4.)p Black Black 0 4526 a Fe(let)g(rec)g(transforme)i(=)e
(function)154 4646 y(Vide)g(->)g(V)51 4766 y(|)g(Noeud)g(n)g(->)g(N)f
(\(n.val,n.couleur,transfo)q(rme)58 b(n.gauche,transforme)e(n.droit\))d
(;;)0 4970 y Ff(5.)p Black Black 0 5125 a Fe(let)f(rec)g(test_pere_aux)
j(p)c(=)h(function)154 5245 y(Vide)g(->)g(true)51 5366
y(|)g(Noeud)g(n)g(->)g(n.pere=p)h(&&)f(test_pere_aux)j(\(Noeud)e(n\))e
(n.gauche)1179 5486 y(&&)h(test_pere_aux)j(\(Noeud)e(n\))e(n.droit;;)0
5727 y(let)h(test_pere)i(=)d(test_pere_aux)k(Vide)d(;;)0
5931 y Ff(6.)p Black 1885 6180 a Fh(1)p Black eop
%%Page: 2 2
2 1 bop Black 0 84 a Fh(Corrig)m(\023)-46 b(e)33 b(TP2)g
Fg(Caml)2054 b Fh(Arbres)33 b(blancs)h(et)f(noirs)p 0
124 3820 4 v Black Black Black 0 407 a Fe(let)52 b(rec)g(test_prop4)i
(=)e(function)103 527 y(Vide)g(->)g(true)51 648 y(|Noeud)h(n)f(->)f
(match)i(n.couleur)h(with)308 768 y(Blanc)e(->)g(\(couleur)h
(n.pere\)=Noir)i(&&)d(test_prop4)i(n.gauche)1897 888
y(&&)e(test_prop4)i(n.droit)256 1009 y(|Noir)104 b(->)52
b(test_prop4)i(n.gauche)f(&&)f(test_prop4)i(n.droit)f(;;)0
1213 y Ff(7.)p Black Black 0 1367 a Fe(exception)h(StopProp5;;)0
1608 y(let)e(rec)g(nb_noirs)i(=)d(function)103 1728 y(Vide)h(->)g(1)51
1849 y(|Noeud)h(n)f(->)f(let)i(g)e(=)h(nb_noirs)h(n.gauche)g(and)f(d=)g
(nb_noirs)i(n.droit)f(in)666 1969 y(if)f(g=d)g(then)h(match)f
(n.couleur)i(with)974 2089 y(Blanc)f(->)e(g)923 2210
y(|Noir)104 b(->)51 b(g+1)666 2330 y(else)i(raise)f(StopProp5)i(;;)0
2485 y Fh(Le)31 b(d)m(\023)-46 b(eclenc)m(hemen)m(t)34
b(d'une)d(exception)h(a)m(v)m(ec)g(la)e(commande)h Fe(raise)h
Fh(p)s(ermet)f(d'arr)m(^)-46 b(eter)31 b(le)f(calcul)h(si)g(\022)-49
b(a)0 2605 y(un)33 b(n\033ud)g(donn)m(\023)-46 b(e,)33
b(la)g(con)m(train)m(te)g(5)g(n'est)g(pas)g(v)m(\023)-46
b(eri\014)m(\023)g(ee.)0 2775 y Ff(8.)46 b Fh(La)f(fonction)h
Fe(test)p 888 2775 31 4 v 38 w(prop5)h Fh(lance)f(le)g(calcul)g(de)g
Fe(nb)p 2140 2775 V 38 w(noirs)h Fh(et)f(regarde)g(si)g(aucune)g
(exception)0 2895 y(n'est)32 b(d)m(\023)-46 b(eclenc)m(h)m(\023)g(ee.)
34 b(Si)e(c'est)g(le)f(cas,)h(la)f(con)m(train)m(te)h(est)g(v)m(\023)
-46 b(eri\014)m(\023)g(ee)33 b(:)e(le)g(r)m(\023)-46
b(esultat)32 b(est)g Fe(true)p Fh(.)g(Dans)f(le)g(cas)0
3016 y(con)m(traire)i(l'exception)i Fe(StopProp5)g Fh(est)e(d)m(\023)
-46 b(etect)m(\023)g(ee)34 b(est)f(le)g(r)m(\023)-46
b(esultat)34 b(est)f Fe(false)p Fh(.)p Black Black 0
3170 a Fe(let)52 b(test_prop5)i(a)e(=)103 3291 y(try)205
3411 y(nb_noirs)h(a;)205 3531 y(true)103 3652 y(with)205
3772 y(StopProp5)h(->)e(false)g(;;)0 3926 y Fh(P)m(our)28
b(se)h(passer)g(des)g(exceptions)h(il)e(faudrait)g(mo)s(di\014er)g(la)g
(fonction)g Fe(nb)p 2675 3926 V 38 w(noirs)h Fh(p)s(our)f(qu'elle)h
(ren)m(v)m(oie)0 4047 y(un)h(couple)h(form)m(\023)-46
b(e)31 b(d'un)f(b)s(o)s(ol)m(\023)-46 b(een)30 b(qui)h(indique)h(si)e
(une)h(violation)f(de)h(la)f(con)m(train)m(te)h(5)f(a)d(\023)-46
b(et)m(\023)g(e)30 b(d)m(\023)-46 b(etect)m(\023)g(ee)0
4167 y(et)33 b(un)g(en)m(tier)g(qui)h(ren)m(v)m(oie)g(la)e(v)-5
b(aleur)33 b(calcul)m(\023)-46 b(ee)34 b(dans)g(l'ancienne)g(v)m
(ersion.)0 4337 y Ff(9.)p Black Black 0 4492 a Fe(let)52
b(testRN)h(a)e(=)103 4612 y(\(couleur)i(a\)=Noir)g(&&)f(test_prop4)i(a)
d(&&)h(test_prop5)i(a)e(;;)0 4816 y Ff(10.)p Black Black
0 4970 a Fe(let)g(inverse_couleur)j(=)d(function)103
5091 y(Vide)g(->)g(\(\))51 5211 y(|Noeud)h(n)f(->)f(match)i(n.couleur)h
(with)205 5332 y(Blanc)f(->)e(n.couleur)j(<-)e(Noir)154
5452 y(|Noir)104 b(->)51 b(n.couleur)j(<-)e(Blanc)h(;;)0
5656 y Ff(11.)p Black Black 0 5810 a Fe(let)f(adopte_gauche)j(=)c(fun)
154 5931 y(Vide)h(Vide)g(->)g(failwith)i("arbres)f(vides")p
Black 1885 6180 a Fh(2)p Black eop
%%Page: 3 3
3 2 bop Black 0 84 a Fh(Corrig)m(\023)-46 b(e)33 b(TP2)g
Fg(Caml)2054 b Fh(Arbres)33 b(blancs)h(et)f(noirs)p 0
124 3820 4 v Black 51 407 a Fe(|)52 b(Vide)g(\(Noeud)h(p\))f(->)g
(p.gauche)h(<-)f(Vide)51 527 y(|)g(\(Noeud)h(f\))e(Vide)i(->)f(f.pere)g
(<-)g(Vide)51 648 y(|)g(\(Noeud)h(f\))e(\(Noeud)i(p\))f(->)g(\()f
(p.gauche)j(<-)e(Noeud)g(f;)1435 768 y(f.pere)h(<-)f(Noeud)h(p)e(\))h
(;;)0 1009 y(let)g(adopte_droit)j(f)c(=)h(fun)154 1129
y(Vide)g(Vide)g(->)g(failwith)i("arbres)f(vides")51 1249
y(|)f(Vide)g(\(Noeud)h(p\))f(->)g(p.droit)h(<-)f(Vide)51
1370 y(|)g(\(Noeud)h(f\))e(Vide)i(->)f(f.pere)g(<-)g(Vide)51
1490 y(|)g(\(Noeud)h(f\))e(\(Noeud)i(p\))f(->)g(\()f(p.droit)j(<-)d
(Noeud)i(f;)1435 1611 y(f.pere)g(<-)f(Noeud)h(p)e(\))h(;;)0
1813 y Ff(12.)p Black Black 0 1967 a Fe(let)g(rotation_droite)j(a)d(=)
103 2088 y(let)g(b=fils_gauche)i(a)e(in)103 2208 y(let)g(y=fils_droit)i
(b)103 2328 y(and)e(p=pere)g(a)g(in)103 2449 y(if)f(p=Vide)i(||)f
(\(est_fils_gauche)k(a\))51 b(then)i(adopte_gauche)h(b)e(p)103
2569 y(else)g(adopte_droit)i(b)e(p;)103 2690 y(adopte_gauche)i(y)e(a;)
103 2810 y(adopte_droit)i(a)e(b)f(;;)0 3051 y(let)h(rotation_gauche)j
(b)d(=)103 3171 y(let)g(a=fils_droit)i(b)e(in)103 3291
y(let)g(y=fils_gauche)i(a)103 3412 y(and)e(p=pere)g(b)g(in)103
3532 y(if)f(p=Vide)i(||)f(\(est_fils_gauche)k(b\))51
b(then)i(adopte_gauche)h(a)e(p)103 3653 y(else)g(adopte_droit)i(a)e(p;)
103 3773 y(adopte_droit)i(y)e(b;)103 3893 y(adopte_gauche)i(b)e(a)f(;;)
0 4047 y Fh(Ces)37 b(deux)g(fonctions)f(son)m(t)g(b)s(eaucoups)h(plus)g
(simple)g(\022)-49 b(a)33 b(\023)-46 b(ecrire)36 b(si)g(on)g(ne)g(se)g
(soucie)h(plus)g(du)f(c)m(hamp)0 4168 y Fe(pere)h Fh(des)h(n\033uds.)f
(C'est)h(d'ailleurs)g(le)f(c)m(hoix)g(qui)h(a)m(v)-5
b(ait)33 b(\023)-46 b(et)m(\023)g(e)37 b(fait)f(dans)h(l')m(\023)-46
b(epreuv)m(e)39 b(d'informatique)0 4288 y(2000)32 b(de)h(Cen)m(tral)g
(don)m(t)g(est)g(inspir)m(\023)-46 b(e)34 b(ce)g(TP)-8
b(.)0 4457 y Ff(13.)p Black Black 0 4611 a Fe(let)52
b(rotation_gauche_droite)57 b(a)52 b(=)103 4731 y(let)g(b=fils_gauche)i
(a)e(in)103 4852 y(rotation_gauche)j(b;)103 4972 y(rotation_droite)g(a)
c(;;)0 5213 y(let)h(rotation_droite_gauche)57 b(b)52
b(=)103 5333 y(let)g(a=fils_droit)i(b)e(in)103 5454 y(rotation_droite)j
(a;)103 5574 y(rotation_gauche)g(b)c(;;)0 5777 y Ff(14.)p
Black Black 0 5931 a Fe(exception)j(FinInsertion)g(;;)p
Black 1885 6180 a Fh(3)p Black eop
%%Page: 4 4
4 3 bop Black 0 84 a Fh(Corrig)m(\023)-46 b(e)33 b(TP2)g
Fg(Caml)2054 b Fh(Arbres)33 b(blancs)h(et)f(noirs)p 0
124 3820 4 v Black 0 527 a Fe(let)52 b(rec)g(insere_blanc)j(x)c(=)h
(function)154 648 y(Vide)g(->)g(Noeud)h({val=x;)g(couleur=Blanc;)i
(gauche=Vide;)f(droit=Vide;)g(pere=Vide})51 768 y(|)e(Noeud)g(n)g(->)g
(if)g(n.val=x)h(then)f(raise)h(FinInsertion)718 888 y(else)f(if)g
(x<n.val)h(then)f(match)h(n.gauche)g(with)872 1009 y(Vide)f(->)g(let)g
(new)g(=)f(Noeud)i({val=x;)g(couleur=Blanc;)i(gauche=Vide;)2410
1129 y(droit=Vide;)f(pere=Noeud)g(n)d(})h(in)1282 1249
y(\(n.gauche)h(<-)f(new;)g(new\))769 1370 y(|)g(_)f(->)h(insere_blanc)i
(x)e(n.gauche)718 1490 y(else)g(match)h(n.droit)g(with)872
1611 y(Vide)f(->)g(let)g(new)g(=)f(Noeud)i({val=x;)g(couleur=Blanc;)i
(gauche=Vide;)2410 1731 y(droit=Vide;)f(pere=Noeud)g(n)d(})h(in)1282
1851 y(\(n.droit)h(<-)f(new;)g(new\))769 1972 y(|)g(_)f(->)h
(insere_blanc)i(x)e(n.droit)0 2092 y(;;)0 2243 y Fh(On)35
b(p)s(eut)g(l\022)-49 b(a)35 b(encore)h(se)f(passer)i(de)e
(l'utilisation)h(des)g(exceptions)h(a)m(v)m(ec)f(un)f(b)s(o)s(ol)m
(\023)-46 b(een)35 b(qui)h(indique)g(si)0 2363 y(la)c(v)-5
b(aleur)33 b Fe(x)g Fh(est)g(d)m(\023)-46 b(ej\022)d(a)33
b(pr)m(\023)-46 b(esen)m(te)35 b(dans)e(l'arbre.)0 2530
y Ff(15.)p Black Black 0 2680 a Fe(let)52 b(rec)g(mauvais_blanc)j(x)c
(=)154 2801 y(let)h(p=pere)h(x)e(in)154 2921 y(match)h(p)g(with)256
3042 y(Vide)258 b(->)52 b(inverse_couleur)j(x;)d(\(*)f(x)h(est)g(la)g
(racine)h(de)e(l'arbre)j(*\))154 3162 y(|)d(Noeud)i(np)f(->)g(match)g
(np.couleur)i(with)461 3282 y(Noir)104 b(->)52 b(\(\))359
3403 y(|)f(Blanc)i(->)f(let)g(o=frere)h(p)f(and)g(g=pere)g(p)g(in)923
3523 y(match)g(couleur)i(o)d(with)974 3643 y(Blanc)i(->)e(\()h
(inverse_couleur)j(p;)667 b(\(*)103 b(cas)52 b(1)103
b(*\))1538 3764 y(inverse_couleur)55 b(o;)1538 3884 y(inverse_couleur)g
(g;)1538 4005 y(mauvais_blanc)g(g)103 b(\))872 4125 y(|)51
b(Noir)104 b(->)51 b(if)h(est_fils_gauche)k(p)51 b(then)1538
4245 y(if)h(est_fils_gauche)j(x)d(then)1641 4366 y(\()f
(rotation_droite)k(g;)462 b(\(*)52 b(cas)g(2.1)g(*\))1743
4486 y(inverse_couleur)j(g;)1743 4607 y(inverse_couleur)g(p)103
b(\))1538 4727 y(else)1641 4847 y(\()51 b(rotation_gauche_droite)57
b(g;)103 b(\(*)52 b(cas)g(2.2)g(*\))1743 4968 y(inverse_couleur)j(g;)
1743 5088 y(inverse_couleur)g(x)103 b(\))1435 5208 y(else)1538
5329 y(if)52 b(est_fils_gauche)j(x)d(then)1641 5449 y(\()f
(rotation_droite_gauche)57 b(g;)103 b(\(*)52 b(cas)g(2.3)g(*\))1743
5570 y(inverse_couleur)j(g;)1743 5690 y(inverse_couleur)g(x)103
b(\))1538 5810 y(else)1641 5931 y(\()51 b(rotation_gauche)k(g;)462
b(\(*)52 b(cas)g(2.4)g(*\))p Black 1885 6180 a Fh(4)p
Black eop
%%Page: 5 5
5 4 bop Black 0 84 a Fh(Corrig)m(\023)-46 b(e)33 b(TP2)g
Fg(Caml)2054 b Fh(Arbres)33 b(blancs)h(et)f(noirs)p 0
124 3820 4 v Black 1743 407 a Fe(inverse_couleur)55 b(g;)1743
527 y(inverse_couleur)g(p)d(\))f(;;)0 682 y Fh(Les)33
b(trois)g(cas)g(manquan)m(ts)h(son)m(t)f(:)797 886 y
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0
11 {InitCnode } NewNode end end

797 886 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 2.66666 add
2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial 1 TeXcolorgray
Fe(g)p Black 468 1123 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0
11 {InitCnode } NewNode end end
 468 1123 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end


@endspecial Fe(p)494 1112 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 494 1112 a 305 1371 a
 tx@Dict begin tx@NodeDict begin {6.53961 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0
11 {InitCnode } NewNode end end
 305
1371 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  6.53961 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)332
1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 332 1349 a 630 1370 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 630 1370 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fe(x)655 1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 655 1349 a 433
1603 a
 tx@Dict begin tx@NodeDict begin {10.19296 2 div 7.60416 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-0
11 {InitCnode } NewNode end end
 433 1603 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.19296 2 div 7.60416
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)478 1617 y Fc(g)475 1585 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 475 1585 a 793 1608 a
 tx@Dict begin tx@NodeDict begin {10.23462 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1
11 {InitCnode } NewNode end end

793 1608 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.23462 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)838
1623 y Fc(d)836 1585 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 836 1585 a 1127 1134 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 1127 1134
a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial 1 TeXcolorgray
Fe(o)p Black 1152 1112 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1152 1112 a 942 1355 a
 tx@Dict begin tx@NodeDict begin {9.57068 2 div 4.71457 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0
11 {InitCnode } NewNode end end
 942 1355
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.57068 2 div 4.71457
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)981 1369
y Fc(g)982 1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 982 1349 a 1283 1361 a
 tx@Dict begin tx@NodeDict begin {9.61234 2 div 4.71457 1.7839 add
2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1
11 {InitCnode } NewNode end end
 1283 1361 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.61234 2 div 4.71457
1.7839 add 2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)1322 1376
y Fc(d)1323 1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1323 1349 a 1766 1269 a Fh(cas)g(2)p
Fb(:)p Fh(2)1668 1301 y Fa(\000)-24 b(\000)j(\000)f(\000)g(\000)h(\000)
f(\000)e(!)2732 898 y
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0 11 {InitCnode
} NewNode end end
 2732 898 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end


@endspecial 1 TeXcolorgray Fe(x)p Black 2382 1123 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0
11 {InitCnode } NewNode end end

2382 1123 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fe(p)2408
1113 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 2408 1113 a 2205 1372 a
 tx@Dict begin tx@NodeDict begin {6.53961 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0
11 {InitCnode } NewNode end end
 2205 1372 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  6.53961 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)2232 1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2232 1349 a
2541 1368 a
 tx@Dict begin tx@NodeDict begin {10.19296 2 div 7.60416 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1
11 {InitCnode } NewNode end end
 2541 1368 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.19296 2 div 7.60416
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)2586 1382 y Fc(g)2584 1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2584 1349 a 3082 1123
a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1
11 {InitCnode } NewNode end end
 3082 1123 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fe(g)3108 1113 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 3108 1113 a 2902 1372 a
 tx@Dict begin tx@NodeDict begin {10.23462 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0
11 {InitCnode } NewNode end end
 2902 1372 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.23462 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)2947 1387
y Fc(d)2945 1349 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2945 1349 a 3246 1371 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 3246 1371
a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial 1 TeXcolorgray
Fe(o)p Black 3271 1349 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3271 1349 a 3061 1592 a
 tx@Dict begin tx@NodeDict begin {9.57068 2 div 4.71457 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1-0
11 {InitCnode } NewNode end end
 3061
1592 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.57068 2 div 4.71457
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)3100
1606 y Fc(g)3100 1586 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-1 /N@T-0-1-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3100 1586 a 3402 1598 a
 tx@Dict begin tx@NodeDict begin {9.61234 2 div 4.71457 1.7839 add
2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1-1
11 {InitCnode } NewNode end end
 3402
1598 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.61234 2 div 4.71457
1.7839 add 2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)3441
1613 y Fc(d)3442 1586 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-1 /N@T-0-1-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3442 1586 a 807 1871 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0
11 {InitCnode } NewNode end end
 807 1871
a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 2.66666 add
2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial 1 TeXcolorgray
Fe(g)p Black 480 2119 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 480 2119 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end


@endspecial 1 TeXcolorgray Fe(o)p Black 505 2098 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 505
2098 a 295 2340 a
 tx@Dict begin tx@NodeDict begin {9.57068 2 div 4.71457 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0
11 {InitCnode } NewNode end end
 295 2340 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.57068 2 div 4.71457
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end


@endspecial Fd(c)334 2354 y Fc(g)335 2334 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 335 2334
a 636 2346 a
 tx@Dict begin tx@NodeDict begin {9.61234 2 div 4.71457 1.7839 add
2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1
11 {InitCnode } NewNode end end
 636 2346 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.61234 2 div 4.71457
1.7839 add 2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(c)675 2361 y Fc(d)676 2334 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 676 2334 a 1135 2108
a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1
11 {InitCnode } NewNode end end
 1135 2108 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fe(p)1161 2098 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1161 2098 a 973 2355 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end
 973 2355 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fe(x)999 2334 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 999 2334 a 776
2588 a
 tx@Dict begin tx@NodeDict begin {10.19296 2 div 7.60416 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0-0
11 {InitCnode } NewNode end end
 776 2588 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.19296 2 div 7.60416
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)821 2602 y Fc(g)819 2570 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 819 2570 a 1137 2593
a
 tx@Dict begin tx@NodeDict begin {10.23462 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0-1
11 {InitCnode } NewNode end end
 1137 2593 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.23462 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)1182 2608 y Fc(d)1180 2570 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-0 /N@T-0-1-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1180 2570 a 1296 2357
a
 tx@Dict begin tx@NodeDict begin {6.53961 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1
11 {InitCnode } NewNode end end
 1296 2357 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  6.53961 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)1323 2334 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1323 2334 a 1766 2254 a Fh(cas)33 b(2)p
Fb(:)p Fh(3)1668 2286 y Fa(\000)-24 b(\000)j(\000)f(\000)g(\000)h(\000)
f(\000)e(!)2895 1884 y
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0 11 {InitCnode
} NewNode end end
 2895 1884 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end


@endspecial 1 TeXcolorgray Fe(x)p Black 2545 2109 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0
11 {InitCnode } NewNode end end

2545 2109 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fe(g)2570
2098 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 2570 2098 a 2380 2356 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end
 2380 2356 a @beginspecial
@setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial 1 TeXcolorgray Fe(o)p Black
2405 2335 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2405 2335 a 2195 2577 a
 tx@Dict begin tx@NodeDict begin {9.57068 2 div 4.71457 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-0
11 {InitCnode } NewNode end end
 2195 2577 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.57068 2 div 4.71457
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)2234 2591 y Fc(g)2235 2571
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2235 2571 a 2536 2583 a
 tx@Dict begin tx@NodeDict begin {9.61234 2 div 4.71457 1.7839 add
2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-1
11 {InitCnode } NewNode end end
 2536 2583 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.61234 2 div 4.71457
1.7839 add 2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end


@endspecial Fd(c)2575 2598 y Fc(d)2576 2571 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2576 2571
a 2693 2353 a
 tx@Dict begin tx@NodeDict begin {10.19296 2 div 7.60416 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1
11 {InitCnode } NewNode end end
 2693 2353 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.19296 2 div 7.60416
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)2738 2367 y Fc(g)2735 2335 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2735 2335 a 3245 2109
a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1
11 {InitCnode } NewNode end end
 3245 2109 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fe(p)3270 2098 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 3270 2098 a 3053 2357 a
 tx@Dict begin tx@NodeDict begin {10.23462 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0
11 {InitCnode } NewNode end end
 3053 2357 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.23462 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)3098 2372
y Fc(d)3096 2335 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3096 2335 a 3417 2357 a
 tx@Dict begin tx@NodeDict begin {6.53961 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1
11 {InitCnode } NewNode end end
 3417 2357
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  6.53961 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)3445 2335
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3445 2335 a 815 2811 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0
11 {InitCnode } NewNode end end
 815 2811 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 2.66666 add
2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add SD end


@endspecial 1 TeXcolorgray Fe(g)p Black 480 3059 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 480
3059 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial 1 TeXcolorgray
Fe(o)p Black 505 3037 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 505 3037 a 295 3280 a
 tx@Dict begin tx@NodeDict begin {9.57068 2 div 4.71457 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0
11 {InitCnode } NewNode end end
 295 3280
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.57068 2 div 4.71457
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)334 3294
y Fc(g)335 3274 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 335 3274 a 636 3286 a
 tx@Dict begin tx@NodeDict begin {9.61234 2 div 4.71457 1.7839 add
2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1
11 {InitCnode } NewNode end end
 636 3286 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.61234 2 div 4.71457
1.7839 add 2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(c)675 3301 y Fc(d)676 3274
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 676 3274 a 1151 3048 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1
11 {InitCnode } NewNode end end
 1151 3048 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end


@endspecial Fe(p)1177 3037 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1177 3037 a 988 3296 a
 tx@Dict begin tx@NodeDict begin {6.53961 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0
11 {InitCnode } NewNode end end

988 3296 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  6.53961 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fd(f)1015
3274 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1015 3274 a 1313 3295 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 1313 3295 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fe(x)1338 3274 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1338 3274 a
1115 3528 a
 tx@Dict begin tx@NodeDict begin {10.19296 2 div 7.60416 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1-0
11 {InitCnode } NewNode end end
 1115 3528 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.19296 2 div 7.60416
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)1160 3542 y Fc(g)1158 3510 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-1 /N@T-0-1-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1158 3510 a 1476 3532
a
 tx@Dict begin tx@NodeDict begin {10.23462 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1-1
11 {InitCnode } NewNode end end
 1476 3532 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.23462 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)1521 3547 y Fc(d)1519 3510 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-1 /N@T-0-1-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1519 3510 a 1766 3194
a Fh(cas)33 b(2)p Fb(:)p Fh(4)1668 3226 y Fa(\000)-24
b(\000)j(\000)f(\000)g(\000)h(\000)f(\000)e(!)2884 2816
y
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0
11 {InitCnode } NewNode end end
 2884 2816 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 2.66666 add
2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial
1 TeXcolorgray Fe(p)p Black 2538 3053 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 2.66666 add 2
div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0
11 {InitCnode } NewNode end end
 2538 3053 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
2.66666 add 2 div 2 copy 2.66666 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fe(g)2564 3042 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 2564 3042 a
2380 3300 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.0 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end
 2380 3300 a @beginspecial @setspecial
 tx@Dict begin STP 0  setgray newpath 6.175 2 div 5.16667 0.0 add 2
div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add SD end
 
@endspecial
1 TeXcolorgray Fe(o)p Black 2405 3278 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2405 3278 a 2195
3521 a
 tx@Dict begin tx@NodeDict begin {9.57068 2 div 4.71457 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-0
11 {InitCnode } NewNode end end
 2195 3521 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.57068 2 div 4.71457
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(c)2234 3535 y Fc(g)2235 3515 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2235 3515 a 2536 3527
a
 tx@Dict begin tx@NodeDict begin {9.61234 2 div 4.71457 1.7839 add
2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-1
11 {InitCnode } NewNode end end
 2536 3527 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  9.61234 2 div 4.71457
1.7839 add 2 div 2 copy 1.7839 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(c)2575 3542 y Fc(d)2576 3515 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2576 3515 a 2695 3301
a
 tx@Dict begin tx@NodeDict begin {6.53961 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1
11 {InitCnode } NewNode end end
 2695 3301 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  6.53961 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)2722 3278 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2722 3278 a 3229 3064 a
 tx@Dict begin tx@NodeDict begin {6.175 2 div 5.16667 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 3229 3064 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  6.175 2 div 5.16667
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fe(x)3255 3042
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 3255 3042 a 3032 3297 a
 tx@Dict begin tx@NodeDict begin {10.19296 2 div 7.60416 3.19804 add
2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0
11 {InitCnode } NewNode end end
 3032 3297 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.19296 2 div 7.60416
3.19804 add 2 div 2 copy 3.19804 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end


@endspecial Fd(f)3077 3311 y Fc(g)3074 3278 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3074 3278
a 3393 3301 a
 tx@Dict begin tx@NodeDict begin {10.23462 2 div 7.60416 2.12917 add
2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1
11 {InitCnode } NewNode end end
 3393 3301 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1  setgray  10.23462 2 div 7.60416
2.12917 add 2 div 2 copy 2.12917 sub 4 2 roll Pyth 3.0 add CLW 2 div
add 0 360 arc closepath gsave 0.8 SLW 1  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fd(f)3438 3316 y Fc(d)3435 3278 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3435 3278 a 0 3836
a Ff(16.)25 b Fh(L'insertion)h(d'une)g(nouv)m(elle)h(v)-5
b(aleur)26 b(p)s(eut)f(pro)m(v)m(o)s(quer)h(un)g(c)m(hangemen)m(t)h(de)
e(racine)h(dans)g(l'arbre.)0 3956 y(On)33 b(mo)s(di\014e)g(donc)g(les)g
(fonctions)g(pr)m(\023)-46 b(ec)m(\023)g(eden)m(tes)36
b(p)s(our)c(en)m(v)m(o)m(y)m(er)j(la)e(v)-5 b(aleur)33
b(de)g(la)f(racine)h(:)p Black Black 0 4111 a Fe(let)52
b(est_racine)i(a)e(=)f(\(pere)i(a\)=Vide)g(;;)0 4352
y(let)f(rec)g(mauvais_blanc)j(val_racine)f(x)d(=)154
4472 y(let)h(p=pere)h(x)e(in)154 4592 y(match)h(p)g(with)256
4713 y(Vide)258 b(->)52 b(\()f(inverse_couleur)k(x;)103
b(\(*)52 b(x)g(est)g(la)g(racine)g(de)g(l'arbre)h(*\))974
4833 y(valeur)g(x)e(\))154 4953 y(|)g(Noeud)i(np)f(->)g(match)g
(np.couleur)i(with)410 5074 y(Noir)104 b(->)52 b(val_racine)308
5194 y(|)f(Blanc)i(->)f(let)g(o=frere)h(p)e(and)h(g=pere)h(p)f(in)872
5315 y(match)g(couleur)h(o)f(with)923 5435 y(Blanc)g(->)g(\()g
(inverse_couleur)j(p;)616 b(\(*)103 b(cas)52 b(1)103
b(*\))1487 5555 y(inverse_couleur)55 b(o;)1487 5676 y(inverse_couleur)g
(g;)1487 5796 y(mauvais_blanc)f(val_racine)g(g)154 b(\))820
5917 y(|)52 b(Noir)103 b(->)52 b(if)g(est_fils_gauche)j(p)d(then)p
Black 1885 6180 a Fh(5)p Black eop
%%Page: 6 6
6 5 bop Black 0 84 a Fh(Corrig)m(\023)-46 b(e)33 b(TP2)g
Fg(Caml)2054 b Fh(Arbres)33 b(blancs)h(et)f(noirs)p 0
124 3820 4 v Black 1487 407 a Fe(if)52 b(est_fils_gauche)j(x)c(then)
1589 527 y(\()h(rotation_droite)j(g;)462 b(\(*)52 b(cas)g(2.1)g(*\))
1692 648 y(inverse_couleur)j(g;)1692 768 y(inverse_couleur)g(p;)1692
888 y(if)d(\(est_racine)i(p\))e(then)g(valeur)h(p)2615
1009 y(else)f(val_racine)i(\))1487 1129 y(else)1589 1249
y(\()e(rotation_gauche_droite)57 b(g;)103 b(\(*)52 b(cas)g(2.2)g(*\))
1692 1370 y(inverse_couleur)j(g;)1692 1490 y(inverse_couleur)g(x;)1692
1611 y(if)d(\(est_racine)i(x\))e(then)g(valeur)h(x)2615
1731 y(else)f(val_racine)i(\))1384 1851 y(else)1487 1972
y(if)e(est_fils_gauche)j(x)c(then)1589 2092 y(\()h
(rotation_droite_gauche)57 b(g;)103 b(\(*)52 b(cas)g(2.3)g(*\))1692
2213 y(inverse_couleur)j(g;)1692 2333 y(inverse_couleur)g(x;)1692
2453 y(if)d(\(est_racine)i(x\))e(then)g(valeur)h(x)2615
2574 y(else)f(val_racine)i(\))1487 2694 y(else)1589 2814
y(\()e(rotation_gauche)j(g;)462 b(\(*)52 b(cas)g(2.4)g(*\))1692
2935 y(inverse_couleur)j(g;)1692 3055 y(inverse_couleur)g(p;)1692
3176 y(if)d(\(est_racine)i(p\))e(then)g(valeur)h(p)2615
3296 y(else)f(val_racine)i(\))d(;;)0 3657 y(let)h(insere)h(x)e(a=)103
3778 y(try)h(\(mauvais_blanc)j(\(valeur)e(a\))f(\(insere_blanc)i(x)e
(a\)\))103 3898 y(with)g(FinInsertion)i(->)e(\(valeur)h(a\))f(;;)p
Black 1885 6180 a Fh(6)p Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
