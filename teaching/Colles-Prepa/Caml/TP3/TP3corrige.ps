%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP3corrige.dvi
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP3corrige.ps TP3corrige.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.27:0943
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin /setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse /TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def /TeXcolorgrey{setgray}def /TeXcolorgray{
setgray}def /TeXcolorhsb{sethsbcolor}def /currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse /DC{exch dup userdict exch
known{pop pop}{X}ifelse}B /GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC /Goldenrod{0 0.10 0.84 0 setcmykcolor}
DC /Dandelion{0 0.29 0.84 0 setcmykcolor}DC /Apricot{0 0.32 0.52 0
setcmykcolor}DC /Peach{0 0.50 0.70 0 setcmykcolor}DC /Melon{0 0.46 0.50
0 setcmykcolor}DC /YellowOrange{0 0.42 1 0 setcmykcolor}DC /Orange{0
0.61 0.87 0 setcmykcolor}DC /BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC /RedOrange{0 0.77 0.87 0
setcmykcolor}DC /Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC /Maroon{0
0.87 0.68 0.32 setcmykcolor}DC /BrickRed{0 0.89 0.94 0.28 setcmykcolor}
DC /Red{0 1 1 0 setcmykcolor}DC /OrangeRed{0 1 0.50 0 setcmykcolor}DC
/RubineRed{0 1 0.13 0 setcmykcolor}DC /WildStrawberry{0 0.96 0.39 0
setcmykcolor}DC /Salmon{0 0.53 0.38 0 setcmykcolor}DC /CarnationPink{0
0.63 0 0 setcmykcolor}DC /Magenta{0 1 0 0 setcmykcolor}DC /VioletRed{0
0.81 0 0 setcmykcolor}DC /Rhodamine{0 0.82 0 0 setcmykcolor}DC /Mulberry
{0.34 0.90 0 0.02 setcmykcolor}DC /RedViolet{0.07 0.90 0 0.34
setcmykcolor}DC /Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC /Lavender{0
0.48 0 0 setcmykcolor}DC /Thistle{0.12 0.59 0 0 setcmykcolor}DC /Orchid{
0.32 0.64 0 0 setcmykcolor}DC /DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}
DC /Purple{0.45 0.86 0 0 setcmykcolor}DC /Plum{0.50 1 0 0 setcmykcolor}
DC /Violet{0.79 0.88 0 0 setcmykcolor}DC /RoyalPurple{0.75 0.90 0 0
setcmykcolor}DC /BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC /Periwinkle
{0.57 0.55 0 0 setcmykcolor}DC /CadetBlue{0.62 0.57 0.23 0 setcmykcolor}
DC /CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC /MidnightBlue{0.98 0.13
0 0.43 setcmykcolor}DC /NavyBlue{0.94 0.54 0 0 setcmykcolor}DC
/RoyalBlue{1 0.50 0 0 setcmykcolor}DC /Blue{1 1 0 0 setcmykcolor}DC
/Cerulean{0.94 0.11 0 0 setcmykcolor}DC /Cyan{1 0 0 0 setcmykcolor}DC
/ProcessBlue{0.96 0 0 0 setcmykcolor}DC /SkyBlue{0.62 0 0.12 0
setcmykcolor}DC /Turquoise{0.85 0 0.20 0 setcmykcolor}DC /TealBlue{0.86
0 0.34 0.02 setcmykcolor}DC /Aquamarine{0.82 0 0.30 0 setcmykcolor}DC
/BlueGreen{0.85 0 0.33 0 setcmykcolor}DC /Emerald{1 0 0.50 0
setcmykcolor}DC /JungleGreen{0.99 0 0.52 0 setcmykcolor}DC /SeaGreen{
0.69 0 0.50 0 setcmykcolor}DC /Green{1 0 1 0 setcmykcolor}DC
/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC /PineGreen{0.92 0 0.59
0.25 setcmykcolor}DC /LimeGreen{0.50 0 1 0 setcmykcolor}DC /YellowGreen{
0.44 0 0.74 0 setcmykcolor}DC /SpringGreen{0.26 0 0.76 0 setcmykcolor}
DC /OliveGreen{0.64 0 0.95 0.40 setcmykcolor}DC /RawSienna{0 0.72 1 0.45
setcmykcolor}DC /Sepia{0 0.83 1 0.70 setcmykcolor}DC /Brown{0 0.81 1
0.60 setcmykcolor}DC /Tan{0.14 0.42 0.56 0 setcmykcolor}DC /Gray{0 0 0
0.50 setcmykcolor}DC /Black{0 0 0 1 setcmykcolor}DC /White{0 0 0 0
setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP3corrige.dvi)
@start
%DVIPSBitmapFont: Fa cmmi6 6 1
/Fa 1 111 df<000F13FC381FC3FF3931C707803861EC0301F813C0EAC1F0A213E03903
C00780A3EC0F00EA0780A2EC1E041506D80F00130C143C15181538001EEB1C70EC1FE000
0CEB07801F177D9526>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr6 6 1
/Fb 1 50 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>49
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy8 8 1
/Fc 1 1 df<B812C0A32A037A9137>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr8 8 5
/Fd 5 62 df<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F00A212
1EA35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00F0
13701338131C130E1307130310437AB11B>40 D<12C07E12707E7E7E120FEA0780120313
C0EA01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378A3
13F0A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B>I<130C133C13
7CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23>49
D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC14F0
7E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A495A49
5A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FCA21C
2C7DAB23>I<007FB712F8B812FCA2CBFCADB812FCA26C16F82E137C9937>61
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmex10 12 1
/Fe 1 89 df<C27E8DA38D6C01C0CC12036EDF0001816C6DF200076C6DE1007F7F6C1E0F
6E1C016C6D766C7E6C6D1D1F6CF707FE6F1C036C6EF400FF6D6D896D8B6FF51F806D6D1D
0F6DF707C06F1D036D6DF501E06D6D1D007F701D706D806E6D1D386E1F00826E7F6E7F80
826E7F80836E806F7F81836F7F6F7F81836F7F816F8084707F8284707F707F8284707F70
808285717F83717F85717F8385717F718083A27290CEFC725A725A61725A61181F4E5A61
4ECFFC18FE4D5A4D5A17074D5A604D5A4D5A4DD0FC17FE16014C5A5F4C5A4C5A4C5A4C5A
167F4CD1FC5E4B5A4B5A4B5A150F4B5A4B5A4C1D384BD1127015FE4A481EF002031FE04A
481D014B1D034A481EC04A481D074A48F50F804AD1121F4A1E3F4948F6FF004A6549481D
074948535A49481D3F494852B45A013F1D0749481C3F91CF0003B55A01FE1C7F484850B7
FC48C15A5A48685AA248685AC2FC69858B7B7F90>88 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi8 8 3
/Ff 3 111 df<EB07E0EB1FF890387C1CE0EBF80D3801F00F3803E007EA07C0120FD81F
8013C0A2EA3F00140F481480127EA2141F00FE14005AA2EC3F02EC3E06A25AEC7E0E007C
EBFE0C14FC0101131C393E07BE18391F0E1E38390FFC0FF03903F003C01F1F7D9D25>97
D<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA2120115F89038F003FCEC0F
0E0003EB1C1EEC387EEBE07014E03807E1C09038E3803849C7FC13CEEA0FDC13F8A2EBFF
80381F9FE0EB83F0EB01F81300481404150C123EA2007E141C1518007CEBF038ECF83000
FC1470EC78E048EB3FC00070EB0F801F2F7DAD25>107 D<3907C007E0391FE03FF83918
F8783E393879E01E39307B801F38707F00126013FEEAE0FC12C05B00815C0001143E5BA2
0003147E157C5B15FC0007ECF8081618EBC00115F0000F1538913803E0300180147016E0
001F010113C015E390C7EAFF00000E143E251F7E9D2B>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmsy10 12 5
/Fg 5 80 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<121FEA3F80EA7FC0EAFF
E0A5EA7FC0EA3F80EA1F000B0B789E1C>I<19E0F003F0180FF03FE0F0FF80943803FE00
EF0FF8EF3FE0EFFF80DC03FEC7FCEE0FF8EE3FE0EEFF80DB03FEC8FCED1FF8ED7FE09138
01FF80DA07FEC9FCEC1FF0EC7FC04948CAFCEB07FCEB1FF0EB7FC04848CBFCEA07FCEA1F
F0EA7FC048CCFCA2EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF903800
7FC0EC1FF0EC07FC913801FF809138007FE0ED1FF8ED07FE923800FF80EE3FE0EE0FF8EE
03FE933800FF80EF3FE0EF0FF8EF03FE943800FF80F03FE0F00FF01803F000E01900B000
7FB912E0BA12F0A26C18E03C4E78BE4D>20 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01
FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FC913801FF809138007FE0ED
1FF8ED07FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FE0EF0FF8EF03FE943800
FF80F03FE0F00FF0A2F03FE0F0FF80943803FE00EF0FF8EF3FE0EFFF80DC03FEC7FCEE0F
F8EE3FE0EEFF80DB03FEC8FCED1FF8ED7FE0913801FF80DA07FEC9FCEC1FF0EC7FC04948
CAFCEB07FCEB1FF0EB7FC04848CBFCEA07FCEA1FF0EA7FC048CCFC12FC1270CDFCB0007F
B912E0BA12F0A26C18E03C4E78BE4D>I<DB01C0EB3FC0923A078001FFF892261F000F13
FE033E013F7F03FC90B61280912601F00115C0912803E007E03F13E0913A0FC00F800791
281F001F000113F0023E013E7F4A49EC7FF84A01FC143F49484848EC1FFC4948485A0107
0107150FD90FC05B49484848EC07FE90383F001F5E017E133F01FE49C81203485A4913FE
00035C4A5AD807F05B000F148049CAFCA2001F19FC5B123FA21907007F19F85BA21AF019
0F12FF1AE0191F1AC0A2F13F80A2F17F007F19FE614E5A127F6D4C5A4E5A6D4C5A616C6C
4CC7FC183E6C6C5E6D5E6C6CED03F06EEC07C06C01E04A5A6E023FC8FC6C01FC14FC6C90
39FFC00FF86C91B512E06D1580011F4AC9FC6D14F0010391CAFC9038003FF047487AC54F
>79 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi12 12 12
/Fh 12 111 df<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A78891B>58
D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212
065AA25A5A12200B1D78891B>I<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0
EB1FF0EB07FE903801FF809038007FE0EC1FF8EC03FE913800FF80ED3FE0ED0FF8ED03FF
030013C0EE3FF0EE0FFCEE01FF9338007FC0EF1FF0EF07FCEF01FF9438007FC0F01FE0A2
F07FC0943801FF00EF07FCEF1FF0EF7FC04C48C7FCEE0FFCEE3FF0EEFFC0030390C8FCED
0FF8ED3FE0EDFF80DA03FEC9FCEC1FF8EC7FE0903801FF80D907FECAFCEB1FF0EB7FC048
48CBFCEA07FCEA1FF0EA7FC048CCFC12FC12703B3878B44C>62 D<91267FFFC0933803FF
FE91B55F6E4E13FC0200F1FE00DB6FE0EE1BF8A203CF4D5A1B67A21BC7DA018F4C485AA2
DB87F0ED030FA2DA03079338061FC01A0CA21A1802064D485AA26F6C1560A2020C4D48C7
FCF10180A2F103000218040613FEA26F6C5CA202304C485A1930A2196002604C485AA26F
6CEB0180A24A4B48485A1806A26049484B495AA2047F5BA249C74A495A60A24D5A01064B
C7485AA2EE3F86A249038C4AC8FC1798A217B04903E014FEA2705A133801784B495A01FC
92C7FCD803FFEF07FE007F01F0011E0103B512FCB56C011C49804A010C5E5F447BC35E>
77 D<48B912FE19FF5A9026FE000190380003FE01F04AEB007ED807C0171E49495A48C7
FC000E180E190C484A5A1218A2123800304A5A191C481818A24B5A5AA2481810C8484814
00A44B5AA44BC9FCA44A5AA44A5AA44A5AA44A5AA44A5AA44A5AA44A5AA44ACAFC810107
7F001FB612F048815E40447DC339>84 D<EC0FC0EC7FE0903901F03038903903C0187C90
3907800CFC90381F0006013EEB07F8491303A25B00015D485AA2485A000F4A5A5B121FA2
49495A123FA348C7485AA4007E4AC7FCA212FE1720037E1360A2127EA24B13C0A2003E13
010203EB0180EC067C6C010CEB03006CEB183C2607807013063A03C1E01E1C3A01FF800F
F83A007E0003E02B2D7CAB33>97 D<14FE137FA25C13011300A2495AA4495AA4495AA449
5AA4495AA2ED7F80913881FFE090393F0780F091380E00780218137C4A7FEB7E605CD97F
80133F91C7FC5B5B5BA24848147EA448485CA34B5A485AA24B5AA2485A4B5AA217024848
90380FC006A392381F800C48C7FCA2EE00181730127E176017C092380F01804891380787
00007CEC03FE0038EC00F82F467BC438>104 D<141E143F147F14FFA3147E14381400AE
133EEBFF803801C3C0380301E01206000C13F0A2121813031230A21260EB07E0A238C00F
C0A21200EB1F80A3EB3F00A2137EA35BA2485AA214013803F003A33807E006A3EBC00CA2
1418A21430000313603801E1C03800FF80EB3E0018437DC121>I<14FE137FA25C130113
00A2495AA4495AA4495AA4495AA4495AA2163FEEFF80903A3F0003C0C092380703E0ED0C
07ED180F017EEB301F156015C0913901800FC0903AFC03000700020690C7FC5C5C48485A
5C5CEBFB8048B4C9FCA214F0EBF3FC3807E07FEC1F80EC07C08148486C7EA31780D81F80
1401A4D83F009038E00300A21606A2127E5E02015BEC00F048EC7070007CEC3FE00038EC
0F802B467BC433>107 D<EB03F8EA01FFA214F0EA00071303A2EB07E0A4EB0FC0A4EB1F
80A4EB3F00A4137EA45BA4485AA4485AA4485AA4485AA4485AA448C7FCA31440007E13C0
A438FC0180A3EB0300127CA2EA3C065BEA1E1CEA0FF8EA03E015467CC41D>I<01FCD903
FC14FF486CD90FFF010313C03E0307803C07800F01E00006913B7003C01C00F0270C03C0
C0D9E0307F00189028E18001F060137CDAE3005C02E6ECF180003001EC02FBC7127E02F8
14FE13070060495C4A5CA248484849485CA21200A249484948495AA34F5A49C7485AA24F
5AA2017E4A5A4F5AA21B04494AC7381F800CA396383F00184848147EA2073E13301B6048
485C1BC0F2018096381E030048484948EC0F0E00030200ED07FC6C480270EC01F04E2D7D
AB55>I<01FCEB03F8486CEB1FFE3B0307803C0F8000069138E007C03A0C03C1C0030018
D9E3007F14E683003013EC14F8495A12605CA2484848495AA21200A24948495AA34C5A49
C7FCA24CC7FCA2137E167EA21820494A1360A34B4813C0485AA29338F00180EF0300485A
17065F03005B4848EC78700003ED3FE06C48EC0F80332D7DAB3A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmtt12 12 50
/Fi 50 126 df<121C127FEAFF80B3A3EA7F00B3A2123EC7FCA9121C127FA2EAFF80A3EA
7F00A2121C093E6BBD33>33 D<00085B003EEB07C0007FEB0FE0A24814F0A26C14E0B3A2
007E1307003E14C0A20008EB01001C1E75BD33>I<EB03E0EB0FF8497E497E497E90B5FC
9038FE3F803801FC1F13F8000380EBF00FA7141F5D91393F87FFE001F84913F00001137F
147E14FE9026F9FC0713E001FF903801F8006C13F8ECF00302E05B1507D97FC05B148090
38FF000F485D148048141F4801C05B5A391FEFE03FD83FC791C7FC903887F07FD87F0313
7EECF8FE6D6C5A12FEEB00FF6E5AA291393FF00180EE03C091391FE007E0140F6CEB1FF0
6C133FEC7FF8903980FFFE0FD83FC301FF13C0D9FFFC13FF6C496C13806C497E6CD9E00F
13006C90388007FE3A00FE0001F82C3F7DBD33>38 D<140FEC3F80147F14FF491300495A
EB07F8495A495A495A495A49C7FC5B12015B485A12075B120F5B121F5BA2123F5BA2127F
90C8FCA45A5AAD7E7EA47F123FA27F121FA27F120F7F12077F12036C7E7F12007F6D7E6D
7E6D7E6D7E6D7EEB03FE6D7E6D1380147F143FEC0F00194D6FC433>40
D<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E6C7E6C7E6D7E133F80131F6D7E8013078013
03801301A2801300A28080A41580143FAD147F1500A45C5CA213015CA213035C13075C13
0F5C495A133F5C137F49C7FC485A485A485A485AEA3FE0485A485A90C8FC5A1278194D78
C433>I<14F0497EA8007015E000F8EC01F000FE140700FF140F01C1133F01F113FF263F
F9F913C0000FB61200000314FCC614F06D5B011F1380D907FEC7FC90381FFF80017F13E0
90B57E000314FC000F14FF263FF9F913C026FFF1F813F001C1133F0101130F00FE140700
F814010070EC00E000001500A86D5A242B79B333>I<141FA24A7EB0007FB71280A2B812
C0A36C1680A2C7D83F80C7FCB06EC8FCA22A2B7CB333>I<EA07C0EA0FF0EA1FF8123F13
FCA213FEA2121F120F1207EA007E13FEA213FC1201EA03F81207EA0FF0EA7FE012FF13C0
13005A12780F196E8A33>I<007FB612FEA2B8FCA36C15FEA228077BA133>I<121FEA3F80
EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B6C8A33>I<167816F8ED01FCA21503A2ED07
F8A2ED0FF0A2ED1FE0A216C0153FA2ED7F80A2EDFF00A24A5AA25D1403A24A5AA24A5AA2
4A5AA25D143FA24A5AA24AC7FCA2495AA25C1303A2495AA2495AA25C131FA2495AA2495A
A249C8FCA25B1201A2485AA2485AA2485AA25B121FA2485AA2485AA248C9FCA25AA2127C
A2264D7AC433>I<14FF010313C0010F13F0497F497F497F9038FF81FF3A01FE007F8048
48EB3FC049131F4848EB0FE0A24848EB07F0A24848EB03F8A24848EB01FCA348C812FEA4
007E157E00FE157FAE6C15FF6C15FEA46D1301003F15FCA26D1303001F15F8A26C6CEB07
F0A26C6CEB0FE06D131F6C6CEB3FC0A26CB4EBFF806C018113006DB45A6D5B6D5B6D5B01
0313C0010090C7FC283F7BBD33>I<EB01E0497EA21307A2130FA2131F133F137F13FF12
03123F5AEAFFF713E71387EA7E071200B3B3A2003FB512FE48801680A216006C5C213E76
BD33>I<EB03FF011F13E0017F13FC48B57E48ECFF804815C0260FFE0313E03A1FF0007F
F049EB1FF84848130F49EB03FC127F90C7EA01FE4814005A6C15FF167FA3127E123CC9FC
A216FF16FEA2150116FC150316F81507ED0FF0ED1FE0153F16C0ED7F80EDFF004A5AEC07
FC4A5A4A5A4A5A4A5A4A5A4990C7FC495AEB07F8EB1FF0495A495A495A4890C8FC484814
3E4848147FEA0FF0485A48B7FCB8FCA37E6C15FE283E7BBD33>I<121FEA3F80EA7FC0EA
FFE0A5EA7FC0EA3F80EA1F00C7FCB3A3121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F
000B2B6CAA33>58 D<EA07C0EA0FE0EA1FF0EA3FF8A5EA1FF0EA0FE0EA07C0C7FCB3A3EA
07C0EA0FE0EA1FF0EA3FF8A213FCA3121F120F12071200A2120113F81203EA07F0120FEA
1FE0127FEAFFC01380130012FC12700E396EAA33>I<1608163E16FF5D15075DED3FFEED
7FFC913801FFF0020713E04A1380023F1300EC7FFC49485A4913E0010F13804990C7FCEB
7FFC495A000313E0485B001F90C8FCEA7FFE13F8485A13C013F06C7E13FEEA1FFF000713
C06C7FC613F86D7EEB1FFF6D7F010313E06D13F86D6C7E6EB4FC020F13806E13E0020113
F09138007FFCED3FFEED0FFF81150181163E160828337BB733>I<007FB71280A2B812C0
A36C16806C1600CBFCA9003FB7FC481680B812C0A36C1680A22A177CA933>I<1210127C
B4FC7F13E07FEA7FFC6C7E380FFF806C13E000017F6C13FCEB3FFE6D6C7E01077F010113
F06D7FEC3FFE6E7E020713C06E13E0020013F8ED7FFE151FED0FFF1503150FED1FFE157F
EDFFF8020313E04A13C0021F13004A5AECFFF8495B010713C0011F5B4948C7FCEBFFFC48
13F000075B481380D83FFEC8FC485AEAFFF05B138090C9FC127C121028337BB733>I<D8
7FFC90381FFFE0486C4913F07FA36C6D6C13E00003913800FC0013F780A213F380A3EBF1
F0A38013F0A280A2147C147EA2143E143FA2801580A3140F15C0A2140715E0A2140315F0
A21401A215F81400A3157CA3153C153EA2151E151F387FFF80B5EAC00FA315076C496C5A
2C3D7DBC33>78 D<D87FFF903803FFF8B56C4813FCA46C496C13F8D807F09038003F806D
147F00031600A36D5C00015DA46C6C495AA46D13036D5CA3EC8007013F5CA3ECC00F011F
5CA46D6C485AA46D6C485AA4010391C7FC6E5AA30101137EA2ECFCFEA201005BA5EC7FF8
A46E5AA26E5A6E5A2E3E7EBC33>86 D<007FB512C0B612E0A415C048C8FCB3B3B3ABB612
C015E0A46C14C01B4D6CC433>91 D<007FB512C0B612E0A47EC7120FB3B3B3AB007FB5FC
B6FCA46C14C01B4D7DC433>93 D<007FB612FEA2B8FCA36C15FEA228077B7D33>95
D<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F6C48806C4813
1FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00EA3FF0EA7FC0
5B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C14F36C14C1C6
9138003FF0D91FF090C7FC2D2E7BAC33>97 D<EA3FFC487E12FFA2127F123F1200ABEC01
FE91380FFFC04A13F0027F7F91B512FE90B7FCECFE07DAF800138002E0EB7FC04AEB3FE0
4A131FEE0FF091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17
E06E131FEE3FC06E137F9139F801FF80DAFE07130091B55A495C6E5BD97E3F13E0D93C0F
138090260003FEC7FC2E3E7FBC33>I<ECFFF0010713FE011FEBFF804914C04914E048B6
12F048EBC01F9038FE000F485A485A4848EB07E049EB03C0484890C7FC5BA2127F90C9FC
A25A5AA97E7EA27F003FEC01F06DEB03F86C7E6D13076C6C14F06C6C130F01FFEB1FE06C
EBE07F6C90B512C06C1580013F14006D13FC01075B010013C0252E79AC33>I<ED7FF84B
7E5CA280157F1501ABEB01FF010713C1011F13F1017F13F990B6FC5A4813813907FE003F
D80FF8131F49130F48481307491303123F491301127F90C7FCA25A5AA97E7E15037F123F
6D1307A26C6C130F6D131F6C6C133F6C6C137F2603FF81B512F091B612F8C602FD13FC6D
13F96D01E113F8010F018013F0D901FEC8FC2E3E7DBC33>I<ECFF80010713F0011F13FC
497F90B6FC48158048018013C03A07FE003FE001F8EB0FF048481307484814F849130300
3F15FC491301127F90C7FC16FE15005A5AB7FCA516FC48C9FC7E7EA36C7E167C6C6C14FE
7F6C7E6D13016C6CEB03FC6CB4130F6C9038C03FF86C90B512F06D14E06D14C0010F1400
010313FC9038007FE0272E7BAC33>I<ED3FE0913801FFFC020713FE141F4A13FF5CECFF
C015004948137E4A133C010314005CA8003FB612F84815FCB7FCA36C15F8260003F8C7FC
B3AD003FB612804815C0A46C1580283E7DBD33>I<D901FEEB1FE0903A0FFFC0FFF0013F
01F313F84990B512FC90B7FC5A48010313E12607FC00EB80F849017F1360484890383FC0
0049131FA2001F8149130FA66D131F000F5DA26D133F6C6C495A6D13FF2603FF0390C7FC
ECFFFE485C5D5DD80FCF13C0D981FEC8FC0180C9FCA27FA26C7E7F90B512FC6CECFFC06C
15F0000715FC4815FF4816809038E0000748489038007FC090C8EA1FE048150F007E1507
00FE16F0481503A56C1507007E16E0007F150F6C6CEC1FC001E0147FD81FF8903801FF80
270FFF801F13006C90B55A6C5DC615F0013F14C0010F91C7FC010013F02E447DAB33>I<
EA3FFC487E12FFA2127F123F1200AB4AB4FC020713C0021F13F0027F7F91B5FC90B67EED
07FEECF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB56C48
13FFA26C496C13FE6C496C13FC303D7FBC33>I<14E0EB03F8A2497EA36D5AA2EB00E091
C8FCAA383FFFF8487FA47EEA0001B3AD007FB612C0B712E016F0A216E06C15C0243E78BD
33>I<1570EC01FCA2EC03FEA3EC01FCA2EC00701500AA90383FFFFC4913FE90B5FCA27F
7F90C7FCB3B3A9140115FCA21218007EEB03F81407B414F0140F9038803FE090B512C06C
14806C14006C5B6C13F8000113E01F557BBD33>I<383FFFFC487FB5FCA27E7EC7FCB3B3
AD003FB612F84815FCB712FEA26C15FC6C15F8273D7ABC33>108
D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F13872607FE
07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3A53C7FFE0FFF07FF80B548
018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC0713C0267FFE1F13F000FF
017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFF
F80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33>I<EB01FE90
380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848EB7FC049133F4848EB
1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C14036C15F8A26D1307
003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF802603FF0313006CEBFFFE
6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<EC01FE3A3FFC0FFFC0486C4813F0
00FF017F7F91B512FE6CB7FC6CEBFE07C6D9F800138002E0EB7FC04AEB3FE04A131FEE0F
F091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17E06E131FEE
3FC06E137F9139F801FF80DAFE07130091B55A495C6E5B6E13E0020F1380DA03FEC7FC91
C9FCAF383FFFF8487FB57EA26C5B6C5B2E427FAB33>I<02FF137C0107EBE0FE011F13F0
017F13FC90B512FE4814FF4813C03907FE003F4848131F01F0130F484813071503485A49
1301127F90C7FC15005A5AA97E7E15017F123F6D130315076C7E6C6C130F6D131FD807FE
137F3903FF81FF6CEBFFFE6C14FC6D13F86D13F0010F13C0903801FE0090C8FCAF92387F
FFFC92B512FEA46F13FC2F427CAB33>I<ED03FE3B7FFF801FFF80B5D8C07F13E002C1B5
FC02C314F014C76C9038CFFE0F39001FDFF09139FFC007E092388003C092C8FC5C5C5CA2
5CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>I<90381FFE0F90B5EA8F80000314
FF120F5A5AEBF007387F800190C7FC00FE147F5A153FA37E007FEC1F0001C090C7FCEA3F
F8EBFFC06C13FF6C14E0000314F8C680011F13FF01001480020713C0EC007FED1FE0007C
140F00FEEC07F01503A27EA27F15076D14E06D130F6DEB3FC09038FE01FF90B612801600
00FD5C00FC14F8D8F83F13E0D8780790C7FC242E79AC33>I<EB03C0497E130FAA003FB6
12FC4881B7FCA36C5D26000FE0C8FCB3A3161FEE3F80A5167F6E140001075C6E5A9138FE
07FE6DB55A6D5C6D5C6E5B021F1380DA07FCC7FC29387EB633>I<D83FFCEB1FFE486C49
7E00FF5CA2007F80003F800000EC007FB3A75EA25DA26D5B90387F800FDAE03F13FC6DB6
12FE17FF6D806D01FE13FE01039038F83FFC010001C0C7FC302C7FAA33>I<3B3FFFC00F
FFF0486D4813F8B56C4813FCA26C496C13F86C496C13F0D801F8C7EA7E006D14FE00005D
A26D1301017E5CA2017F13036D5CA2EC8007011F5CA2ECC00F010F5CA36D6C485AA3ECF0
3F010391C7FCA26E5A0101137EA2ECFCFE01005BA214FF6E5AA36E5AA26E5A6E5A2E2B7E
AA33>I<3B7FFF8007FFF8B56C4813FC6E5AA24A7E6C496C13F8D80FC0C7EA0FC06D141F
00071680A56D143F00031600A3EC0FC0EC1FE0A23A01F83FF07EA3EC7FF8147CA2000015
7C9039FCFCFCFCA3ECF87CA2017C5C017D137EECF03EA2017F133FA26D486C5AA3ECC00F
90390F8007C02E2B7EAA33>I<3B3FFFC07FFF80486DB512C0B500F114E0A26C01E014C0
6C496C13803B00FE000FE000017F495AEB3F804B5A6D6C48C7FC90380FE07E903807F0FE
ECF1FC903803FBF8EB01FF6D5B5D6E5A143F6E5A143F814A7E14FF903801FBF0ECF9F890
3803F1FCEB07E0157E90380FC07F011F6D7E90383F801F02007F496D7E01FE6D7E484813
033B7FFFC03FFFE0B56C4813F0A46C496C13E02C2B7DAA33>I<ED07FEED7FFF4AB5FC14
075C4A13FE91383FFE0015E0EC7F8092C7FCB3A45C495A1303EB1FFCEA3FFFB55A14E05C
8014F8003F7FEA001FEB03FE13016D7E80B3A481EC3FE015FE91381FFFFE6E13FF801401
6E7EED07FE284D7BC433>123 D<127CA212FEB3B3B3B3127CA2074D6AC433>I<EA7FF0B5
FC14C014F0806C7F38003FFE1303EB00FF80B3A4816E7E81EC1FFCEDFFFC6E13FF140380
5C140F4A13FCEDFC00EC3FE05D4A5A92C7FCB3A45CEB03FE133F387FFFFCB55A5C14C091
C8FCEA7FF0284D7BC433>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmbx12 12 11
/Fj 11 58 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC3FF849B5FC010F14E0013F14F890397FF01FFC9039FFC007FE489038
0001FF48486D1380000716C049147F000F16E049143F001F16F0A2003F16F8A249141F00
7F16FCA600FF16FEB3A3007F16FCA56C6CEC3FF8A3001F16F0A2000F16E06D147F000716
C06D14FF6C6C4913806C6D4813006C6D485A90397FF01FFC6DB55A010F14E00103148090
26003FF8C7FC2F427CC038>48 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003
B3B3ADB712FCA5264177C038>I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC
0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F
17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A
4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F049
5A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<
ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D13
8013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F138090
2607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A2
17F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81F
F0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>
I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E
147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B
48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<00071503
01E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF0
01C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C049
7F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B00
7EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D01
3F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC0107
9038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA2
48486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091
B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A3
17F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C
6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<
121E121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E
5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2
141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<
EC7FF00103B5FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E497F4848EC
7F80163F484815C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F014006C01FC
5B6E485A6C9038FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F80
90B7FC48013F14802607FC0F14C0260FF80314E04848C6FC496D13F0003F141F48481307
496D13F8150000FF157F90C8123F161F160FA21607A36D15F0127F160F6D15E06C6C141F
6DEC3FC06C6CEC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F
91C7FC010013F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF0
489038800FF848496C7E48488048486D7E001F80003F1680A2484815C08117E0A212FF17
F0A617F8A45D127FA3003F5CA26C7E5D6C6C5B12076C6C131E6CEBC07C6CEBFFF8013F5B
010F01C013F00101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C491380A21700
4B5A150F5E49495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0
D907FEC8FC2D427BC038>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmbx12 17.28 19
/Fk 19 118 df<140CEC7F80ECFFC04913E04913F015F85B5B4913FC5BA24913F890B5FC
4814F015E04814C0481400485B4813F814E04813804848C7FC485A13F013C06CC8FC123C
12181E1C5EE551>19 D<16F04B7E1507151F153FEC01FF1407147F011FB5FCB7FCA41487
EBE007C7FCB3B3B3B2007FB91280A6395D74DC51>49 D<913801FFF8021FEBFFC091B612
F8010315FF010F16C0013F16F09026FFF80180489026C0003F13FE4890C7000F7FD807FC
0203148048486E14C048486E14E04981D83FF86F13F001FE6F13F8487E6E6E13FC80B56F
13FE80A319FF83A26C5BA26C5BA26C90C8FCEA07FCD800E04B13FE90C9FCA219FC5FA219
F85F19F04D13E0A24D13C0198094B512004C5B604C5B4C5B4C5B604C90C7FC4C5A4C5A4C
5A4B13E04B5B4B5B4CC8FC4B5A4B5AED3FE04B48143F4B5A4A90C8FC4A5ADA07F8157E4A
5A4A5A4A5A4A5A02FEC912FE495A495A4948ED01FC4948150749B8FC5B5B90B9FC5A4818
F85A5A5A5A5AA2BAFC19F0A4405D78DC51>I<ED7FFE0207B512F8023F14FF49B712C049
16F0010FD9800F13FC90271FF800037FD97FE001007FD9FF806E7F49C86C7F486C834801
C06E7F80486D826E80804884A3805CA27EA24A4A5B6C5B6C5B6C6C485E011EC85A90C95C
A24D5B6194B5FC96C7FC4C5B4C13F84C5B4C5B043F1380922607FFFEC8FC020FB512F817
E094C9FC17F817FF91C7001F13E0040313F8040013FE717E7113C0717F85717F858385A2
85831A80A31AC0EA03FCEA0FFF487F487FA2487FA2B57E1A80A34D1400A25C6C604A5C6C
6091C8485B6C5A01F04B5BD80FFC4B5B6CB492B55A6C01E0010391C7FC6C01FF011F5B6C
6C90B65A011F16F0010716C001014BC8FCD9001F14F0020049C9FC425E79DC51>I<001F
BEFCA64849C79126E0000F148002E0180091C8171F498601F81A0349864986A2491B7FA2
491B3F007F1DC090C9181FA4007E1C0FA600FE1DE0481C07A5CA95C7FCB3B3B3A3023FBA
7EA663617AE070>84 D<91381FFFFC0103B612E0011F15FC017F15FF90B812C0489026F0
003F13F04803077F6E01017F707F486D6E7E8583717FA26C4982836C4982A238007FC001
1FC8FC90C9FCA7047FB5FC033FB6FC0203B7FC143F49B5EAF00F0107EBFE00011F13F001
7F13C048B5C7FC4813FC485B485B485B5C5A485BA291C8FCB5FCA45FA25F6C6D143B177B
6C6D14F36EEB01E36C6D0107806C6DD90FC313FF6C01FFD9FF8114FE00019126FFFE0114
FF6C6C4A7E011F02F07F010302C0131F9026003FFCC7000313FE48407BBF4E>97
D<903807FF80B6FCA6C6FC7F7FB3A9EFFFF8040FEBFF80047F14F00381B612FC038715FF
92278FFE007F13C0DBBFE0010F7FDBFF8001037F93C76C13FC03FC6E7F4B6F7E4B814B6F
13804B17C0851BE0851BF0A21BF8A2851BFCA41BFEAC1BFCA44F13F8A31BF0A24F13E0A2
1BC04F13806F5D6F17006F4B5A6F4B5A4A6C02035B9126FC7F80495BDB3FE0011F13C091
27F80FFC01B55A4A6CB648C7FCDAE00115F84A6C6C14E04A011F91C8FC91C7000113E04F
647BE35A>I<92380FFFFC4AB612E0020F15FC023F15FF91B8128001039026FE000713C0
4901F015E0011F01C05B4990C7FC49484A13F0495A485B5A5C487013E0485B7113C0485B
0501130048EE007C95C7FCA2485BA4B5FCAC7EA280A27EA36C7F19FC7E806CEF01F86C7F
6EED03F06C6D15076CEF0FE06D6C6CEC1FC06D6DEC3F806D6DEC7F00010701FCEB01FE6D
9039FF801FFC010091B55A023F15E0020F1580020102FCC7FCDA000F13C03E407BBF48>
I<F17FF8050FB5FCA6EF000F8484B3A9ED0FFF4AB512F0020F14FE023FECFF8391B712E3
01039138007FF34901F0EB07FB011F01C00101B5FC49497F4948C8123F49488148498148
835C485B5AA2485BA25AA3485BA4B5FCAC7EA47E80A27EA27E807E6E5D6C5F6C6D5D6C6D
5D6E92B5FC6D6C5C011F6D0107806D01E0D91FF77F6D01FCD9FFE7EBFFFE010190B61287
6D6CECFE07021F14F8020314C09139001FFE004F647BE35A>I<92381FFFC04AB512FE02
0F6E7E027F15F091B77E0103D9FE0113FE010F9039F0003FFF4901C0010F7F4990C76C7F
494802017F49488248498048496F7E85485B48717EA24849151F855AA34849811A80A3B5
FCA291B9FCA31A000280CBFCA67EA3807EA36C7F190F6CF01F806C7F193F6C6D17006C60
6C6D16FE6D6C4B5A6D6C4B5A6D01C0EC0FF06D01F0EC3FE06D01FCECFFC001019026FFC0
0F5B6D91B6C7FC023F15FC020715F002001580030701F0C8FC41407CBF4A>I<EB0FE0EB
3FF8497E497E487F4880A24880A76C5CA26C91C7FC6C5B6D5A6D5AEB0FE090C9FCB09038
07FF80007FB5FCA6C6FC7F7FB3B3ADB712C0A622657BE42C>105
D<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB712E0A623647BE32C>108
D<902607FF80EB0FFFB691B512F0040314FC040F14FF043F8193267FC03F7F9326FE000F
7FC6DA81F86D7F6DEB83E06DD987C06D7FED8F8093C780039E8015BC03B88215F85DA25D
A45DB3B2B7D8F007B71280A651407BBF5A>110 D<923807FFE092B6FC020715E0023F15
FC91B8FC010349C66C13C04901F0010F7F011F0180010113F84990C87F49486F7E49486F
7E48496F138048496F13C04A814819E04819F04A814819F8A24819FC4A81A24819FEA4B5
18FFAC6C19FEA46C6D4B13FCA36C19F8A26C6D4B13F0A26C19E06E5D6C19C06C6D4B1380
6C6D4B13006D6C4B5A6D6C4B5A6D01C001035B6D01F0010F5B010301FE017F13C0010090
B7C7FC023F15FC020F15F0020092C8FC030713E048407CBF51>I<902607FF80EBFFF8B6
010FEBFF80047F14F00381B612FC038715FF92268FFE0014C0DBBFE0011F7FC6DAFF806D
7F6D91C7000313FC6D01FC6E7F4B6E7F4B814B17804B6F13C0851BE0A27313F0A21BF885
A21BFCA285A21BFEAC1BFC61A31BF8A2611BF0A24F13E0A24F13C01B806F5D6F92B51200
6F4A5B6F4A5B6F4A5B6F6C495B04E0013F13C09226CFFC01B55A03C7B648C7FC03C115F8
DBC07F14E0041F91C8FC040113E093CBFCB3A4B712F0A64F5C7BBF5A>I<D90FFFEB07F8
B6EB3FFF4C13C04BB512F04B14F8923907F87FFCED0FE0C6923880FFFE6D495A6DD91E01
13FF153CA21578A24B6C13FEA24BEB7FFCA2EF1FF04BEB07C094C7FCA45DB3B0B712F8A6
38407BBF42>114 D<913A3FFF8007800103B5EAF80F011FECFE3F017F91B5FC48B8FC48
EBE0004848C7120FD80FF814034848804980003F167F49153F127FA200FF161FA27FA213
F86D92C7FC13FF14F06CEBFF8015FEEDFFE06C15FCEEFF806C16E06C826C16FC6C826C82
6C6C1680131F010716C0010116E0EB001F020015F01503ED003F040713F8007C150100FC
81177F6C163FA2171F7E18F07FA26D16E06D153F7F6DED7FC06DEDFF8001FF5C02C00107
130002F8EB7FFE019FB612F8010F15E0D8FC03158048C66C49C7FC48010713C035407BBF
40>I<EC07E0A6140FA5141FA3143FA2147FA214FF5BA25B5B5B5B137F48B5FC000F91B5
12FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC6DED1F80A2816DED3F00816D157E6D6D5B6D
EBFF036EEBFFF86E5C020F14C0020191C7FC9138001FFC325B7DDA3F>I<902607FFC0ED
3FFEB60207B5FCA6C6EE00076D826D82B3B360A360A26D5E181E181C6D163C6F14F86D4B
487F6D01F8D907E08003FED93FC0ECFF80010090B65A6E5D021F14FC020314F0DA003F13
8051407BBF5A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmcsc10 12 4
/Fl 4 110 df<DB03FF140C033F01F0131C4AB500FC133C91390FFE007FDA1FF090380F
C07CDA7F80903803E0FC4948C812F0D903FC15794948153FD91FF0151F4948150F494815
074A150349C9FC48481601120349160012074848177CA24848173CA2123FA249171C127F
A319005B12FFAC127F7FA2191CA2123F7FA2001F183C19386C7EA26C6C1778000318706D
17F0000118E06C6C16016D6C16C06E15036D6CED07806D6CED0F00D907F8151E6D6C5D6D
B45D6D6C6C495ADA1FF0EB07C0DA0FFEEB7F800201B500FEC7FCDA003F13F0030313803E
4879C54E>67 D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A
6C7EA34A6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA249
81011CC7121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7E
D81FF84A7EB5027F13F8A335357CB43D>97 D<B512FEA3000390C9FCEA01FCB3A9EE01C0
A416031780A41607A2160F161FA2167FEEFF00486C1307B8FCA32A337BB233>108
D<D8FFFEEE7FFFA26D93B5FC000318C06C1880D9DF80EC01DFA2D9CFC0EC039FA3D9C7E0
EC071FA2D9C3F0140EA3D9C1F8141CA2D9C0FC1438A3027E1470A26E14E0A391391F8001
C0A291390FC00380A3913907E00700A2913803F00EA36E6C5AA26E6C5AA3ED7E70A26F5A
A3486C6D5A487ED81FFC6D48EB3FC0B50080020FB5FCA2ED070040337BB24A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmr12 12 53
/Fm 53 123 df<9239FF8003F8020F9038F01FFE913A3F807C3E07913BFC000E780F80D9
01F090381FF01F494890393FE03FC04948137F494814C0011FEE1F8091C7FC4991393F80
0600013E021F90C7FC137EAFB912F0A3D8007EC7D81F80C7FCB3B18301FF4A7E007FD9FE
1FB512E0A33A467EC539>11 D<4AB4FC020F13C091383F00F002FC1338D901F0130C4948
131E4948133E4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D800
7EC7FC8282B3B001FFEC7F80007FD9FC1FB5FCA330467EC536>I<127812FCA27E7E6C7E
123FEA0FC06C7E6C7E12016C7E137C7F130E7FEB0380EB0100111275C431>18
D<130FEB1F80A2133F137FEBFF005BEA01F8485A485A5B485A48C7FC123E12385A5A1240
11126CC431>I<02FFED7F80010701E0903803FFE090261F80F8903807C1F890263E003C
90381E007C49010F497F496D6C487F48486D6C4814804848DAE1E0EB0FC00007EC01E348
48DAF3C0EB07E0001FEC00FF4918F0003F6F5A1903A248C816F870C7FCA25AA294B6FCA2
94C9FCA67E836D147F123FA2711418001F15FF7F000F912601F3E014306C6C14E1000391
2603E0F014606C6C4A6C14C06C6C902607807CEB0180017C90260F001EEB03006D013C6D
130E90261F80F8903807E03C902607FFE0903801FFF0010090C8EA3FC0452E7DAC4C>27
D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180A2EA0300A212
065AA25A5A12200B1D78C41B>39 D<1406140E14181430147014E0EB01C0EB0380EB0700
A2130E5B133C133813785BA2485AA2485AA212075BA2120F90C7FCA25A121EA2123EA312
3C127CA6127812F8B21278127CA6123C123EA3121EA2121F7EA27F1207A27F1203A26C7E
A26C7EA213781338133C131C7F7FA2EB0380EB01C0EB00E0147014301418140E14061764
77CA26>I<7E7E12607E12387E7E7E6C7EA26C7E6C7E7F137013787FA27FA27FA2148013
07A214C01303A214E01301A214F0A3130014F8A61478147CB2147814F8A614F01301A314
E0A2130314C0A213071480A2130F1400A2131EA25BA25B137013F05B485A485AA248C7FC
120E5A5A12305A5A5A16647ACA26>I<16C04B7EB3AB007FBAFCBB1280A26C1900C8D801
E0C9FCB3AB6F5A41407BB84C>43 D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E12
00A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78891B>I<B612C0A51A057F97
21>I<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A78891B>I<14FF010713E09038
1F81F890387E007E01F8131F4848EB0F80000315C04913074848EB03E0000F15F0A24848
EB01F8A3003F15FCA348C812FEA64815FFB3A26C15FEA56D1301003F15FCA3001F15F8A2
6D1303000F15F0A26C6CEB07E0000315C06D130F6C6CEB1F806C6CEB3F00017E137E9038
1F81F8903807FFE0010090C7FC28427CC031>48 D<143014F013011307131F13FFB5FC13
E713071200B3B3AF497E497E007FB6FCA3204178C031>I<EB03FE90381FFFC0017F13F0
3901F80FFC3903C001FE48C7127F000EEC3F80000CEC1FC04815E048EC0FF0A248EC07F8
A2127C00FE15FC7E6D1303A46CC71207123EC813F8A3ED0FF0A216E0151F16C0153F1680
ED7F00157E5D4A5A5D4A5A4A5A4A5A4AC7FC141E5C5C5C495A495A495A91C7120C130E5B
4914185B5B485A49143848C8123000061570000FB612F05A5A5AB712E0A326417BC031>
I<49B4FC010F13F0013F13FC9038FE01FE3901E0007FD80380EB3F8048C7EA1FC0000EEC
0FE0D80F8014F0EA1FE016F86D1307A36C5AA2D80380130FC813F0A3ED1FE016C0A2ED3F
801600157E5DEC03F0EC1FC0D90FFFC7FC15F090380001FCEC007EED1F8016C0ED0FE0ED
07F016F8150316FC16FE1501A216FFA3121E123F487E487EA216FEA24913036CC713FC12
7E0070EC07F8003015F06C140F000E15E06CEC1FC0D803E0EB7F803A01FC01FE0039007F
FFFC011F13E0010190C7FC28427CC031>I<1507A25D5DA25D5DA25DA25C5C811406140E
140C141814381430146014E014C01301EB038014005B13065B131C13185B137013605B12
015B48C7FC5A1206120E120C5A123812305A12E0B812C0A3C86CC7FCAC4B7E4A7F91B612
80A32A427DC131>I<121E123FEA7F80EAFFC0A4EA7F80EA3F00121EC7FCB3A5121E123F
EA7F80EAFFC0A4EA7F80EA3F00121E0A2B78AA1B>58 D<007FBAFCBB1280A3CEFCB0BB12
80A36C190041187BA44C>61 D<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA2ED39FF1530
A203707FED607FA203C07F163FA2DA01807F161FA24A486C7EA302066D7EA2020E80020C
1303A2021C8002181301A24A8082A24A81177FA291B77EA3D90180C7EA1FE0A201038291
C8120FA2498201061507A2010E82010C1503A249821701A2498283137801F883487ED80F
FF030313E0B500E0027FEBFFC0A342467DC549>65 D<DB0FFE146092B512C0020302F013
E0913A1FFC01FC0191393FC0001E02FFC7EA0703D901FCEC0387D907F0EC00C74948156F
4948153F4948151F49C9120F13FE000117075B484816031207491601120F491600121FA2
123F491760A2127FA219005B12FFAC127F7FA21960123FA27F121FA26C6C17C0A212076D
EE018012036C6C16036D170000001706137F6D6C5D6D6C5D6D6C5D6D6C5DD901FC4A5A6D
B4EC0780DA3FC0011FC7FCDA1FFC13FC0203B55A020014C0DB0FFEC8FC3B467BC446>67
D<B8FC17F017FC00019039C00007FF6C499038007FC0017FED1FE0EF07F0EF03FC717E71
7E84727E727E727EA2727E85180385A2180185A38584A31A80AD1A00A36061A361180361
180761180F614E5A183F614EC7FC18FEEF03FC4D5AEF1FE001FFED7FC0486DD907FFC8FC
B812FC17F094C9FC41447CC34B>I<B612F0A3C6EBF0006D5A6D5AB3B3B3A4497E497EB6
12F0A31C447DC323>73 D<B612F8A3000101E0C9FC6C5B6D5AB3B31830A418701860A518
E0A3EF01C0A217031707A2170F173F177F01FFEC01FF486D011F1380B9FCA334447CC33D
>76 D<ED1FFC4AB512C091390FF007F891393F8000FE027EC7123FD901F8EC0FC049486E
7ED90FE0EC03F849486E7E49486E7E49C9127F01FE707E49161F0001844848707EA24848
707E000F84491603001F84A2491601003F84A3007F844982A300FF1980AC007F19006D5E
A4003F606D1603A2001F606D1607000F60A26C6C4C5AA26C6C4C5A0001606C6C4C5A6D16
7F6D94C7FC6D6C15FE6D6C4A5A6D6C4A5AD903F0EC07E0D901FCEC1FC0D9007E4AC8FC6E
6C13FE91390FF007F80201B512C09126001FFCC9FC41467BC44C>79
D<B712FCEEFFC017F800019039C0000FFE6C49EB01FF017F9138007F80EF1FE0170FEF07
F018F8EF03FCA218FE1701A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F
80933801FE00EE0FFC91B612F017800280C9FCB3A9497E487FB612C0A338447CC342>I<
49B41303010F13E0013FEBF8079038FE00FCD801F0EB1F0F4848EB079F4848EB01DF4848
6DB4FC48C87E001E81123E007E81127C8212FC82A46C81A37E6C6C91C7FCA2EA3FE07FEA
1FFEEBFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F80010F80010180D9001F7F0201
7F9138001FFF150303001380167FEE3FC0161FA2EE0FE0124012C01607A47EA217C07E16
0F6C1680A26CED1F006C151E6C153ED8FBC05CD8F9F05CD8F07CEB03F03AE03FC00FE001
0FB51280D8C00349C7FC9038003FF02B467BC436>83 D<003FB912E0A3903BF0003FF000
7F01806D48130F003EC7150348EF01F00078170019701270A219301260A5481818A5C816
00B3B3A54B7EEDFFFC0103B7FCA33D447CC346>I<130C131E133F497EEBF3C03801E1E0
3803C0F03807807848487E001E7F487F0070EB038048EB01C00040EB00801A0E75C331>
94 D<EB07F8EB3FFF9038F80FC03901C003E048C66C7E00066D7E48147CD80F80137E48
6C133E6D133F8182A26C5A6C5AC8FCA4EC0FFF49B5FC90380FFC1FEB3FC0EBFF00EA03FC
EA07F0485A121F485A5B127F176048C7FCA4153FA26C146F7F003F9138C7C0C0391FC001
873B0FE00307E1803A07F81E03FF2701FFFC0113003A001FE0007C2B2E7CAC31>97
D<EA01FC12FFA3120312011200B3EC01FC91380FFF8091383E07E091387000F802C0137C
D9FD807F01FFC77EEE0F804915C049EC07E017F0160317F8A217FC1601A317FEA917FCA2
1603A217F8A2EE07F017E07FEE0FC001FBEC1F801700D9F180133ED9F0C05B9039E06001
F891383C07E09039C01FFF8090260003FCC7FC2F467DC436>I<EC7F80903803FFF09038
0FC07C90383E000E49130349EB01804848EB00C0000314074848EB0FE04848131FA2121F
5B003FEC0FC0ED0780007F91C7FC90C9FCA25AAA7EA27FA2123F16306C7EA2000F15606C
7E6C6C14C00001EC01806C7E017CEB07006D130E90381FC078903807FFF001001380242E
7DAC2B>I<16FE157FA315011500167EB3EC7F80903803FFF090380FC07890383F000C01
7C13064913034848EB01FE00031400485A4848147EA2121F485AA2127FA290C8FCA25AA9
7EA37F123FA2121F7F000F15FE6C7E000314016C6CEB037E6C6C147F017C010E13806D01
1C13FE90380FC0F0903803FFE09026007F0013002F467DC436>I<EB01FE903807FFC090
381F03F090387C00F849137C48487F48487F0007158049130F000F15C0121F4914E0003F
1407A2127F90C713F0A35AA290B6FCA290C9FCA67EA36C7EA21630121F7F000F15606C7E
000315C06C6CEB01806C6CEB0300017C13066D131C90380FC078903803FFE09038007F80
242E7DAC2B>I<EC1FC0EC7FF0ECF038903803E07C903807C0FC90380F81FEA2EB1F0190
383F00FCA2013E1330017E1300B0B61280A3D8007EC7FCB3B1137F497E007FEBFF80A31F
467EC51E>I<D901FCEB1FC0903A0FFF807FE0903A3F07E1E1F090397C01F7819039F800
FE01484890387C00E048486D13000007143FA248486D7EA2001F81A7000F5DA26C6C49C7
FCA20003143E6C6C5B6C6C5B486C485A39033F07E090380FFF80260701FCC8FC0006CAFC
A3120E120F7EA27F13E06CB512F86CECFF806C15E06D14F848B67E3A07E0000FFED80F80
EB00FF001EC8123F003EED1F8048150F17C0481507A6007CED0F80A26CED1F006C153E6C
6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7FC010113E02C417DAB31>
I<EA01FC12FFA3120312011200B3EC01FE913807FF8091381E07E091383801F002607FEC
C000D9FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5D8FC7F13FEA32F457DC436>
I<13E0EA03F8487EA66C5AEA00E090C7FCADEA01FC127FA3120312011200B3B0487EB512
F8A315437EC21B>I<14F0EB01F8EB03FCEB07FEA4EB03FCEB01F8EB00F01400AD14FE13
7FA313011300147EB3B3AB003C137C127EB413FC14F8A238FE01F0007E13E0383803C038
1E0780380FFF00EA01FC175783C21E>I<EA01FC12FFA3120312011200B3B3B3A5487EB5
12FCA316457EC41B>108 D<2701FC01FEEC7F8000FF903B07FFC001FFF0913B0E03F003
80FC913B3800F80E003E0003495C000101C0D97C307F0000037E81D9FD805C01FFC7D83E
C0130F043F81495DA34992C7FCB3A9486C4A6C497EB5D8FC3FB5000FB512C0A34A2C7DAB
51>I<3901FC01FE00FF903807FF8091381E07E091383801F0000301607F0001EBC00026
00FD807F167C01FFC7FC167E5BA35BB3A9486C14FFB5D8FC7F13FEA32F2C7DAB36>I<EC
7F80903803FFF090380FC0FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E00
0F81A24848147E003F157FA290C87E481680A44816C0AA6C1680A26D147F003F1600A200
1F157E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0
FE903807FFF89038007F802A2E7DAC31>I<3901FC01FC00FF90380FFF8091383E07E091
387001F800039038C0007C2601FD807F6CB4C7123FEE1F8049EC0FC04915E0EE07F0A217
F8160317FCA3160117FEA917FC1603A317F8160717F0EE0FE07FEE1FC06D1580EE3F00D9
FD80137ED9FCC05B91386001F891383C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512
FCA32F3F7DAB36>I<91387F8006903903FFE00E90380FE07890383F001C017EEB061E5B
4848EB033E4848EB01BE12074848EB00FEA2485A003F157E5B127FA390C8FC5AA97E7FA3
123F7F121F16FE6C7E000714016C7E6C6CEB037E00001406017C130C013F131890380FC0
F0903803FFE09038007F0091C7FCAE16FF037F13FEA32F3F7DAB33>I<3901F807E000FF
EB1FF8EC383CEC607E0003EBC0FF12013800F980EBFB00157E153C01FE1300A45BB3A77F
487EB6FCA3202C7DAB26>I<90383FE0303801FFF83907C01E70390F0007F0001C130148
1300A2481470A212F01530A37E7E007E1400EA7F80EA3FF0EBFF806C13F86C13FE0003EB
FF806C14C0D8003F13E0010313F09038001FF81403EC00FC0040147C00C0147E153E7E15
1EA37E151C7E153C6C14386C147000FB14E039F18001C039E0F00F8039C07FFE00EB0FF0
1F2E7DAC26>I<1306A5130EA4131EA3133E137EA213FE12011207001FB512F0B6FCA2D8
007EC7FCB3A4150CAA133E013F1318A27F90380F803001071360903803E0C0903801FF80
9038003F001E3E7EBC26>I<D801FC14FE00FF147FA300031401000114000000157EB3A9
16FEA3017C1301A2017EEB037E013E147F011E010613806D011C13FE903807C078903803
FFE09026007F8013002F2D7DAB36>I<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F80
17000000150E160CA2017E5CA2017F14386D1430A26D6C5BA26E13E0010F5CA26D6C485A
A36D6C48C7FCA26E5A01011306A26D6C5AA2ECFE1CEC7E18A26E5AA3EC1FE0A36E5AA26E
5AA36EC8FC2E2C7EAA33>I<3B7FFFF007FFFCA30001D9800113C06C90C7EAFE006D147C
6D14706D6C5B6D6C5BECE0010107495AD903F090C7FCECF806903801FC0E01005BEC7E18
EC7F30EC3F706E5A6E5A811407814A7EEC0DFC1418EC387E4A7E02607FECC01F01016D7E
D903807F4A6C7E01061303496D7E011C80013C1300017C147ED801FC14FFD80FFE4913C0
B5D8800713FFA3302B7FAA33>120 D<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F80
17000000150E160C6D141C017E1418A26D5CA26E1370011F1460A26D6C5BA2800107495A
A2ECF003010391C7FCA2903801F806A2ECFC0E0100130CA2EC7E18A2EC7F38EC3F30A2EC
1FE0A36E5AA26E5AA36EC8FCA21406A35CA2141C1418A200385B127C00FE5BA25C130138
7C0380D87007C9FCEA3C1EEA1FFCEA03F02E3F7EAA33>I<003FB612E0A29039E0000FC0
90C7EA1F80003C143F00381500157E003014FE00705C4A5A14030060495A5D4A5A141F5D
C748C7FC5C14FE5C495A13035C495A130F494813605C49C7FC5B017E14C05B1201485A5B
48481301120F491303485A003FEC0F8090C7121F007E14FFB7FCA2232B7DAA2B>I
E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop Black 0 84 a Fm(Corrig)m(\023)-46 b(e)33 b(TP3)g
Fl(Caml)2532 b Fm(T)-8 b(ri)32 b(par)h(tas)p 0 124 3820
4 v Black 0 407 a Fk(1)161 b(T)-13 b(ri)54 b(par)g(s)l(\023)-77
b(election)0 626 y Fj(1.)p Black Black 0 781 a Fi(let)52
b(rec)g(min_liste)i(=)d(function)154 901 y([])154 b(->)52
b(failwith)h("liste)g(vide")103 1021 y(|[a])103 b(->)52
b(\(a,[]\))103 1142 y(|a::q)g(->)g(let)g(\(b,l\))h(=)e(min_liste)j(q)d
(in)564 1262 y(if)h(a<b)g(then)g(\(a,q\))564 1382 y(else)g(\(b,a::l\))i
(;;)0 1587 y Fj(2.)p Black Black 0 1742 a Fi(let)e(rec)g(tri_selection)
j(=)c(function)103 1862 y([])g(->)h([])51 1982 y(|l)103
b(->)52 b(let)g(\(a,q\))h(=)e(min_liste)j(l)e(in)410
2103 y(a::\(tri_selection)k(q\))c(;;)0 2307 y Fj(3.)24
b Fm(On)h(commence)h(par)e(calculer)h(le)g(complexit)m(\023)-46
b(e)26 b(de)f(la)f(fonction)g Fi(min)p 2569 2307 31 4
v 38 w(liste)p Fm(.)i(Si)e(on)h(note)f Fh(M)10 b Fm(\()p
Fh(n)p Fm(\))25 b(cette)0 2428 y(complexit)m(\023)-46
b(e)34 b(p)s(our)f(une)g(liste)h(de)f(longueur)g Fh(n)p
Fm(,)f(on)h(a,)f(en)h(comptan)m(t)h(le)f(nom)m(bre)g(de)g(comparaisons)
h(:)1172 2648 y Fh(M)10 b Fm(\(1\))84 b(=)f(0)1163 2793
y Fh(M)10 b Fm(\()p Fh(n)p Fm(\))84 b(=)f Fh(M)10 b Fm(\()p
Fh(n)23 b Fg(\000)g Fm(1\))e(+)h(1)98 b(si)33 b Fh(n)28
b(>)f Fm(1)0 3013 y(D'o)s(\022)-51 b(u)31 b Fh(M)10 b
Fm(\()p Fh(n)p Fm(\))29 b(=)e Fh(n)c Fg(\000)f Fm(1)32
b(p)s(our)h Fh(n)28 b Fg(\025)g Fm(1.)0 3133 y(Soit)h
Fh(T)14 b Fm(\()p Fh(n)p Fm(\))30 b(la)f(complexit)m(\023)-46
b(e)31 b(de)f(la)f(fonction)h Fi(tri)p 1789 3133 V 37
w(selection)i Fm(p)s(our)d(une)h(liste)h(de)f(taille)f
Fh(n)p Fm(.)h Fh(T)43 b Fm(v)m(\023)-46 b(eri\014e)31
b(:)1111 3353 y Fh(T)14 b Fm(\(0\))82 b(=)h(0)1101 3499
y Fh(T)14 b Fm(\()p Fh(n)p Fm(\))83 b(=)g Fh(M)10 b Fm(\()p
Fh(n)p Fm(\))23 b(+)f Fh(T)14 b Fm(\()p Fh(n)22 b Fg(\000)h
Fm(1\))97 b(si)33 b Fh(n)28 b Fg(\025)g Fm(1)0 3719 y(On)33
b(a)f(ainsi)h Fh(T)14 b Fm(\()p Fh(k)s Fm(\))22 b Fg(\000)g
Fh(T)14 b Fm(\()p Fh(k)25 b Fg(\000)e Fm(1\))k(=)h Fh(M)10
b Fm(\()p Fh(k)s Fm(\))28 b(=)g Fh(k)d Fg(\000)e Fm(1)32
b(p)s(our)g(tout)h Fh(k)d Fg(\025)f Fm(1)j(et)h(par)f(cons)m(\023)-46
b(equen)m(t)962 3890 y Ff(n)912 3920 y Fe(X)920 4132
y Ff(k)r Fd(=1)1072 4015 y Fh(T)14 b Fm(\()p Fh(k)s Fm(\))22
b Fg(\000)h Fh(T)14 b Fm(\()p Fh(k)25 b Fg(\000)d Fm(1\))83
b(=)g Fh(T)14 b Fm(\()p Fh(n)p Fm(\))22 b Fg(\000)h Fh(T)14
b Fm(\(0\))27 b(=)g Fh(T)14 b Fm(\()p Fh(n)p Fm(\))1849
4338 y(=)2059 4214 y Ff(n)2008 4244 y Fe(X)2016 4456
y Ff(k)r Fd(=1)2168 4338 y Fh(k)26 b Fg(\000)c Fm(1)28
b(=)2534 4271 y Fh(n)p Fm(\()p Fh(n)23 b Fg(\000)f Fm(1\))p
2534 4315 363 4 v 2691 4407 a(2)0 4671 y(Donc)42 b Fh(T)14
b Fm(\()p Fh(n)p Fm(\))43 b(=)641 4624 y Ff(n)p Fd(\()p
Ff(n)p Fc(\000)p Fd(1\))p 641 4648 231 4 v 739 4705 a(2)925
4671 y Fm(=)h Fg(O)s Fm(\()p Fh(n)1223 4635 y Fd(2)1263
4671 y Fm(\).)e(Il)g(n'y)h(a)e(pas)i(de)f(raison)h(de)f(distinguer)h
(ici)g(la)f(complexit)m(\023)-46 b(e)43 b(en)0 4792 y(mo)m(y)m(enne)28
b(et)d(la)g(complexit)m(\023)-46 b(e)28 b(dans)e(le)g(pire)f(des)i(cas)
f(puisque)h(le)f(nom)m(bre)g(de)g(comparaisons)h(e\013ectu)m(\023)-46
b(ees)0 4912 y(dans)30 b(ce)h(tri)e(ne)h(d)m(\023)-46
b(ep)s(end)31 b(que)g(de)f(la)f(taille)h(de)g(la)g(liste)g(\022)-49
b(a)30 b(trier)f(et)h(pas)g(de)g(la)g(v)-5 b(aleur)30
b(de)g(ses)e(\023)-46 b(el)m(\023)g(emen)m(ts.)0 5294
y Fk(2)161 b(T)-13 b(ri)54 b(par)g(tas)0 5514 y Fj(4.)33
b Fm(D'apr)m(\022)-46 b(es)33 b(la)f(d)m(\023)-46 b(e\014nition)33
b(d'un)h(tas)e(le)h(minim)m(um)i(est)30 b(\023)-46 b(egal)32
b(\022)-49 b(a)33 b(la)f(racine.)p Black Black 0 5668
a Fi(let)52 b(min_tas)h(=)f(function)103 5789 y(Vide)g(->)g(failwith)h
("tas)f(vide")51 5909 y(|Noeud)h(\(a,_,_\))g(->)f(a)g(;;)p
Black 1885 6180 a Fm(1)p Black eop
%%Page: 2 2
2 1 bop Black 0 84 a Fm(Corrig)m(\023)-46 b(e)33 b(TP3)g
Fl(Caml)2532 b Fm(T)-8 b(ri)32 b(par)h(tas)p 0 124 3820
4 v Black 0 407 a Fj(5.)p Black Black 0 562 a Fi(let)52
b(rec)g(enleve_min)i(=)e(function)103 682 y(Vide)g(->)g(Vide)51
802 y(|Noeud)h(\(_,Vide,d\))h(->)e(d)51 923 y(|Noeud)h(\(_,g,Vide\))h
(->)e(g)51 1043 y(|Noeud)h(\(_,g,d\))g(->)f(let)g(min_g)h(=)e(min_tas)i
(g)f(and)g(min_d)h(=)e(min_tas)i(d)f(in)974 1163 y(if)g(min_g)g(<)g
(min_d)h(then)f(Noeud)h(\(min_g,enleve_min)i(g,d\))1846
1284 y(else)d(Noeud)h(\(min_d,g,enleve_min)j(d\))c(;;)0
1488 y Fj(6.)p Black Black 0 1643 a Fi(let)g(rec)g(ajouter)h(x)f(=)f
(function)103 1763 y(Vide)h(->)g(Noeud)g(\(x,Vide,Vide\))51
1884 y(|Noeud)h(\(a,g,d\))g(->)f(if)g(a<x)g(then)g(Noeud)h
(\(a,d,ajouter)h(x)e(g\))1333 2004 y(else)g(Noeud)h(\(x,d,ajouter)h(a)e
(g\))g(;;)0 2159 y Fm(On)44 b(p)s(eut)g(prouv)m(er)h(que)g(cette)g
(fonction)f(p)s(ermet)h(de)f(main)m(tenir)h(un)f(arbre)g(a)m(v)m(ec)i
(une)e(hauteur)h Fh(h)0 2279 y Fm(v)m(\023)-46 b(eri\014an)m(t)1717
2400 y Fh(h)28 b Fg(\024)g Fm(ln)1988 2415 y Fd(2)2044
2400 y Fh(n)0 2744 y Fj(7.)p Black Black 0 2899 a Fi(let)52
b(rec)g(ajouter_liste)j(=)c(function)103 3019 y([])g(->)h(Vide)51
3140 y(|a::q)h(->)f(ajouter)h(a)e(\(ajouter_list)k(q\))d(;;)0
3344 y Fj(8.)p Black Black 0 3499 a Fi(let)g(rec)g(vider)h(=)e
(function)103 3619 y(Vide)h(->)g([])51 3740 y(|Noeud)h(\(a,g,d\))g(as)f
(t)g(->)f(a::\(vider)j(\(enleve_min)g(t\)\))e(;;)0 3944
y Fj(9.)p Black Black 0 4099 a Fi(let)g(tri_par_tas)i(l)e(=)f(vider)i
(\(ajouter_liste)i(l\))d(;;)0 4303 y Fj(10.)41 b Fm(Dans)f(le)h(pire)g
(des)g(cas)h(la)e(fonction)g Fi(ajouter)j Fm(e\013ectue)f
Fh(h)e Fm(comparaisons)i(p)s(our)e(un)h(arbre)f(de)0
4424 y(hauteur)33 b Fh(h)p Fm(.)0 4544 y(Si)43 b Fh(l)j
Fm(est)d(une)h(liste)g(de)g(taille)f Fh(n)g Fm(la)g(fonction)g
Fi(ajouter)p 2138 4544 31 4 v 39 w(liste)i Fm(appliqu)m(\023)-46
b(ee)44 b(\022)-49 b(a)43 b Fh(l)i Fm(e\013ectue)g Fh(n)e
Fm(app)s(els)0 4664 y(\022)-49 b(a)43 b Fi(ajouter)i
Fm(sur)f(des)g(arbres)g(comp)s(ortan)m(t)f(resp)s(ectiv)m(emen)m(t)k(0)
p Fh(;)17 b Fm(1)p Fh(;)g(:)g(:)g(:)32 b(;)17 b(n)29
b Fg(\000)h Fm(1)43 b(n\033uds.)i(D'apr)m(\022)-46 b(es)43
b(la)0 4785 y(propri)m(\023)-46 b(et)m(\023)g(e)33 b(de)g(la)g
(fonction)f Fi(ajouter)p Fm(,)j(c)m(hacun)f(de)f(ces)h(arbres)f(\022)
-49 b(a)32 b(une)h(hauteur)g(b)s(orn)m(\023)-46 b(ee)33
b(par)1410 5005 y(0)p Fh(;)17 b Fm(ln)1584 5020 y Fd(2)1624
5005 y Fm(\(1\))p Fh(;)g(:)g(:)g(:)32 b(;)17 b Fm(ln)2065
5020 y Fd(2)2104 5005 y Fm(\()p Fh(n)22 b Fg(\000)h Fm(1\))0
5225 y(On)36 b(en)g(d)m(\023)-46 b(eduit)37 b(que)g(dans)f(le)g(pire)g
(des)h(cas)f(la)g(complexit)m(\023)-46 b(e)38 b(de)e
Fi(ajouter)p 2766 5225 V 39 w(liste)h Fm(p)s(our)e(une)i(liste)f(de)0
5345 y(taille)d Fh(n)g Fm(est)g(b)s(orn)m(\023)-46 b(ee)33
b(\(grossi)m(\022)-46 b(eremen)m(t\))35 b(par)d(:)1110
5565 y(0)22 b(+)g(ln)1360 5580 y Fd(2)1399 5565 y Fm(\(1\))g(+)g
Fg(\001)17 b(\001)g(\001)k Fm(+)h(ln)1962 5580 y Fd(2)2001
5565 y Fm(\()p Fh(n)h Fg(\000)f Fm(1\))28 b Fg(\024)g
Fh(n)17 b Fm(ln)2595 5580 y Fd(2)2651 5565 y Fh(n)0 5785
y Fm(Dans)43 b(la)h(fonction)f Fi(tri)p 925 5785 V 38
w(par)p 1116 5785 V 38 w(tas)p Fm(,)h Fi(\(ajouter)p
1786 5785 V 39 w(liste)53 b(l\))44 b Fm(est)g(un)g(tas)g(comp)s(ortan)m
(t)f Fh(n)h Fm(n\033uds)h(\(si)0 5906 y Fh(l)j Fm(est)e(de)h(longueur)f
Fh(n)p Fm(\))g(et)g(de)g(hauteur)g Fh(h)51 b Fg(\024)f
Fm(ln)1904 5921 y Fd(2)1960 5906 y Fh(n)p Fm(.)c(La)f(fonction)h
Fi(vider)h Fm(v)-5 b(a)46 b(e\013ectuer)h Fh(n)f Fm(app)s(el)p
Black 1885 6180 a(2)p Black eop
%%Page: 3 3
3 2 bop Black 0 84 a Fm(Corrig)m(\023)-46 b(e)33 b(TP3)g
Fl(Caml)2532 b Fm(T)-8 b(ri)32 b(par)h(tas)p 0 124 3820
4 v Black 0 407 a(\022)-49 b(a)42 b Fi(enleve)p 403 407
31 4 v 39 w(min)h Fm(sur)g(des)g(arbres)g(de)g(plus)g(en)g(p)s(etits)g
Fh(a)2117 422 y Fd(1)2157 407 y Fh(;)17 b(:)g(:)g(:)32
b(;)17 b(a)2443 422 y Ff(n)2532 407 y Fm(don)m(t)43 b(la)f(hauteur)h
(sera)g(toujours)0 527 y(inf)m(\023)-46 b(erieur)33 b(\022)-49
b(a)33 b Fh(h)p Fm(,)g(donc)g(\022)-49 b(a)32 b(ln)980
542 y Fd(2)1036 527 y Fh(n)p Fm(.)0 648 y(Or)k(dans)h(le)g(pire)g(des)g
(cas,)h(la)e(fonction)g Fi(min)p 1706 648 V 38 w(liste)i
Fm(e\013ectue)g Fh(h)2446 663 y Ff(a)2524 648 y Fm(comparaisons)f(p)s
(our)f(un)h(arbre)g Fh(a)0 768 y Fm(de)31 b(hauteur)f
Fh(h)544 783 y Ff(a)586 768 y Fm(.)g(Dans)g(notre)g(cas)h(le)g(nom)m
(bre)g(de)f(comparaisons)h(e\013ectu)m(\023)-46 b(ees)33
b(par)d(la)g(fonction)g Fi(vider)0 888 y Fm(sera)j(donc)g(b)s(orn)m
(\023)-46 b(e)33 b(par)f(:)1092 1108 y Fh(h)1148 1123
y Ff(a)1185 1132 y Fb(1)1247 1108 y Fm(+)22 b Fg(\001)17
b(\001)g(\001)j Fm(+)i Fh(h)1637 1123 y Ff(a)1674 1131
y Fa(n)1749 1108 y Fg(\024)28 b Fh(h)23 b Fm(+)f Fg(\001)17
b(\001)g(\001)j Fm(+)i Fh(h)28 b Fg(\024)g Fh(n)17 b
Fm(ln)2612 1123 y Fd(2)2668 1108 y Fh(n)0 1328 y Fm(On)33
b(en)g(d)m(\023)-46 b(eduit)33 b(que)h(la)e(complexit)m(\023)-46
b(e)35 b(dans)e(le)g(pire)g(des)g(cas)g(de)g Fi(tri)p
2523 1328 V 38 w(par)p 2714 1328 V 38 w(tas)g Fm(est)h(b)s(orn)m(\023)
-46 b(ee)33 b(par)1490 1548 y(2)p Fh(n)17 b Fm(ln)1695
1563 y Fd(2)1751 1548 y Fh(n)28 b Fm(=)f Fg(O)s Fm(\()p
Fh(n)17 b Fm(ln)g Fh(n)p Fm(\))0 2151 y Fk(3)161 b(T)-13
b(ri)54 b(par)g(tas)g(dans)f(un)g(tableau)0 2370 y Fj(11.)p
Black Black 0 2525 a Fi(let)f(max_noeud)i(t)d(i)h(=)103
2645 y(let)g(m)f(=)h(ref)g(i)f(in)103 2765 y(if)g(2*i+1)i(<)e(t.taille)
j(&&)e(t.tab.\(i\))h(<)f(t.tab.\(2*i+1\))j(then)205 2886
y(m)d(:=)f(2*i+1;)103 3006 y(if)g(2*i+2)i(<)e(t.taille)j(&&)e
(t.tab.\(!m\))i(<)d(t.tab.\(2*i+2\))k(then)205 3127 y(m)d(:=)f(2*i+2;)
103 3247 y(!m)g(;;)0 3402 y Fm(Av)-5 b(an)m(t)37 b(de)g(lire)g(la)g(v)
-5 b(aleur)37 b(d'un)g(\014ls)g(d'un)h(n\033ud,)f(il)g(faut)f
(s'assurer)i(que)g(ce)f(\014ls)h(existe.)g(P)m(our)f(cela,)0
3522 y(on)30 b(teste)h(si)f(son)g(indice)h(est)g(v)-5
b(alide,)30 b(c'est)h(\022)-49 b(a)30 b(dire)g(si)g(il)g(est)h(bien)g
(inf)m(\023)-46 b(erieur)30 b(strict)h(\022)-49 b(a)29
b(la)h(taille)g(couran)m(te)0 3642 y(du)j(tas.)0 3763
y(On)47 b(utilise)h(ici)f(une)h(r)m(\023)-46 b(ef)m(\023)g(erence)48
b(p)s(our)f(la)f(v)-5 b(ariable)48 b Fh(m)f Fm(car)g(elle)g(est)h(p)s
(eut)c(^)-46 b(etre)47 b(mo)s(di\014)m(\023)-46 b(ee)48
b(dans)g(le)0 3883 y(programme.)0 4053 y Fj(12.)p Black
Black 0 4208 a Fi(let)k(rec)g(entasser)i(t)d(i)h(=)103
4328 y(let)g(m)f(=)h(max_noeud)h(t)f(i)f(in)103 4449
y(if)g(m<>i)i(then)f(\()205 4569 y(let)g(temp=t.tab.\(i\))j(in)205
4690 y(t.tab.\(i\))f(<-)e(t.tab.\(m\);)205 4810 y(t.tab.\(m\))i(<-)e
(temp;)205 4930 y(entasser)h(t)f(m)g(\))f(;;)0 5085 y
Fm(Si)33 b Fh(m)28 b Fm(=)g Fh(i)33 b Fm(le)g(n\033ud)h(d'indice)g
Fh(i)f Fm(est)g(d)m(\023)-46 b(ej\022)d(a)33 b(plus)h(grand)e(que)i
(ses)g(\014ls)g(donc)f(le)g(sous-arbre)g(enracin)m(\023)-46
b(e)34 b(en)0 5205 y Fh(i)g Fm(est)h(d)m(\023)-46 b(ej\022)d(a)34
b(un)g(tas.)g(Dans)g(le)h(cas)f(con)m(traire,)h(on)f(in)m(terv)m(ertit)
h(le)g(n\033ud)f Fh(i)g Fm(est)h(son)f(plus)h(grand)f(\014ls.)h(Il)0
5326 y(faut)d(alors)g(faire)g(un)h(app)s(el)f(r)m(\023)-46
b(ecursif)34 b(au)e(niv)m(eau)h(du)g(sous-arbre)g(mo)s(di\014)m(\023)
-46 b(e)32 b(qui)h(n'est)h(plus)f(forc)m(\023)-46 b(emen)m(t)0
5446 y(un)33 b(tas.)p Black 1885 6180 a(3)p Black eop
%%Page: 4 4
4 3 bop Black 0 84 a Fm(Corrig)m(\023)-46 b(e)33 b(TP3)g
Fl(Caml)2532 b Fm(T)-8 b(ri)32 b(par)h(tas)p 0 124 3820
4 v Black 0 407 a Fj(13.)p Black Black 0 562 a Fi(let)52
b(construire_tas)j(tab)d(=)103 682 y(let)g(t)f(=)h({)f(tab=tab;)j
(taille=\(vect_length)i(tab\))c(})g(in)103 802 y(for)g(i=t.taille/2-1)j
(downto)d(0)g(do)205 923 y(entasser)h(t)f(i)103 1043
y(done;)103 1163 y(t)f(;;)0 1318 y Fm(Chaque)d(feuille)g(repr)m(\023)
-46 b(esen)m(te)49 b(d)m(\023)-46 b(ej\022)d(a)47 b(un)g(tas)g(v)-5
b(alide,)47 b(donc)g(on)g(commence)i(\022)-49 b(a)46
b(app)s(eler)h(la)g(fonction)0 1438 y Fi(entasser)c Fm(\022)-49
b(a)41 b(partir)g(des)h(sous-arbres)h(qui)e(ne)h(son)m(t)g(pas)f(r)m
(\023)-46 b(eduits)43 b(\022)-49 b(a)41 b(une)g(feuille.)i(On)e
(parcoure)h(le)0 1559 y(tableau)37 b(de)h(droite)f(\022)-49
b(a)37 b(gauc)m(he)h(p)s(our)f(a)m(v)m(oir)g(toujours)g(la)g(propri)m
(\023)-46 b(et)m(\023)g(e)38 b(que)g(les)g(\014ls)g(du)f(n\033ud)h
(couran)m(t)0 1679 y(son)m(t)33 b(d)m(\023)-46 b(ej\022)d(a)33
b(des)g(tas.)0 1849 y Fj(14.)p Black Black 0 2004 a Fi(let)52
b(retire_max)i(t)e(=)103 2125 y(let)g(temp)g(=)f(t.tab.\(0\))j(in)103
2245 y(t.tab.\(0\))f(<-)f(t.tab.\(t.taille-1\);)103 2365
y(t.tab.\(t.taille-1\))k(<-)51 b(temp;)103 2486 y(t.taille)i(<-)f
(t.taille)h(-1)f(;)103 2606 y(entasser)h(t)e(0)h(;;)0
2761 y Fm(On)27 b(\023)-46 b(ec)m(hange)30 b(la)f(racine)h(de)g
(l'arbre)g(a)m(v)m(ec)h(le)f(dernier)d(\023)-46 b(el)m(\023)g(emen)m(t)
31 b(v)-5 b(alide)30 b(du)g(tableau)f(et)h(on)f(d)m(\023)-46
b(ecr)m(\023)g(emen)m(te)0 2881 y(la)35 b(taille)h(du)g(tas.)g(Ce)g
(dernier)h(con)m(tien)m(t)f(donc)g(un)e(\023)-46 b(el)m(\023)g(emen)m
(t)37 b(de)f(moins.)g(La)f(v)-5 b(aleur)36 b(de)g(la)f(racine)i(du)0
3002 y(nouv)m(eau)f(tas)f(n')m(\023)-46 b(etan)m(t)35
b(certainemen)m(t)i(pas)e(v)-5 b(alide)35 b(il)g(faut)f(faire)g(un)h
(app)s(el)g(\022)-49 b(a)35 b Fi(entasser)p Fm(.)h(Cet)g(app)s(el)0
3122 y(est)d(coh)m(\023)-46 b(eren)m(t)34 b(car)f(les)g(\014ls)h(de)f
(la)f(racine)h(son)m(t)g(bien)h(des)f(tas.)0 3292 y Fj(15.)p
Black Black 0 3447 a Fi(let)52 b(vide_tas)h(t)f(=)103
3567 y(while)g(t.taille)i(>)d(1)h(do)205 3688 y(retire_max)i(t)103
3808 y(done)e(;;)0 3963 y Fm(Au)31 b(fur)f(et)h(\022)-49
b(a)30 b(mesure)i(que)g(l'on)f(vide)g(le)g(tas,)g(la)f(zone)i(droite)e
(du)h(tableau)g(qui)g(con)m(tien)m(t)h(les)d(\023)-46
b(el)m(\023)g(emen)m(ts)0 4083 y(non)46 b(v)-5 b(alide)46
b(du)f(tas)h(\(d'indice)h(sup)m(\023)-46 b(erieur)47
b(ou)c(\023)-46 b(egale)45 b(\022)-49 b(a)46 b(la)f(taille)h(couran)m
(te\))g(se)g(remplie)h(a)m(v)m(ec)g(les)0 4203 y(plus)36
b(grands)d(\023)-46 b(el)m(\023)g(emen)m(ts)37 b(du)f(tas)f(initial)h
(tri)m(\023)-46 b(e)36 b(par)f(ordre)g(croissan)m(t.)i(Lorsque)f(le)g
(tas)f(n'a)h(plus)g(qu'un)-3 4324 y(\023)-46 b(el)m(\023)g(emen)m(t,)34
b(le)f(tableau)g(est)h(tri)m(\023)-46 b(e.)0 4494 y Fj(16.)p
Black Black 0 4649 a Fi(let)52 b(tri_par_tas_vect)k(tab)c(=)103
4769 y(let)g(t)f(=)h(construire_tas)j(tab)d(in)103 4889
y(vide_tas)h(t;)103 5010 y(t.tab)f(;;)p Black 1885 6180
a Fm(4)p Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
