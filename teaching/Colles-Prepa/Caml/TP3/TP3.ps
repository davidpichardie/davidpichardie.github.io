%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: TP3.dvi
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o TP3.ps TP3.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.27:0943
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin /setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse /TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def /TeXcolorgrey{setgray}def /TeXcolorgray{
setgray}def /TeXcolorhsb{sethsbcolor}def /currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse /DC{exch dup userdict exch
known{pop pop}{X}ifelse}B /GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC /Goldenrod{0 0.10 0.84 0 setcmykcolor}
DC /Dandelion{0 0.29 0.84 0 setcmykcolor}DC /Apricot{0 0.32 0.52 0
setcmykcolor}DC /Peach{0 0.50 0.70 0 setcmykcolor}DC /Melon{0 0.46 0.50
0 setcmykcolor}DC /YellowOrange{0 0.42 1 0 setcmykcolor}DC /Orange{0
0.61 0.87 0 setcmykcolor}DC /BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC /RedOrange{0 0.77 0.87 0
setcmykcolor}DC /Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC /Maroon{0
0.87 0.68 0.32 setcmykcolor}DC /BrickRed{0 0.89 0.94 0.28 setcmykcolor}
DC /Red{0 1 1 0 setcmykcolor}DC /OrangeRed{0 1 0.50 0 setcmykcolor}DC
/RubineRed{0 1 0.13 0 setcmykcolor}DC /WildStrawberry{0 0.96 0.39 0
setcmykcolor}DC /Salmon{0 0.53 0.38 0 setcmykcolor}DC /CarnationPink{0
0.63 0 0 setcmykcolor}DC /Magenta{0 1 0 0 setcmykcolor}DC /VioletRed{0
0.81 0 0 setcmykcolor}DC /Rhodamine{0 0.82 0 0 setcmykcolor}DC /Mulberry
{0.34 0.90 0 0.02 setcmykcolor}DC /RedViolet{0.07 0.90 0 0.34
setcmykcolor}DC /Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC /Lavender{0
0.48 0 0 setcmykcolor}DC /Thistle{0.12 0.59 0 0 setcmykcolor}DC /Orchid{
0.32 0.64 0 0 setcmykcolor}DC /DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}
DC /Purple{0.45 0.86 0 0 setcmykcolor}DC /Plum{0.50 1 0 0 setcmykcolor}
DC /Violet{0.79 0.88 0 0 setcmykcolor}DC /RoyalPurple{0.75 0.90 0 0
setcmykcolor}DC /BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC /Periwinkle
{0.57 0.55 0 0 setcmykcolor}DC /CadetBlue{0.62 0.57 0.23 0 setcmykcolor}
DC /CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC /MidnightBlue{0.98 0.13
0 0.43 setcmykcolor}DC /NavyBlue{0.94 0.54 0 0 setcmykcolor}DC
/RoyalBlue{1 0.50 0 0 setcmykcolor}DC /Blue{1 1 0 0 setcmykcolor}DC
/Cerulean{0.94 0.11 0 0 setcmykcolor}DC /Cyan{1 0 0 0 setcmykcolor}DC
/ProcessBlue{0.96 0 0 0 setcmykcolor}DC /SkyBlue{0.62 0 0.12 0
setcmykcolor}DC /Turquoise{0.85 0 0.20 0 setcmykcolor}DC /TealBlue{0.86
0 0.34 0.02 setcmykcolor}DC /Aquamarine{0.82 0 0.30 0 setcmykcolor}DC
/BlueGreen{0.85 0 0.33 0 setcmykcolor}DC /Emerald{1 0 0.50 0
setcmykcolor}DC /JungleGreen{0.99 0 0.52 0 setcmykcolor}DC /SeaGreen{
0.69 0 0.50 0 setcmykcolor}DC /Green{1 0 1 0 setcmykcolor}DC
/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC /PineGreen{0.92 0 0.59
0.25 setcmykcolor}DC /LimeGreen{0.50 0 1 0 setcmykcolor}DC /YellowGreen{
0.44 0 0.74 0 setcmykcolor}DC /SpringGreen{0.26 0 0.76 0 setcmykcolor}
DC /OliveGreen{0.64 0 0.95 0.40 setcmykcolor}DC /RawSienna{0 0.72 1 0.45
setcmykcolor}DC /Sepia{0 0.83 1 0.70 setcmykcolor}DC /Brown{0 0.81 1
0.60 setcmykcolor}DC /Tan{0.14 0.42 0.56 0 setcmykcolor}DC /Gray{0 0 0
0.50 setcmykcolor}DC /Black{0 0 0 1 setcmykcolor}DC /White{0 0 0 0
setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (TP3.dvi)
@start
%DVIPSBitmapFont: Fa cmsy10 12 5
/Fa 5 104 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<EC0780A3140F92CEFCA2
5C141EA2143E143C147C5CA2495A495A1307495A495A49CFFC137E5BEA03F8EA0FE0003F
BDFCBE1280A2003F1C00D80FE0CFFCEA03F8C67E137E7F6D7E6D7E6D7E13036D7E6D7EA2
147C143C143E141EA2141F80A2811407A359347BB264>32 D<1AF0A3861A78A21A7C1A3C
A21A3E1A1E1A1F747EA2747E747E87747E747E1B7E87757EF30FE0F303F8007FBC12FEBE
1280A26CF3FE00CEEA03F8F30FE0F31F8051C7FC1B7E63505A505A63505A505AA250C8FC
1A1E1A3E1A3CA21A7C1A78A21AF862A359347BB264>I<ED0FE015FF913803FC00EC0FE0
EC3FC04A5A4AC7FC5C495AA2495AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFF
E0A2EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E6E7EEC0F
E0EC03FC913800FFE0150F236479CA32>102 D<12FEEAFFE0EA07F8EA00FEEB7F806D7E
6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0A2913803
FC00EC0FE0EC3FC04A5A4AC7FC5C495AA2495AB3AD495AA2495A131F495A495A01FEC8FC
EA07F8EAFFE048C9FC236479CA32>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi12 12 3
/Fb 3 117 df<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA0180
A2EA0300A212065AA25A5A12200B1D78891B>59 D<141E143F147F14FFA3147E14381400
AE133EEBFF803801C3C0380301E01206000C13F0A2121813031230A21260EB07E0A238C0
0FC0A21200EB1F80A3EB3F00A2137EA35BA2485AA214013803F003A33807E006A3EBC00C
A21418A21430000313603801E1C03800FF80EB3E0018437DC121>105
D<141C143E147EA25CA4495AA4495AA4495AA3007FB512F8B6FC7E39000FC000A2495AA4
49C7FCA4137EA45BA4485AA4485AA3152048481360A215C0A2485AEC0180EC0300A20007
13065C00035B5C3801E0E06CB45A013FC7FC1D3F7EBD23>116 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmcsc10 12 4
/Fc 4 110 df<DB03FF140C033F01F0131C4AB500FC133C91390FFE007FDA1FF090380F
C07CDA7F80903803E0FC4948C812F0D903FC15794948153FD91FF0151F4948150F494815
074A150349C9FC48481601120349160012074848177CA24848173CA2123FA249171C127F
A319005B12FFAC127F7FA2191CA2123F7FA2001F183C19386C7EA26C6C1778000318706D
17F0000118E06C6C16016D6C16C06E15036D6CED07806D6CED0F00D907F8151E6D6C5D6D
B45D6D6C6C495ADA1FF0EB07C0DA0FFEEB7F800201B500FEC7FCDA003F13F0030313803E
4879C54E>67 D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A
6C7EA34A6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA249
81011CC7121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7E
D81FF84A7EB5027F13F8A335357CB43D>97 D<B512FEA3000390C9FCEA01FCB3A9EE01C0
A416031780A41607A2160F161FA2167FEEFF00486C1307B8FCA32A337BB233>108
D<D8FFFEEE7FFFA26D93B5FC000318C06C1880D9DF80EC01DFA2D9CFC0EC039FA3D9C7E0
EC071FA2D9C3F0140EA3D9C1F8141CA2D9C0FC1438A3027E1470A26E14E0A391391F8001
C0A291390FC00380A3913907E00700A2913803F00EA36E6C5AA26E6C5AA3ED7E70A26F5A
A3486C6D5A487ED81FFC6D48EB3FC0B50080020FB5FCA2ED070040337BB24A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmti12 12 17
/Fd 17 118 df<EB01E0EB03F01307130FEB1FE0EB3FC0EB7F80EBFE00485A485A485AEA
0FC0485A90C7FC123E12785A5A124014135FC432>19 D<007FB5FCB6FCA214FEA2180578
9723>45 D<EC1F80EC7FE0903901F07070903907C039F890380F801D90381F001F013E6D
5A137E5B484813075E485A120749130F000F5DA2485A151F003F5D5BA2153F007F92C7FC
90C7FCA25D157E12FEA29238FE0380EDFC071700A2007E13015E913803F80E1407003E01
0F131E161C6C131C02385B3A0F80F078783A07C3E07C703A01FF801FE03A007E00078029
2D76AB32>97 D<EC0FE0EC7FF8903801F81E903807E00F90390F80078090381F0003017E
14C049131F0001143F5B4848EB7F801207485AED3E00484890C7FCA2485AA2127F90C9FC
A35A5AA45AA5ED0180ED03C0ED0780A2007CEC0F00007E141E003E147C15F06CEB03E039
0F800F802607C07EC7FC3801FFF838007FC0222D75AB2D>99 D<EE07F0ED03FFA3923800
0FE01607160FA217C0A2161FA21780A2163FA21700A25EA2167EA216FEA25EEC1F80EC7F
E1903801F071903907C039F890380F801D90381F001F013E130F017E5C5B48481307A248
485C120749130F120F5E485A151F123F495CA2153F127F90C790C7FCA25DA200FE147EA2
9238FE0380160703FC1300A2007E13015E913803F80E1407003E010F131E161C6C131C02
385B3A0F80F078783A07C3E07C703A01FF801FE03A007E0007802C4676C432>I<EC0FE0
EC7FF8903801F83E903807C00F90391F800780EB3F00017E14C0491303485A4848130700
0715805B000F140F484814005D4848133E15FCEC07F0007FEBFFC0D9FFFEC7FC14C090C9
FC5A5AA55AA4ED0180ED03C0007CEC0780A2007EEC0F00003E141E157C6C14F06CEB03E0
3907800F802603C07EC7FC3801FFF838003FC0222D75AB2D>I<EE0F80EE3FE0EEF87092
3801F038923803E0F8923807E1FC16C3ED0FC7A2EE87F892381F83F0EE81E0EE8000153F
93C7FCA45D157EA415FE5DA349B512FEA390260001F8C7FCA314035DA414075DA4140F5D
A4141F5DA4143F92C8FCA55C147EA314FE5CA413015CA4495AA35C1307121C007F5B12FF
495AA291C9FC485AEAF81E485AEA7878EA1FF0EA07C02E5A83C51E>I<EB03F8EA01FFA3
380007F013031307A214E0A2130FA214C0A2131FA21480A2133FA21400A25BA2137EA213
FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA2
387F01C01303007E1380A2130700FE130012FCA25B130EEA7C1E131CEA3C3CEA3E786C5A
EA07C0154678C419>108 D<D801F0D90FE0EB07F0D803FCD97FF8EB3FFC28071E01F03E
EBF81F3E0E1F03C01F01E00F80271E0F8700D983807F001C018E90390F870007003C019C
148E003801B802DC8002F814FC26781FF05C0070495CA24A5C00F0494948130FD8E03F60
91C75B1200043F141F4960017E92C7FCA24C143F01FE95C7FC49147E6104FE147E120149
4A14FE610301EE0780000305011400494A14F8A2030302035B0007F0F00E495C1A1E0307
EDE01C000F193C494A153862030F020113F0001FF0F1E0494A903800FF800007C7D80380
023EC7FC492D78AB50>I<D801F0EB0FE0D803FCEB7FF83A071E01F03E3A0E0F03C01F00
1ED987001380001C018E130F003C139C003801B814C014F838781FF000705BA25C00F049
131FD8E03F158091C7FC1200163F491500137EA25E01FE147E5B16FE5E12014913015E17
0F00030203130E4914F0A20307131E0007EDE01C5B173CEEC038000F167849157017E0ED
03C1001FEDE3C049903801FF000007C8127C302D78AB37>I<EC0FE0EC7FFC903801F83E
903907E00F8090390F8007C0EB1F00017EEB03E04914F0A248481301484814F81207485A
A2485AA2485A1503127F90C7FCA215074815F05AA2150F16E05AED1FC0A21680153F1600
5D157E5D007C495A007E495A003E5C4A5A6CEB1F80260F803EC7FC3807C0FC3801FFF038
003F80252D75AB32>I<D903E0137E903A07F801FF80903A0E3C0783E0903A1C1E0F01F0
903A3C1F1C00F801385B017849137C01705BA24A48137E01E05BA292C7FC00015B13C014
7EC7FC02FE14FEA25CA20101140117FC5CA20103140317F85CA20107EC07F0A24AEB0FE0
A2010F15C0EE1F80163F1700496C137E5E4B5A9138B803F090393F9C07E091389E0F80DA
07FEC7FCEC01F849C9FCA2137EA213FEA25BA21201A25BA21203A21207B512F0A25C2F3F
7FAB32>I<91381F800C91387FE01C903901F0703C903907C0387890390F801CF890381F
001D013E130F017E14F05B48481307A2484814E012075B000F140F16C0485AA2003F141F
491480A3007F143F90C71300A35D00FE147EA315FE5DA2007E1301A24A5A1407003E130F
A26C495A143B380F80F33807C3E73901FF87E038007E071300140F5DA3141F5DA3143F92
C7FCA25CA25C017F13FEA25D263F76AB2D>I<D801F0EB3F803A03FC01FFF03A071E03C0
F83A0E0F0F007C001E90389E01FC001C139CECB803003813F0A2D91FE013F80078EC00E0
0070491300A200F05BEAE03F91C8FC1200A25B137EA313FE5BA312015BA312035BA31207
5BA3120F5BA3121F5B0007C9FC262D78AB29>I<EC0FE0EC7FF8903801F01E903803C00F
90390780078090380F0003011E14C0150749131FA2017CEB3F801378137CED0E0092C7FC
137E137F14F014FF6D13C06D13F06D7F6D7F1300EC0FFE14011400157F81120E003F141E
487EA2153E48C7123CA200FC5C12705D0078495A6C495A6CEB0F80260F803EC7FC3803FF
F838007FC0222D7AAB28>I<1470EB01F8A313035CA313075CA3130F5CA3131F5CA2007F
B512E0B6FC15C0D8003FC7FCA25B137EA313FE5BA312015BA312035BA312075BA3120F5B
A2EC0780001F140013805C140E003F131EEB001C143C14385C6C13F0495A6C485AEB8780
D807FEC7FCEA01F81B3F78BD20>I<137C48B414072603C780EB1F80380703C0000F7F00
0E153F121C0107150012385E1278D8700F147E5C011F14FE00F05B00E05DEA003FEC0001
A2495C137E150313FE495CA215071201495CA2030F13380003167849ECC070A3031F13F0
EE80E0153F00011581037F13C06DEBEF8300000101148090397C03C787903A3E0F07C700
90391FFE01FE903903F000782D2D78AB34>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmtt12 12 50
/Fe 50 126 df<903903E001F0A2496C487EA8010F1307A202E05BA4007FB712E0A2B812
F0A36C16E06C16C03B001FC00FE000013F131FA202805BA9017F133FA202005B003FB712
C04816E0B812F0A36C16E0A2C648C66CC7FCA400015CA2495BA86C48137CA22C3D7DBC33
>35 D<140FEC3F80147F14FF491300495AEB07F8495A495A495A495A49C7FC5B12015B48
5A12075B120F5B121F5BA2123F5BA2127F90C8FCA45A5AAD7E7EA47F123FA27F121FA27F
120F7F12077F12036C7E7F12007F6D7E6D7E6D7E6D7E6D7EEB03FE6D7E6D1380147F143F
EC0F00194D6FC433>40 D<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E6C7E6C7E6D7E133F
80131F6D7E801307801303801301A2801300A28080A41580143FAD147F1500A45C5CA213
015CA213035C13075C130F5C495A133F5C137F49C7FC485A485A485A485AEA3FE0485A48
5A90C8FC5A1278194D78C433>I<14F0497EA8007015E000F8EC01F000FE140700FF140F
01C1133F01F113FF263FF9F913C0000FB61200000314FCC614F06D5B011F1380D907FEC7
FC90381FFF80017F13E090B57E000314FC000F14FF263FF9F913C026FFF1F813F001C113
3F0101130F00FE140700F814010070EC00E000001500A86D5A242B79B333>I<EA07C0EA
0FF0EA1FF8123F13FCA213FEA2121F120F1207EA007E13FEA213FC1201EA03F81207EA0F
F0EA7FE012FF13C013005A12780F196E8A33>44 D<007FB612FEA2B8FCA36C15FEA22807
7BA133>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B6C8A33>I<14FF0103
13C0010F13F0497F497F497F9038FF81FF3A01FE007F804848EB3FC049131F4848EB0FE0
A24848EB07F0A24848EB03F8A24848EB01FCA348C812FEA4007E157E00FE157FAE6C15FF
6C15FEA46D1301003F15FCA26D1303001F15F8A26C6CEB07F0A26C6CEB0FE06D131F6C6C
EB3FC0A26CB4EBFF806C018113006DB45A6D5B6D5B6D5B010313C0010090C7FC283F7BBD
33>48 D<EB01E0497EA21307A2130FA2131F133F137F13FF1203123F5AEAFFF713E71387
EA7E071200B3B3A2003FB512FE48801680A216006C5C213E76BD33>I<EB03FF011F13E0
017F13FC48B57E48ECFF804815C0260FFE0313E03A1FF0007FF049EB1FF84848130F49EB
03FC127F90C7EA01FE4814005A6C15FF167FA3127E123CC9FCA216FF16FEA2150116FC15
0316F81507ED0FF0ED1FE0153F16C0ED7F80EDFF004A5AEC07FC4A5A4A5A4A5A4A5A4A5A
4990C7FC495AEB07F8EB1FF0495A495A495A4890C8FC4848143E4848147FEA0FF0485A48
B7FCB8FCA37E6C15FE283E7BBD33>I<903801FFC0010F13F8013F13FF90B67E48814881
489038807FF03A0FFC000FF801F06D7E484813036F7EA21500A26C5A6C5AC9FC15015EA2
15034B5A150F4B5A4B5A913803FFC00103B55A4991C7FC5D8116C06D8090C76C7EED0FF8
ED03FC6F7E6F7E821780163FA2EE1FC0A3123C127EB4FCA2163F1780167F6C16006D5C6D
495A6C6C1303D81FF8EB0FFC3A0FFF807FF86C90B55A6C5D6C15806C6C91C7FC010F13FC
010113C02A3F7CBD33>I<15FF4A7F5C5CA25C5C15DFEC3F9FA2EC7F1F14FEA2EB01FCA2
EB03F8EB07F0A2EB0FE0EB1FC0A2EB3F80A2EB7F0013FEA2485A12035B485AA2485A485A
A2485AA248C7FC12FEB812E017F0A46C16E0C8381F8000AC021FB512804A14C04A14E0A2
6E14C06E14802C3E7DBD33>I<0007B612F04815F85AA316F001C0C8FCB0ECFFC001C713
F801DF7F90B6FC168016C0028013E09039FC001FF001F0EB0FF849130749EB03FC6C4813
016CC713FEC9FCA216FF167FA41218127EA2B415FF16FEA24814016C15FC6C14036DEB07
F86D130F6C6CEB1FF06C6CEB7FE09039FE03FFC06CB612806C150000015C6C14F8013F13
E0010390C7FC283E7BBC33>I<EC07FC91383FFF8091B512C0010314F0130F4914F89038
3FFC0790397FE003FCEBFFC0481300485A5B4848EB01F849EB00F0000F15005B121F5B12
3F5BA2127FEB0004903801FFF0010713FCD8FF1F7F4848EBFF8090B612C0B712E09038FE
007F01F8EB1FF049EB0FF849EB07FC49130349EB01FEA290C8FC16FF167FA37EA47F123F
16FF6D14FE121F15016C6CEB03FC6D13076C6C14F86DEB1FF06C6C133F3A01FF80FFE06C
90B512C06D14806DEBFE006D5B010713F001001380283F7BBD33>I<127CB8128017C0A4
178048C813004B5A4B5A007C4A5AC8485A5E151F4B5A4B5A93C7FC5D5D4A5A14035D1407
5D140F5D141F5D143F5DA24AC8FCA25C5CA213015CA3495AA413075CA5130F5CAA6D5A6D
5A2A3F7CBD33>I<ECFFC0010713F8011F13FE017F6D7E90B67E4881489038807FF03A07
FE001FF8D80FF8EB07FC49130348486D7E491300003F814980A66C6C14FEA26C6C495A6D
13036C6C495AD803FEEB1FF03A01FF807FE06C90B55A013F91C7FC010F13FCA2013F13FF
90B612C0489038807FE03A07FC000FF848486D7ED81FE0EB01FE4913004848147F007F16
8090C8123FA200FEED1FC0A76C153F6C16806D147F003F16006D5C6C6C495A01F813076C
6C495A3A07FF807FF86C90B55A6C5D6C6C14806D91C7FC010713F8010013C02A3F7CBD33
>I<49B47E010F13E0013F13F84913FE90B6FC0003158048018113C09038FC007F4848EB
1FE04848EB0FF0485A49EB07F84848130390C7FCED01FC5A5A16FE1500A416FFA37E7E6D
5BA26C6C5B6D5B6C6C5B6C6C5BD807FE137F90B7FC6C157F6C14FC6C6CEBF8FF6DEBE0FE
010F1380903800200091C7FC150116FCA2150316F8150716F0000F140F486CEB1FE0486C
133F16C0EDFF804A13004A5A381FF01F90B512F86C5C6C5C6C1480C649C7FCEB3FF0283F
7BBD33>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00C7FCB3A3121FEA3F80EA
7FC0EAFFE0A5EA7FC0EA3F80EA1F000B2B6CAA33>I<EA07C0EA0FE0EA1FF0EA3FF8A5EA
1FF0EA0FE0EA07C0C7FCB3A3EA07C0EA0FE0EA1FF0EA3FF8A213FCA3121F120F12071200
A2120113F81203EA07F0120FEA1FE0127FEAFFC01380130012FC12700E396EAA33>I<00
7FB71280A2B812C0A36C16806C1600CBFCA9003FB7FC481680B812C0A36C1680A22A177C
A933>61 D<1210127CB4FC7F13E07FEA7FFC6C7E380FFF806C13E000017F6C13FCEB3FFE
6D6C7E01077F010113F06D7FEC3FFE6E7E020713C06E13E0020013F8ED7FFE151FED0FFF
1503150FED1FFE157FEDFFF8020313E04A13C0021F13004A5AECFFF8495B010713C0011F
5B4948C7FCEBFFFC4813F000075B481380D83FFEC8FC485AEAFFF05B138090C9FC127C12
1028337BB733>I<D87FFC90381FFFE0486C4913F07FA36C6D6C13E00003913800FC0013
F780A213F380A3EBF1F0A38013F0A280A2147C147EA2143E143FA2801580A3140F15C0A2
140715E0A2140315F0A21401A215F81400A3157CA3153C153EA2151E151F387FFF80B5EA
C00FA315076C496C5A2C3D7DBC33>78 D<003FB712F84816FCB8FCA43AFE000FE001A800
7CED00F8C71500B3B3A40107B512C049804980A26D5C6D5C2E3D7EBC33>84
D<D87FFF903803FFF8B56C4813FCA46C496C13F8D807F09038003F806D147F00031600A3
6D5C00015DA46C6C495AA46D13036D5CA3EC8007013F5CA3ECC00F011F5CA46D6C485AA4
6D6C485AA4010391C7FC6E5AA30101137EA2ECFCFEA201005BA5EC7FF8A46E5AA26E5A6E
5A2E3E7EBC33>86 D<007FB512C0B612E0A415C048C8FCB3B3B3ABB612C015E0A46C14C0
1B4D6CC433>91 D<007FB512C0B612E0A47EC7120FB3B3B3AB007FB5FCB6FCA46C14C01B
4D7DC433>93 D<007FB612FEA2B8FCA36C15FEA228077B7D33>95
D<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F6C48806C4813
1FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00EA3FF0EA7FC0
5B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C14F36C14C1C6
9138003FF0D91FF090C7FC2D2E7BAC33>97 D<EA3FFC487E12FFA2127F123F1200ABEC01
FE91380FFFC04A13F0027F7F91B512FE90B7FCECFE07DAF800138002E0EB7FC04AEB3FE0
4A131FEE0FF091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17
E06E131FEE3FC06E137F9139F801FF80DAFE07130091B55A495C6E5BD97E3F13E0D93C0F
138090260003FEC7FC2E3E7FBC33>I<ECFFF0010713FE011FEBFF804914C04914E048B6
12F048EBC01F9038FE000F485A485A4848EB07E049EB03C0484890C7FC5BA2127F90C9FC
A25A5AA97E7EA27F003FEC01F06DEB03F86C7E6D13076C6C14F06C6C130F01FFEB1FE06C
EBE07F6C90B512C06C1580013F14006D13FC01075B010013C0252E79AC33>I<ED7FF84B
7E5CA280157F1501ABEB01FF010713C1011F13F1017F13F990B6FC5A4813813907FE003F
D80FF8131F49130F48481307491303123F491301127F90C7FCA25A5AA97E7E15037F123F
6D1307A26C6C130F6D131F6C6C133F6C6C137F2603FF81B512F091B612F8C602FD13FC6D
13F96D01E113F8010F018013F0D901FEC8FC2E3E7DBC33>I<ECFF80010713F0011F13FC
497F90B6FC48158048018013C03A07FE003FE001F8EB0FF048481307484814F849130300
3F15FC491301127F90C7FC16FE15005A5AB7FCA516FC48C9FC7E7EA36C7E167C6C6C14FE
7F6C7E6D13016C6CEB03FC6CB4130F6C9038C03FF86C90B512F06D14E06D14C0010F1400
010313FC9038007FE0272E7BAC33>I<ED3FE0913801FFFC020713FE141F4A13FF5CECFF
C015004948137E4A133C010314005CA8003FB612F84815FCB7FCA36C15F8260003F8C7FC
B3AD003FB612804815C0A46C1580283E7DBD33>I<14E0EB03F8A2497EA36D5AA2EB00E0
91C8FCAA383FFFF8487FA47EEA0001B3AD007FB612C0B712E016F0A216E06C15C0243E78
BD33>105 D<1570EC01FCA2EC03FEA3EC01FCA2EC00701500AA90383FFFFC4913FE90B5
FCA27F7F90C7FCB3B3A9140115FCA21218007EEB03F81407B414F0140F9038803FE090B5
12C06C14806C14006C5B6C13F8000113E01F557BBD33>I<383FFFFC487FB5FCA27E7EC7
FCB3B3AD003FB612F84815FCB712FEA26C15FC6C15F8273D7ABC33>108
D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F13872607FE
07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3A53C7FFE0FFF07FF80B548
018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC0713C0267FFE1F13F000FF
017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFF
F80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33>I<EB01FE90
380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848EB7FC049133F4848EB
1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C14036C15F8A26D1307
003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF802603FF0313006CEBFFFE
6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<EC01FE3A3FFC0FFFC0486C4813F0
00FF017F7F91B512FE6CB7FC6CEBFE07C6D9F800138002E0EB7FC04AEB3FE04A131FEE0F
F091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17E06E131FEE
3FC06E137F9139F801FF80DAFE07130091B55A495C6E5B6E13E0020F1380DA03FEC7FC91
C9FCAF383FFFF8487FB57EA26C5B6C5B2E427FAB33>I<ED03FE3B7FFF801FFF80B5D8C0
7F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF09139FFC007E092388003C092
C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>114
D<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE147F5A153F
A37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C680011F13FF0100
1480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14E06D130F6D
EB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7FC242E79AC
33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3161FEE3F80
A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07FCC7FC2938
7EB633>I<D83FFCEB1FFE486C497E00FF5CA2007F80003F800000EC007FB3A75EA25DA2
6D5B90387F800FDAE03F13FC6DB612FE17FF6D806D01FE13FE01039038F83FFC010001C0
C7FC302C7FAA33>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13F86C496C13
F0D801F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC8007011F5CA2
ECC00F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE01005BA214
FF6E5AA36E5AA26E5A6E5A2E2B7EAA33>I<3B3FFFC07FFF80486DB512C0B500F114E0A2
6C01E014C06C496C13803B00FE000FE000017F495AEB3F804B5A6D6C48C7FC90380FE07E
903807F0FEECF1FC903803FBF8EB01FF6D5B5D6E5A143F6E5A143F814A7E14FF903801FB
F0ECF9F8903803F1FCEB07E0157E90380FC07F011F6D7E90383F801F02007F496D7E01FE
6D7E484813033B7FFFC03FFFE0B56C4813F0A46C496C13E02C2B7DAA33>120
D<3B7FFF801FFFE0B56C4813F06E4813F8A24A6C13F06C496C13E0D803F8C7EAFC000001
14015E7F000014036D5C137EA2017F495A7FA26E485A131FA26D6C485AA214E0010749C7
FCA214F01303157EEB01F8A2157C010013FC14FC5D147C147DEC3FF0A36E5AA36E5AA214
1F5DA2143F92C8FCA3147EA214FE003F5B1301387F81F81383EB87F0139FEBFFE06C5B5C
6C90C9FCEA0FFCEA03F02D427DAA33>I<ED07FEED7FFF4AB5FC14075C4A13FE91383FFE
0015E0EC7F8092C7FCB3A45C495A1303EB1FFCEA3FFFB55A14E05C8014F8003F7FEA001F
EB03FE13016D7E80B3A481EC3FE015FE91381FFFFE6E13FF8014016E7EED07FE284D7BC4
33>123 D<127CA212FEB3B3B3B3127CA2074D6AC433>I<EA7FF0B5FC14C014F0806C7F38
003FFE1303EB00FF80B3A4816E7E81EC1FFCEDFFFC6E13FF1403805C140F4A13FCEDFC00
EC3FE05D4A5A92C7FCB3A45CEB03FE133F387FFFFCB55A5C14C091C8FCEA7FF0284D7BC4
33>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmr12 12 60
/Ff 60 122 df<4AB4FC020F13C091383F00F002FC1338D901F0130C4948131E4948133E
4948137F011F5C49C7FCA2013E147E017E143C93C7FCAD167FB8FCA3D8007EC7FC8282B3
B001FFEC7F80007FD9FC1FB5FCA330467EC536>12 D<127812FCA27E7E6C7E123FEA0FC0
6C7E6C7E12016C7E137C7F130E7FEB0380EB0100111275C431>18
D<130FEB1F80A2133F137FEBFF005BEA01F8485A485A5B485A48C7FC123E12385A5A1240
11126CC431>I<13FCA4EBFF80EB1FE0EB07F0EB01F814FC1300A3130114F8EB07F0EB3F
E0B51280EBF0001612737E2B>24 D<02FFED7F80010701E0903803FFE090261F80F89038
07C1F890263E003C90381E007C49010F497F496D6C487F48486D6C4814804848DAE1E0EB
0FC00007EC01E34848DAF3C0EB07E0001FEC00FF4918F0003F6F5A1903A248C816F870C7
FCA25AA294B6FCA294C9FCA67E836D147F123FA2711418001F15FF7F000F912601F3E014
306C6C14E10003912603E0F014606C6C4A6C14C06C6C902607807CEB0180017C90260F00
1EEB03006D013C6D130E90261F80F8903807E03C902607FFE0903801FFF0010090C8EA3F
C0452E7DAC4C>27 D<121E123FEA7F80EAFFC0A313E0127FEA3F60121E1200A513C0A4EA
0180A2EA0300A212065AA25A5A12200B1D78C41B>39 D<1406140E14181430147014E0EB
01C0EB0380EB0700A2130E5B133C133813785BA2485AA2485AA212075BA2120F90C7FCA2
5A121EA2123EA3123C127CA6127812F8B21278127CA6123C123EA3121EA2121F7EA27F12
07A27F1203A26C7EA26C7EA213781338133C131C7F7FA2EB0380EB01C0EB00E014701430
1418140E1406176477CA26>I<7E7E12607E12387E7E7E6C7EA26C7E6C7E7F137013787F
A27FA27FA214801307A214C01303A214E01301A214F0A3130014F8A61478147CB2147814
F8A614F01301A314E0A2130314C0A213071480A2130F1400A2131EA25BA25B137013F05B
485A485AA248C7FC120E5A5A12305A5A5A16647ACA26>I<16C04B7EB3AB007FBAFCBB12
80A26C1900C8D801E0C9FCB3AB6F5A41407BB84C>43 D<121E123FEA7F80EAFFC0A313E0
127FEA3F60121E1200A513C0A4EA0180A2EA0300A212065AA25A5A12200B1D78891B>I<
B612C0A51A057F9721>I<121E123FEA7F80EAFFC0A4EA7F80EA3F00121E0A0A78891B>I<
14FF010713E090381F81F890387E007E01F8131F4848EB0F80000315C04913074848EB03
E0000F15F0A24848EB01F8A3003F15FCA348C812FEA64815FFB3A26C15FEA56D1301003F
15FCA3001F15F8A26D1303000F15F0A26C6CEB07E0000315C06D130F6C6CEB1F806C6CEB
3F00017E137E90381F81F8903807FFE0010090C7FC28427CC031>48
D<143014F013011307131F13FFB5FC13E713071200B3B3AF497E497E007FB6FCA3204178
C031>I<EB03FE90381FFFC0017F13F03901F80FFC3903C001FE48C7127F000EEC3F8000
0CEC1FC04815E048EC0FF0A248EC07F8A2127C00FE15FC7E6D1303A46CC71207123EC813
F8A3ED0FF0A216E0151F16C0153F1680ED7F00157E5D4A5A5D4A5A4A5A4A5A4AC7FC141E
5C5C5C495A495A495A91C7120C130E5B4914185B5B485A49143848C8123000061570000F
B612F05A5A5AB712E0A326417BC031>I<49B4FC010F13F0013F13FC9038FE01FE3901E0
007FD80380EB3F8048C7EA1FC0000EEC0FE0D80F8014F0EA1FE016F86D1307A36C5AA2D8
0380130FC813F0A3ED1FE016C0A2ED3F801600157E5DEC03F0EC1FC0D90FFFC7FC15F090
380001FCEC007EED1F8016C0ED0FE0ED07F016F8150316FC16FE1501A216FFA3121E123F
487E487EA216FEA24913036CC713FC127E0070EC07F8003015F06C140F000E15E06CEC1F
C0D803E0EB7F803A01FC01FE0039007FFFFC011F13E0010190C7FC28427CC031>I<1507
A25D5DA25D5DA25DA25C5C811406140E140C141814381430146014E014C01301EB038014
005B13065B131C13185B137013605B12015B48C7FC5A1206120E120C5A123812305A12E0
B812C0A3C86CC7FCAC4B7E4A7F91B61280A32A427DC131>I<000215C0D807C0130701FC
EB7F8090B612005D5D15F05D158026063FFCC7FC90C9FCAE14FF010713E090381F01F090
3878007C01E07FD807807F90C71380ED0FC01202C8EA07E016F0A3ED03F8A316FCA4121C
123E127F487EA216F890C7FC4814074815F01260A26CEC0FE016C06C141F001C15806CEC
3F006C147E3903C001FC3901F807F039007FFFE06D1380D907FCC7FC26427BC031>I<EC
07F8EC3FFF91B51280903903FC03C0903907E000E0D90F80133090391F0001F0013EEB03
F84913075B1201485A49EB03F00007EC01E0000F91C7FC5B121FA25B123FA3127F90C9FC
EC7F80903801FFF039FF0780FC90380E003E0118130F49EB078016C049EB03E04914F0ED
01F8A24914FC150016FEA290C8FC16FFA27EA66C7EA216FE121FA2ED01FC6C7E16F80007
14036C6C14F06DEB07E0000115C06C6CEB0F80017EEB3F0090383F80FE90380FFFF86D5B
0100138028427CC031>I<121CA2EA1F8090B712C0A34816801700A25E0038C8120C0030
5D127000605D5EA25E484A5A4BC7FCA2C812065DA25D5D5DA25D14015D1403A24AC8FCA2
5C140E141EA2143E143CA2147CA214FCA313015CA31303A61307AA6D5A6D5A2A447BC231
>I<14FF010713E0011F13F890383F00FE0178131F01E0EB0F804848EB03C04848EB01E0
48C7FCED00F0120E1678121EA4121FA26D14F07FD80FF0EB01E07FD807FEEB03C06DEB07
806C9038C00F006CEBE01E6CEBF83890387FFEF090383FFFC0130F6D7F010113F801077F
90381E3FFFD9781F1380D9F00713C02601C00313E04848C613F048C7EA7FF8000E141F00
1EEC0FFC48EC03FE150148EC007E163FA248151FA2160FA4160E1278161E161C6C15186C
1538001F15706C6C14E06C6CEB03C0D803F0EB0F80C6B4EB7F0090383FFFFC010F13F001
01138028427CC031>I<14FF010713E0011F13F890387F80FC9038FC003E48487F4848EB
0F804848EB07C0484814E01503484814F0123FED01F848C7FCA216FC5AA2ED00FEA516FF
A37E5DA27E7F001F5CA26C7E000714066C6C5B12016C6C5B017C137090383F01E090390F
FF80FE903801FE0090C8FCA2ED01FCA416F8150316F0A2D80780EB07E0487E486CEB0FC0
1680151F160049133E6C485B390C0001F80007495A3903E01FC06CB55A6C6C48C7FCEB1F
F028427CC031>I<121E123FEA7F80EAFFC0A4EA7F80EA3F00121EC7FCB3A5121E123FEA
7F80EAFFC0A4EA7F80EA3F00121E0A2B78AA1B>I<007FBAFCBB1280A3CEFCB0BB1280A3
6C190041187BA44C>61 D<EB0FFC90387FFFC03901F007F039078001FC000EC7127E0018
80481580A248EC1FC0127800FE15E07EA4127E003C15C0C8123FA21680ED7F0015FE5D4A
5AEC03E04A5A4A5A92C7FC141E141C143C14385CA2146014E0A25CA213015CAA90C9FCAA
EB03C0497E497E497EA46D5A6D5A6D5A23467BC52E>63 D<16C04B7EA34B7EA34B7EA34B
7EA3ED19FEA2ED39FF1530A203707FED607FA203C07F163FA2DA01807F161FA24A486C7E
A302066D7EA2020E80020C1303A2021C8002181301A24A8082A24A81177FA291B77EA3D9
0180C7EA1FE0A201038291C8120FA2498201061507A2010E82010C1503A249821701A249
8283137801F883487ED80FFF030313E0B500E0027FEBFFC0A342467DC549>65
D<DB0FFE146092B512C0020302F013E0913A1FFC01FC0191393FC0001E02FFC7EA0703D9
01FCEC0387D907F0EC00C74948156F4948153F4948151F49C9120F13FE000117075B4848
16031207491601120F491600121FA2123F491760A2127FA219005B12FFAC127F7FA21960
123FA27F121FA26C6C17C0A212076DEE018012036C6C16036D170000001706137F6D6C5D
6D6C5D6D6C5D6D6C5DD901FC4A5A6DB4EC0780DA3FC0011FC7FCDA1FFC13FC0203B55A02
0014C0DB0FFEC8FC3B467BC446>67 D<B8FC17F017FC00019039C00007FF6C499038007F
C0017FED1FE0EF07F0EF03FC717E717E84727E727E727EA2727E85180385A2180185A385
84A31A80AD1A00A36061A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5A
EF1FE001FFED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B>I<B912F8A30001
01C0C7127F6C49EC07FC017F15011700187C183C181CA284A31806A41807040C7FA395C7
FCA4161CA2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA319C0A3F00180
93C7FCA41803A21900A260A260A2181EA2183E187EEF01FE01FF1507486D147FB95AA33A
447CC342>I<B612F8A3000101E0C9FC6C5B6D5AB3B31830A418701860A518E0A3EF01C0
A217031707A2170F173F177F01FFEC01FF486D011F1380B9FCA334447CC33D>76
D<ED1FFC4AB512C091390FF007F891393F8000FE027EC7123FD901F8EC0FC049486E7ED9
0FE0EC03F849486E7E49486E7E49C9127F01FE707E49161F0001844848707EA24848707E
000F84491603001F84A2491601003F84A3007F844982A300FF1980AC007F19006D5EA400
3F606D1603A2001F606D1607000F60A26C6C4C5AA26C6C4C5A0001606C6C4C5A6D167F6D
94C7FC6D6C15FE6D6C4A5A6D6C4A5AD903F0EC07E0D901FCEC1FC0D9007E4AC8FC6E6C13
FE91390FF007F80201B512C09126001FFCC9FC41467BC44C>79 D<B712FCEEFFC017F800
019039C0000FFE6C49EB01FF017F9138007F80EF1FE0170FEF07F018F8EF03FCA218FE17
01A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91
B612F017800280C9FCB3A9497E487FB612C0A338447CC342>I<ED1FFC4AB512C091390F
F007F891393F8000FE027EC7123F4948EC1FC0D903F0EC07E0D90FE0EC03F849486E7E49
486E7E49C9127F01FE707EA24848707E00038449160F0007844848707EA24848707EA348
48707EA3007F84A24982A200FF1980AC007F1900A26D5EA3003F60A26D1603001F60A26C
6C4C5AA20007606DD903F0130F0003DA0FF85C6C6CD91C0E495A6C6CD91803495A4B7E01
7F01606D48C7FCD93F80903800C0FED91FC0ECC1FCD90FE0EC63F8D903F0EC67E0D901F8
EC7FC09026007E3091C8FCDA3F9813FE91390FFC07F80201B515C09139001FFC3892C712
3CA2711301A2171FF10380F0800794380FC00FF0F03F95B51200A2715BA2715B715B715B
725AF01F8042587BC44C>I<003FB912E0A3903BF0003FF0007F01806D48130F003EC715
0348EF01F00078170019701270A219301260A5481818A5C81600B3B3A54B7EEDFFFC0103
B7FCA33D447CC346>84 D<B600C0010FB5FCA3000101E0C813F06C49ED1F806D48ED0F00
A21806B3B3A7013F5EA280131F6080010F5E13076E5D010316E06D6C4A5A6D6C4A5A027E
4AC7FC6E6C131EDA1FE0137C913907F803F00201B55A6E6C1380DB07FCC8FC40457CC349
>I<130C131E133F497EEBF3C03801E1E03803C0F03807807848487E001E7F487F0070EB
038048EB01C00040EB00801A0E75C331>94 D<EB07F8EB3FFF9038F80FC03901C003E048
C66C7E00066D7E48147CD80F80137E486C133E6D133F8182A26C5A6C5AC8FCA4EC0FFF49
B5FC90380FFC1FEB3FC0EBFF00EA03FCEA07F0485A121F485A5B127F176048C7FCA4153F
A26C146F7F003F9138C7C0C0391FC001873B0FE00307E1803A07F81E03FF2701FFFC0113
003A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120312011200B3EC01FC91380FFF80
91383E07E091387000F802C0137CD9FD807F01FFC77EEE0F804915C049EC07E017F01603
17F8A217FC1601A317FEA917FCA21603A217F8A2EE07F017E07FEE0FC001FBEC1F801700
D9F180133ED9F0C05B9039E06001F891383C07E09039C01FFF8090260003FCC7FC2F467D
C436>I<EC7F80903803FFF090380FC07C90383E000E49130349EB01804848EB00C00003
14074848EB0FE04848131FA2121F5B003FEC0FC0ED0780007F91C7FC90C9FCA25AAA7EA2
7FA2123F16306C7EA2000F15606C7E6C6C14C00001EC01806C7E017CEB07006D130E9038
1FC078903807FFF001001380242E7DAC2B>I<16FE157FA315011500167EB3EC7F809038
03FFF090380FC07890383F000C017C13064913034848EB01FE00031400485A4848147EA2
121F485AA2127FA290C8FCA25AA97EA37F123FA2121F7F000F15FE6C7E000314016C6CEB
037E6C6C147F017C010E13806D011C13FE90380FC0F0903803FFE09026007F0013002F46
7DC436>I<EB01FE903807FFC090381F03F090387C00F849137C48487F48487F00071580
49130F000F15C0121F4914E0003F1407A2127F90C713F0A35AA290B6FCA290C9FCA67EA3
6C7EA21630121F7F000F15606C7E000315C06C6CEB01806C6CEB0300017C13066D131C90
380FC078903803FFE09038007F80242E7DAC2B>I<EC1FC0EC7FF0ECF038903803E07C90
3807C0FC90380F81FEA2EB1F0190383F00FCA2013E1330017E1300B0B61280A3D8007EC7
FCB3B1137F497E007FEBFF80A31F467EC51E>I<D901FCEB1FC0903A0FFF807FE0903A3F
07E1E1F090397C01F7819039F800FE01484890387C00E048486D13000007143FA248486D
7EA2001F81A7000F5DA26C6C49C7FCA20003143E6C6C5B6C6C5B486C485A39033F07E090
380FFF80260701FCC8FC0006CAFCA3120E120F7EA27F13E06CB512F86CECFF806C15E06D
14F848B67E3A07E0000FFED80F80EB00FF001EC8123F003EED1F8048150F17C0481507A6
007CED0F80A26CED1F006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261F
FFFEC7FC010113E02C417DAB31>I<EA01FC12FFA3120312011200B3EC01FE913807FF80
91381E07E091383801F002607FECC000D9FD807F167C01FFC7FC167E5BA35BB3A9486C14
FFB5D8FC7F13FEA32F457DC436>I<13E0EA03F8487EA66C5AEA00E090C7FCADEA01FC12
7FA3120312011200B3B0487EB512F8A315437EC21B>I<14F0EB01F8EB03FCEB07FEA4EB
03FCEB01F8EB00F01400AD14FE137FA313011300147EB3B3AB003C137C127EB413FC14F8
A238FE01F0007E13E0383803C0381E0780380FFF00EA01FC175783C21E>I<EA01FC12FF
A3120312011200B3A292383FFFF0A3030F1300ED07F8ED03E05E4BC7FC15065D5D5D5D5D
EC03804AC8FC5C4A7E143FEC6FC0ECC7E0EBFD839038FF03F0496C7EEBFC0081157E153E
153F6F7E150F826F7E1503826F7EA26F7E4B7E486CECFF80B5D8FC0F13FCA32E457DC433
>I<EA01FC12FFA3120312011200B3B3B3A5487EB512FCA316457EC41B>I<2701FC01FEEC
7F8000FF903B07FFC001FFF0913B0E03F00380FC913B3800F80E003E0003495C000101C0
D97C307F0000037E81D9FD805C01FFC7D83EC0130F043F81495DA34992C7FCB3A9486C4A
6C497EB5D8FC3FB5000FB512C0A34A2C7DAB51>I<3901FC01FE00FF903807FF8091381E
07E091383801F0000301607F0001EBC0002600FD807F167C01FFC7FC167E5BA35BB3A948
6C14FFB5D8FC7F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F49
6D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E481680
A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C49
5A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<
3901FC01FC00FF90380FFF8091383E07E091387001F800039038C0007C2601FD807F6CB4
C7123FEE1F8049EC0FC04915E0EE07F0A217F8160317FCA3160117FEA917FC1603A317F8
160717F0EE0FE07FEE1FC06D1580EE3F00D9FD80137ED9FCC05B91386001F891383C0FE0
91381FFF80DA03FCC7FC91C9FCAE487EB512FCA32F3F7DAB36>I<91387F8006903903FF
E00E90380FE07890383F001C017EEB061E5B4848EB033E4848EB01BE12074848EB00FEA2
485A003F157E5B127FA390C8FC5AA97E7FA3123F7F121F16FE6C7E000714016C7E6C6CEB
037E00001406017C130C013F131890380FC0F0903803FFE09038007F0091C7FCAE16FF03
7F13FEA32F3F7DAB33>I<3901F807E000FFEB1FF8EC383CEC607E0003EBC0FF12013800
F980EBFB00157E153C01FE1300A45BB3A77F487EB6FCA3202C7DAB26>I<90383FE03038
01FFF83907C01E70390F0007F0001C1301481300A2481470A212F01530A37E7E007E1400
EA7F80EA3FF0EBFF806C13F86C13FE0003EBFF806C14C0D8003F13E0010313F09038001F
F81403EC00FC0040147C00C0147E153E7E151EA37E151C7E153C6C14386C147000FB14E0
39F18001C039E0F00F8039C07FFE00EB0FF01F2E7DAC26>I<1306A5130EA4131EA3133E
137EA213FE12011207001FB512F0B6FCA2D8007EC7FCB3A4150CAA133E013F1318A27F90
380F803001071360903803E0C0903801FF809038003F001E3E7EBC26>I<D801FC14FE00
FF147FA300031401000114000000157EB3A916FEA3017C1301A2017EEB037E013E147F01
1E010613806D011C13FE903807C078903803FFE09026007F8013002F2D7DAB36>I<B539
E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160CA2017E5CA2017F14386D
1430A26D6C5BA26E13E0010F5CA26D6C485AA36D6C48C7FCA26E5A01011306A26D6C5AA2
ECFE1CEC7E18A26E5AA3EC1FE0A36E5AA26E5AA36EC8FC2E2C7EAA33>I<3B7FFFF007FF
FCA30001D9800113C06C90C7EAFE006D147C6D14706D6C5B6D6C5BECE0010107495AD903
F090C7FCECF806903801FC0E01005BEC7E18EC7F30EC3F706E5A6E5A811407814A7EEC0D
FC1418EC387E4A7E02607FECC01F01016D7ED903807F4A6C7E01061303496D7E011C8001
3C1300017C147ED801FC14FFD80FFE4913C0B5D8800713FFA3302B7FAA33>120
D<B539E001FFFCA3D807FEC7EA7FE0D801FCEC1F8017000000150E160C6D141C017E1418
A26D5CA26E1370011F1460A26D6C5BA2800107495AA2ECF003010391C7FCA2903801F806
A2ECFC0E0100130CA2EC7E18A2EC7F38EC3F30A2EC1FE0A36E5AA26E5AA36EC8FCA21406
A35CA2141C1418A200385B127C00FE5BA25C1301387C0380D87007C9FCEA3C1EEA1FFCEA
03F02E3F7EAA33>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmbx12 12 20
/Fg 20 118 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC3FF849B5FC010F14E0013F14F890397FF01FFC9039FFC007FE489038
0001FF48486D1380000716C049147F000F16E049143F001F16F0A2003F16F8A249141F00
7F16FCA600FF16FEB3A3007F16FCA56C6CEC3FF8A3001F16F0A2000F16E06D147F000716
C06D14FF6C6C4913806C6D4813006C6D485A90397FF01FFC6DB55A010F14E00103148090
26003FF8C7FC2F427CC038>48 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003
B3B3ADB712FCA5264177C038>I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC
0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F
17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A
4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F049
5A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<
ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D13
8013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F138090
2607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A2
17F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81F
F0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>
I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E
147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B
48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<00071503
01E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF0
01C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C049
7F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B00
7EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D01
3F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC0107
9038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA2
48486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091
B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A3
17F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C
6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<
121E121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E
5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2
141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<
EC7FF00103B5FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E497F4848EC
7F80163F484815C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F014006C01FC
5B6E485A6C9038FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F80
90B7FC48013F14802607FC0F14C0260FF80314E04848C6FC496D13F0003F141F48481307
496D13F8150000FF157F90C8123F161F160FA21607A36D15F0127F160F6D15E06C6C141F
6DEC3FC06C6CEC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F
91C7FC010013F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF0
489038800FF848496C7E48488048486D7E001F80003F1680A2484815C08117E0A212FF17
F0A617F8A45D127FA3003F5CA26C7E5D6C6C5B12076C6C131E6CEBC07C6CEBFFF8013F5B
010F01C013F00101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C491380A21700
4B5A150F5E49495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0
D907FEC8FC2D427BC038>I<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF848
48EB1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC13
07013F13F19038FFFC01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B
6C6C5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90F
FCC9FC322F7DAD36>97 D<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF
8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F4848141F49140F121F48
5AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9
C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E
>100 D<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F48903800
1FF84848EB0FFC4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7
FCA26D5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013
E0000F90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81F
F0C77ED83FC014074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C
4A5AD80FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC
32427DAC38>103 D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>108
D<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F00039039
9F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>110
D<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB
07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA2
4C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02CFB512F002C314C002C0
91C7FCED1FF092C9FCADB67EA536407DAC3E>112 D<90387F807FB53881FFE0028313F0
028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092
C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B51287000314FF120F38
1FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387FFF
F014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F020313E0140000F0
143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00
FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<D97FC049B4FCB50103B5FCA50003EC00
0F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F140701
0313FE9026007FF0EBFC00372E7CAC3E>117 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmbx12 17.28 19
/Fh 19 118 df<140CEC7F80ECFFC04913E04913F015F85B5B4913FC5BA24913F890B5FC
4814F015E04814C0481400485B4813F814E04813804848C7FC485A13F013C06CC8FC123C
12181E1C5EE551>19 D<16F04B7E1507151F153FEC01FF1407147F011FB5FCB7FCA41487
EBE007C7FCB3B3B3B2007FB91280A6395D74DC51>49 D<913801FFF8021FEBFFC091B612
F8010315FF010F16C0013F16F09026FFF80180489026C0003F13FE4890C7000F7FD807FC
0203148048486E14C048486E14E04981D83FF86F13F001FE6F13F8487E6E6E13FC80B56F
13FE80A319FF83A26C5BA26C5BA26C90C8FCEA07FCD800E04B13FE90C9FCA219FC5FA219
F85F19F04D13E0A24D13C0198094B512004C5B604C5B4C5B4C5B604C90C7FC4C5A4C5A4C
5A4B13E04B5B4B5B4CC8FC4B5A4B5AED3FE04B48143F4B5A4A90C8FC4A5ADA07F8157E4A
5A4A5A4A5A4A5A02FEC912FE495A495A4948ED01FC4948150749B8FC5B5B90B9FC5A4818
F85A5A5A5A5AA2BAFC19F0A4405D78DC51>I<ED7FFE0207B512F8023F14FF49B712C049
16F0010FD9800F13FC90271FF800037FD97FE001007FD9FF806E7F49C86C7F486C834801
C06E7F80486D826E80804884A3805CA27EA24A4A5B6C5B6C5B6C6C485E011EC85A90C95C
A24D5B6194B5FC96C7FC4C5B4C13F84C5B4C5B043F1380922607FFFEC8FC020FB512F817
E094C9FC17F817FF91C7001F13E0040313F8040013FE717E7113C0717F85717F858385A2
85831A80A31AC0EA03FCEA0FFF487F487FA2487FA2B57E1A80A34D1400A25C6C604A5C6C
6091C8485B6C5A01F04B5BD80FFC4B5B6CB492B55A6C01E0010391C7FC6C01FF011F5B6C
6C90B65A011F16F0010716C001014BC8FCD9001F14F0020049C9FC425E79DC51>I<001F
BEFCA64849C79126E0000F148002E0180091C8171F498601F81A0349864986A2491B7FA2
491B3F007F1DC090C9181FA4007E1C0FA600FE1DE0481C07A5CA95C7FCB3B3B3A3023FBA
7EA663617AE070>84 D<91381FFFFC0103B612E0011F15FC017F15FF90B812C0489026F0
003F13F04803077F6E01017F707F486D6E7E8583717FA26C4982836C4982A238007FC001
1FC8FC90C9FCA7047FB5FC033FB6FC0203B7FC143F49B5EAF00F0107EBFE00011F13F001
7F13C048B5C7FC4813FC485B485B485B5C5A485BA291C8FCB5FCA45FA25F6C6D143B177B
6C6D14F36EEB01E36C6D0107806C6DD90FC313FF6C01FFD9FF8114FE00019126FFFE0114
FF6C6C4A7E011F02F07F010302C0131F9026003FFCC7000313FE48407BBF4E>97
D<903807FF80B6FCA6C6FC7F7FB3A9EFFFF8040FEBFF80047F14F00381B612FC038715FF
92278FFE007F13C0DBBFE0010F7FDBFF8001037F93C76C13FC03FC6E7F4B6F7E4B814B6F
13804B17C0851BE0851BF0A21BF8A2851BFCA41BFEAC1BFCA44F13F8A31BF0A24F13E0A2
1BC04F13806F5D6F17006F4B5A6F4B5A4A6C02035B9126FC7F80495BDB3FE0011F13C091
27F80FFC01B55A4A6CB648C7FCDAE00115F84A6C6C14E04A011F91C8FC91C7000113E04F
647BE35A>I<92380FFFFC4AB612E0020F15FC023F15FF91B8128001039026FE000713C0
4901F015E0011F01C05B4990C7FC49484A13F0495A485B5A5C487013E0485B7113C0485B
0501130048EE007C95C7FCA2485BA4B5FCAC7EA280A27EA36C7F19FC7E806CEF01F86C7F
6EED03F06C6D15076CEF0FE06D6C6CEC1FC06D6DEC3F806D6DEC7F00010701FCEB01FE6D
9039FF801FFC010091B55A023F15E0020F1580020102FCC7FCDA000F13C03E407BBF48>
I<F17FF8050FB5FCA6EF000F8484B3A9ED0FFF4AB512F0020F14FE023FECFF8391B712E3
01039138007FF34901F0EB07FB011F01C00101B5FC49497F4948C8123F49488148498148
835C485B5AA2485BA25AA3485BA4B5FCAC7EA47E80A27EA27E807E6E5D6C5F6C6D5D6C6D
5D6E92B5FC6D6C5C011F6D0107806D01E0D91FF77F6D01FCD9FFE7EBFFFE010190B61287
6D6CECFE07021F14F8020314C09139001FFE004F647BE35A>I<92381FFFC04AB512FE02
0F6E7E027F15F091B77E0103D9FE0113FE010F9039F0003FFF4901C0010F7F4990C76C7F
494802017F49488248498048496F7E85485B48717EA24849151F855AA34849811A80A3B5
FCA291B9FCA31A000280CBFCA67EA3807EA36C7F190F6CF01F806C7F193F6C6D17006C60
6C6D16FE6D6C4B5A6D6C4B5A6D01C0EC0FF06D01F0EC3FE06D01FCECFFC001019026FFC0
0F5B6D91B6C7FC023F15FC020715F002001580030701F0C8FC41407CBF4A>I<EB0FE0EB
3FF8497E497E487F4880A24880A76C5CA26C91C7FC6C5B6D5A6D5AEB0FE090C9FCB09038
07FF80007FB5FCA6C6FC7F7FB3B3ADB712C0A622657BE42C>105
D<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB712E0A623647BE32C>108
D<902607FF80EB0FFFB691B512F0040314FC040F14FF043F8193267FC03F7F9326FE000F
7FC6DA81F86D7F6DEB83E06DD987C06D7FED8F8093C780039E8015BC03B88215F85DA25D
A45DB3B2B7D8F007B71280A651407BBF5A>110 D<923807FFE092B6FC020715E0023F15
FC91B8FC010349C66C13C04901F0010F7F011F0180010113F84990C87F49486F7E49486F
7E48496F138048496F13C04A814819E04819F04A814819F8A24819FC4A81A24819FEA4B5
18FFAC6C19FEA46C6D4B13FCA36C19F8A26C6D4B13F0A26C19E06E5D6C19C06C6D4B1380
6C6D4B13006D6C4B5A6D6C4B5A6D01C001035B6D01F0010F5B010301FE017F13C0010090
B7C7FC023F15FC020F15F0020092C8FC030713E048407CBF51>I<902607FF80EBFFF8B6
010FEBFF80047F14F00381B612FC038715FF92268FFE0014C0DBBFE0011F7FC6DAFF806D
7F6D91C7000313FC6D01FC6E7F4B6E7F4B814B17804B6F13C0851BE0A27313F0A21BF885
A21BFCA285A21BFEAC1BFC61A31BF8A2611BF0A24F13E0A24F13C01B806F5D6F92B51200
6F4A5B6F4A5B6F4A5B6F6C495B04E0013F13C09226CFFC01B55A03C7B648C7FC03C115F8
DBC07F14E0041F91C8FC040113E093CBFCB3A4B712F0A64F5C7BBF5A>I<D90FFFEB07F8
B6EB3FFF4C13C04BB512F04B14F8923907F87FFCED0FE0C6923880FFFE6D495A6DD91E01
13FF153CA21578A24B6C13FEA24BEB7FFCA2EF1FF04BEB07C094C7FCA45DB3B0B712F8A6
38407BBF42>114 D<913A3FFF8007800103B5EAF80F011FECFE3F017F91B5FC48B8FC48
EBE0004848C7120FD80FF814034848804980003F167F49153F127FA200FF161FA27FA213
F86D92C7FC13FF14F06CEBFF8015FEEDFFE06C15FCEEFF806C16E06C826C16FC6C826C82
6C6C1680131F010716C0010116E0EB001F020015F01503ED003F040713F8007C150100FC
81177F6C163FA2171F7E18F07FA26D16E06D153F7F6DED7FC06DEDFF8001FF5C02C00107
130002F8EB7FFE019FB612F8010F15E0D8FC03158048C66C49C7FC48010713C035407BBF
40>I<EC07E0A6140FA5141FA3143FA2147FA214FF5BA25B5B5B5B137F48B5FC000F91B5
12FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC6DED1F80A2816DED3F00816D157E6D6D5B6D
EBFF036EEBFFF86E5C020F14C0020191C7FC9138001FFC325B7DDA3F>I<902607FFC0ED
3FFEB60207B5FCA6C6EE00076D826D82B3B360A360A26D5E181E181C6D163C6F14F86D4B
487F6D01F8D907E08003FED93FC0ECFF80010090B65A6E5D021F14FC020314F0DA003F13
8051407BBF5A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmcsc10 20.74 4
/Fi 4 110 df<952601FFF81638067FD9FFC015780507B600F815F8053F15FE4CB86C13
010407DAC00101E01303041F01F8C7EA1FF8047F0180DA03FE13074B4848C96C130F0307
01F093383F801F4B01C0EE0FE0033F49933807F03F4B48CA3803F87F4A4848EF00FC4A49
F07EFF4A01E0844A49844A49844A90CC7E4A5A4A48854949854987495B4B1A7F495B491C
3F49491A1FA24990CE120FA2495A481D075C5A1E03485BA21E015A5C5AA21E00485BA448
1E00A35CA2B5FCB07EA280A37EA21F78A26C7FA37E807E1FF0A26C7FA26C1D016E1CE07E
6D7EF603C06D7FF607806D7F6D6DF20F007F6F1A1E6D6D1A3E6D1C3C6D6D1A7C6E6C626E
6C4F5A6E6D4E5A6E6D18076E6D4E5A6E01F84E5A6E6D4EC7FC6E6C6C18FE6F6C6C4C5A03
0F01E0EE07F06F6D4C5A030101FEEE3FC06F6C6C6C4AB4C8FC041F01F8EC0FFC0407903A
FFC001FFF8040191B612E0DC003F93C9FC050715FCDD007F14C0060101F8CAFC6D7A74F7
87>67 D<17074D7E4D7EA34D7EA24D7EA34D7EA24C7FA34C7F17DF04077F178FA2040F80
1707041F80EE1E03A2043E80EE3C01047C80EE7800A204F8804C137FA24B486D7EA20303
814C131FA24B488084030F8293C77EA2031E8284033E82033C80A24B828403F8824B157F
A20201834B153F0203834B151F92B8FC4A83A24A8492C91207A24A84021E82023E84023C
82A2027C8402788202F8844A177FA20101854A173F1303747E130787010F84011F86133F
496C8501FF6000036D4D13F0000F01FE94B512FCB600C0031FECFFF8A45D5A7AD96A>97
D<B8FCA4C602F8CAFC013F13C06D5B7F92CBFCB3B3AB1A0FA51A1EA61A3EA41A7E1A7C1A
FCA21901A219031907190F191F197F49EE01FF496D020713F890B56C91B5FCBBFCA44858
78D758>108 D<B64FB6FC6F60A3C66E4E1400013F1CFC6D6C6C4E6C5A010F646E6C181E
A36E6C183CA26E6C1878A36E6C18F0A26E6CEF01E0A26E6DEE03C0A36E6DEE0780A26F6C
EE0F00A36F6C161EA26F6C5EA36F6C5EA26F6C5EA26F6C4B5AA36F6D4A5AA26F6D4A5AA3
706C4AC7FCA2706C141EA2706C5CA3706C5CA2706C5CA3706C495AA2706D485AA2706D48
5AA3716C48C8FCA294383FF01EA3716C5AA2716C5AA3716C5AA2496C6E6C5AA2715B497E
497E496C6E494B7E486D4F7F000F01FF6FC8000713FFB600F00507B7FCA2183E181C7058
78D781>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr17 20.74 10
/Fj 10 117 df<ED1FFE4AB512E0020F14FC023F14FF9126FFE00713C0D903FEC713F0D9
07F0EC3FF8D91FC06E7E49C8EA07FE017E6F7E017883496F7F48486F7F12034983484816
7F01F88313FE6D6C153F486D82A4805CA37E6C5B6C48C95BD80078167F90CAFCA261A218
FF61A24D5B615F96C7FC4D5A60170F4D5AEF3FE04D5A4D5A4C48C8FCEE07FCEE1FF09238
1FFFC091260FFFFEC9FCA2EEFFE091C7EA07FCEE00FFEF3FC0EF1FF0717EEF07FE717E71
7F717F85727E727EA285727EA2727EA31A80A2841AC0A3EA07E0EA1FF8487E487EB5FCA5
1A80605BA26C48180013F001C05E007CCA5B7E4E5A7E6D4C5A6C6C5F000717FF01F04B5B
6C6C4B5B6C6C5F6CB4030F90C7FC6D6C4A5AD93FF04A5AD90FFCECFFF8902707FFE00713
E0010190B612806D6C92C8FC020F14F8020314E09126001FFEC9FC42757AF14F>51
D<EA0780EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0780C7FCB3B3AAEA07
80EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA07800E4A72C92B>58
D<BA12F0F1FF801AF01AFCF2FF80D8003F01F0C86C7F010749030713F04B030013FC6DF0
3FFEF20FFF747F08017F747F757E88757E1B1F881B0F88A2751380A21DC0A287A21DE0AA
1DC0A263A21D80A2511300A2641B1F64515A515A1BFF6408035B5090C7FC505AF23FFCF2
FFF007075B077F138092B848C8FC1AF01A8007F0C9FC03C0CDFCB3B3AB497FA2013F13FC
B8FCA55B7678F56C>80 D<001FBE12F8A502F8C7000F01F0C7121F4801806E49020113FC
01FCC86C49EC003F491B1F01E01B07491B03491B0190C91800A2003E1D7CA2003C1D3CA3
481D1EA500701D0EA8481D07A6CA1900B3B3B3B14D7F4D7F057F13FE031FB812F8A56875
7BF473>84 D<913803FF80021F13F891B512FE903A03FC01FF80903A07E0003FE0D91F80
EB0FF8013EC76C7E496E7E01F06E7E48486E7F717E4848153F4982D807A06F7E13FC487E
6D6F7E80A2717EA46C90C8FC6C5A6C5ACAFCA6EE07FF0303B5FC157F913903FFFE07021F
138091387FF800903801FFC0010790C7FCEB1FFCEB3FF0EBFFE0485B485B4890C8FC5B48
5A485AA2485A1A0E485AA312FF5B170FA4171FA26D153F007F163B177B6DDBF1FE131C00
3F16E16C6C14016C6C912603C0FF13386C6CEC0F806C6C6C903A1F007F80706C6D017CEC
E1E028007FF803F8EB3FFF011FB500E06D1380010391C7000713009026003FF8EC01FC47
4D79CB4F>97 D<131EEB7F80497E487F487FA66C5B6C5B6D5A011EC7FC90C8FCB3A7EB01
F0EA07FFB5FCA51201EA007F133FA2131FB3B3B3A3497EEBFFFEB612FCA51E727AF12A>
105 D<02F849B47ED803FF021F13F8B5027F13FE923A01FC01FF80923A07E0003FE0031F
C76C7E033EEC0FFCC60278EC03FE013F496E7E90261FF9E06E7FDAFBC0826DB4486F7E92
C96C7E737E5C4A707E864A160786851B80A2851BC0A2851BE0A5F27FF0AEF2FFE0A54F13
C0A34F1380A21B0061626E160F626E161F626E4C5A4F5A6F5EDAFBC015FFDAF9E04A5BDA
F8F04A48C7FC03784A5A6F4A5A031FEC3FF06F6CEBFFC0922603F80790C8FC0300B512FC
043F13E0DC07FEC9FC93CBFCB3A7497EEB7FFFB77EA54C6C7BCA58>112
D<D903E0EB1FE0D80FFFECFFFCB501037F923907E01F8092391F807FC092383E00FF4B48
13E000011478D8007F13F090383FE1E015C0EB1FE39126E7800013C0EF7F8092C7EA3F00
02EF91C7FC14EE14FE5CA45CA55CB3B3A480133F90B5FCB712C0A5334B7ACA3D>114
D<DA1FFFEB038049B512E0010FECF807903A3FE001FE0F01FEC7EA1F9FD801F8EC07DFD8
07E0EC03FF484880498048C9127F48163F003E161F127E170F127C12FC1707A46C1603A2
7E7F6C7E7F6D92C7FCEA3FFC13FF6C13E06C13FF6C14F06CECFF806C15F86C15FE013F6E
7E010F15E0010381010081020F14FEDA007F7F1503DB003F1380040713C0040113E000E0
81177FEF3FF06C161F170FEF07F8A217037E1701A27EA37E18F07E17036D16E0A26D1507
6DED0FC06D168000FE161F017CED3F00486C157E6DEC01F826F80FC0EB07F026F003F8EB
7FC00100B6C7FC48013F13FC02071380354D7CCB3E>I<1407A85CA65CA35CA35CA25CA2
5BA25B5B5B5B5B5B48B712FE120FB8FCA3D8000190C9FCB3B3A2EF01C0B0EF03806D7FA3
027FEC0700815F6E6C130E021F141E6F131C6E6C5B6E6C13F8913901FF01F09139007FFF
C0031F5BDB03FCC7FC326B7EE93D>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop Black Black Black Black 1060 809 a Fj(TP3)53
b Fi(Caml)e Fj(:)h(T)-13 b(ri)53 b(par)f(tas)0 1535 y
Fh(1)161 b(T)-13 b(ri)54 b(par)g(s)l(\023)-77 b(election)0
1754 y Fg(1.)46 b Ff(Ecrire)h(une)g(fonction)f Fe(min)p
1182 1754 31 4 v 38 w(liste)53 b(:)e(int)h(list)g(->)g(int)g(*)g(int)g
(list)47 b Ff(qui)g(ren)m(v)m(oie)h(le)e(plus)0 1875
y(p)s(etit)24 b(\023)-46 b(el)m(\023)g(emen)m(t)28 b(d'une)g(liste)f
(et)g(la)g(liste)g(de)g(d)m(\023)-46 b(epart)27 b(priv)m(\023)-46
b(ee)28 b(de)f(ce)g(plus)h(p)s(etit)c(\023)-46 b(el)m(\023)g(emen)m(t.)
28 b(Cette)g(fonction)0 1995 y(ren)m(v)m(oie)34 b(une)g(erreur)f(p)s
(our)f(la)h(liste)g(vide.)0 2116 y(Exemple)i(:)p Black
Black 205 2270 a Fe(#min_list)54 b([2;4;6;8;1;3;7;5;9])i(;;)205
2391 y(-)c(:)f(int)h(*)g(int)g(list)g(=)g(1,)f([2;)i(4;)e(6;)h(8;)g(3;)
g(5;)g(7;)f(9])0 2550 y Fg(2.)41 b Ff(En)g(d)m(\023)-46
b(eduire)42 b(une)f(fonction)g Fe(tri)p 1380 2550 V 37
w(selection)54 b(:)e(int)g(list)g(->)g(int)g(list)42
b Ff(qui)f(trie)g(une)g(liste)0 2670 y(d'en)m(tiers)34
b(par)f(ordre)g(croissan)m(t.)0 2840 y Fg(3.)g Ff(Quelle)g(est)g(la)g
(complexit)m(\023)-46 b(e)34 b(de)f(cet)h(algorithme)e(de)h(tri)16
b(?)0 3222 y Fh(2)161 b(T)-13 b(ri)54 b(par)g(tas)0 3441
y Ff(P)m(our)42 b(am)m(\023)-46 b(eliorer)42 b(l'algorithme)f(pr)m
(\023)-46 b(ec)m(\023)g(eden)m(t)44 b(on)d(prop)s(ose)g(de)h(mettre)g
(en)g(\033uvre)g(une)g(structure)g(de)0 3562 y(donn)m(\023)-46
b(ees)34 b(facilitan)m(t)f(la)f(rec)m(herc)m(he)j(du)e(minim)m(um)i
(d'un)e(ensem)m(ble)i(:)e(un)f Fd(tas)p Ff(.)0 3682 y(Un)38
b(tas)g(est)h(un)f(arbre)g(binaire)g Fd(or)-5 b(donn)n(\023)-47
b(e)36 b Ff(:)i(tous)g(les)h(n\033uds)f(autre)g(que)h(la)f(racine)g(on)
m(t)g(une)h(v)-5 b(aleur)0 3803 y(plus)33 b(grande)g(que)h(leur)f(p)m
(\022)-46 b(ere.)0 3923 y(Exemple)35 b(:)p Black Black
1885 4110 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 1885 4110 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(1)1563 4346 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 1563 4346 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(4)1587 4314 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1587 4314 a 1402 4582 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end

1402 4582 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(5)1426
4550 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1426 4550 a 1724 4582 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 1724 4582 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(7)1748 4550 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1748 4550 a
1563 4818 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-0 11
{InitCnode } NewNode end end
 1563 4818 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(9)1587 4786 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1587 4786 a 1885 4818 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1 11
{InitCnode } NewNode end end
 1885 4818 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(8)1910 4786
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1910 4786 a 2207 4346 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 2207 4346 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(2)2232 4314 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 2232 4314 a 2046 4582 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end

2046 4582 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(6)2071
4550 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2071 4550 a 2368 4582 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 2368 4582 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(3)2393 4550 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2393 4550 a
0 4970 a Ff(On)e(utilisera)g(le)g(t)m(yp)s(e)h(suiv)-5
b(an)m(t)33 b(:)p Black Black 103 5125 a Fe(type)52 b(Tas)g(=)256
5245 y(Vide)154 5365 y(|)f(Noeud)i(of)f(int)g(*)f(Tas)h(*)g(Tas)g(;;)0
5520 y Fg(4.)37 b Ff(Ecrire)h(une)g(fonction)f Fe(min)p
1146 5520 31 4 v 38 w(tas)52 b(:)g(Tas)g(->)g(int)38
b Ff(qui)f(ren)m(v)m(oie)i(le)f(plus)g(p)s(etit)c(\023)-46
b(el)m(\023)g(emen)m(t)39 b(d'un)f(tas)0 5640 y(ou)32
b(une)i(erreur)f(si)g(le)g(tas)g(est)g(vide.)0 5810 y
Fg(5.)e Ff(Ecrire)g(une)g(fonction)g Fe(enleve)p 1273
5810 V 38 w(min)52 b(:)g(Tas)g(->)g(Tas)31 b Ff(qui)g(retire)g(le)g
(plus)g(p)s(etit)d(\023)-46 b(el)m(\023)g(emen)m(t)32
b(d'un)f(tas)0 5931 y(et)i(ren)m(v)m(oie)h(le)f(nouv)m(eau)h(tas.)p
Black 1885 6180 a(1)p Black eop
%%Page: 2 2
2 1 bop Black 0 84 a Ff(TP3)33 b Fc(Caml)2879 b Ff(T)-8
b(ri)32 b(par)h(tas)p 0 124 3820 4 v Black 0 407 a Fg(6.)41
b Ff(Ecrire)h(une)f(fonction)g Fe(ajouter)54 b(:)d(int)h(->)g(Tas)g(->)
g(Tas)41 b Ff(qui)h(a)5 b(joute)41 b(un)e(\023)-46 b(el)m(\023)g(emen)m
(t)42 b(\022)-49 b(a)41 b(un)g(tas.)0 527 y(P)m(our)35
b(cette)h(fonction)f(il)g(faudra)f(faire)h(un)g(c)m(hoix)h(:)f(ins)m
(\023)-46 b(erer)36 b(dans)g(le)f(\014ls)h(gauc)m(he)f(ou)g(le)g
(\014ls)h(droit)f(du)0 648 y(n\033ud)h(couran)m(t.)g(A\014n)g(de)h
(garder)e(un)h(tas)d(\023)-46 b(equilibr)m(\023)g(e)37
b(on)f(prop)s(ose)g(de)g(toujours)g(ins)m(\023)-46 b(erer)37
b(dans)f(le)g(\014ls)0 768 y(gauc)m(he)d(mais)h(de)f(p)s(erm)m(uter)g
(ensuite)i(les)e(deux)h(\014ls.)0 938 y Fg(7.)e Ff(Ecrire)g(une)g
(fonction)g Fe(ajouter)p 1328 938 31 4 v 39 w(liste)52
b(:)g(int)g(list)g(->)g(Tas)84 b Ff(qui)32 b(construit)g(un)g(tas)g
(\022)-49 b(a)31 b(partir)0 1059 y(d'une)j(liste)f(d'en)m(tiers)h(par)f
(a)5 b(jouts)33 b(successifs)i(\022)-49 b(a)33 b(partir)f(d'un)h(tas)g
(vide.)0 1229 y Fg(8.)24 b Ff(Ecrire)h(une)g(fonction)f
Fe(vider)53 b(:)e(Tas)h(->)g(int)g(list)25 b Ff(qui)g(vide)g(un)f(tas)g
(dans)h(une)g(liste)g(en)f(rendan)m(t)0 1349 y(une)33
b(liste)h(tri)m(\023)-46 b(ee)33 b(par)f(ordre)h(croissan)m(t.)0
1519 y Fg(9.)27 b Ff(En)h(d)m(\023)-46 b(eduire)28 b(une)g(fonction)f
Fe(tri)p 1312 1519 V 38 w(par)p 1503 1519 V 38 w(tas)52
b(:)f(int)h(list)h(->)e(int)i(list)28 b Ff(qui)f(trie)h(une)g(liste)g
(d'en-)0 1640 y(tiers)33 b(par)g(ordre)f(croissan)m(t.)0
1810 y Fg(10.)h Ff(Quelle)g(est)h(la)e(complexit)m(\023)-46
b(e)34 b(de)f(cet)h(algorithme)e(de)h(tri)16 b(?)0 2192
y Fh(3)161 b(T)-13 b(ri)54 b(par)g(tas)g(dans)f(un)g(tableau)0
2412 y Ff(Dans)38 b(la)g(pratique,)h(le)f(tri)g(par)f(tas)i(est)f(r)m
(\023)-46 b(ealis)m(\023)g(e)39 b(dans)g(un)f(tableau)g(qui)h(repr)m
(\023)-46 b(esen)m(te)40 b(l'arbre)e(binaire)0 2532 y(asso)s(ci)m(\023)
-46 b(e)41 b(au)f(tas.)g(On)h(p)s(eut)f(ainsi)h(trier)f
Fd(sur)i(plac)-5 b(e)39 b Ff(un)i(tableau)f(:)g(on)g(n'utilise)i(pas)f
(d'autres)g(cases)0 2652 y(m)m(\023)-46 b(emoires)34
b(que)g(celles)g(qui)f(con)m(tiennen)m(t)i(le)e(tableau)g(\022)-49
b(a)32 b(trier.)0 2773 y(P)m(our)i(p)s(ouv)m(oir)d(^)-46
b(etre)33 b(sto)s(c)m(k)m(\023)-46 b(e)35 b(dans)f(un)f(tableau,)h(les)
g(tas)d(\023)-46 b(etudi)m(\023)g(es)34 b(ici)g(son)m(t)g(des)g(arbres)
g Fd(pr)-5 b(esque)35 b(c)-5 b(om-)0 2893 y(plets)26
b Ff(:)f(tous)h(les)h(niv)m(eaux)h(son)m(t)e(remplis)h(sauf)d(\023)-46
b(ev)m(en)m(tuellemen)m(t)29 b(le)d(dernier)h(qui)g(est)f(rempli)h(en)f
(partan)m(t)0 3013 y(de)33 b(la)f(gauc)m(he)i(jusqu'\022)-49
b(a)33 b(un)g(certain)h(p)s(oin)m(t)e(\()p Fd(cf)g Ff(exemple)j(suiv)-5
b(an)m(t\).)0 3134 y(D)m(\023)-46 b(esormais)33 b(le)g(p)m(\022)-46
b(ere)34 b(d'un)f(n\033ud)g(\(autre)f(que)i(la)e(racine\))h(sera)h
Fg(plus)j(grand)c Ff(que)h(ses)f(\014ls.)0 3254 y(On)g(utilisera)g(le)g
(t)m(yp)s(e)h(suiv)-5 b(an)m(t)33 b(:)p Black Black 103
3409 a Fe(type)52 b(Tas_vect)h(=)f({)f(tab)h(:)g(int)g(vect)g(;)g
(mutable)h(taille)g(:)e(int)h(})g(;;)0 3564 y Ff(Le)38
b(c)m(hamp)g Fe(taille)i Ff(repr)m(\023)-46 b(esen)m(te)40
b(le)e(nom)m(bre)g(de)g(n\033uds)h(du)f(tas)f(:)h(celui-ci)h(p)s(eut)c
(^)-46 b(etre)38 b(inf)m(\023)-46 b(erieur)38 b(au)0
3684 y(nom)m(bre)32 b(d')m(\023)-46 b(el)m(\023)g(emen)m(t)34
b(du)e(tableau)f Fe(tab)p Ff(.)i(La)e(racine)h(du)f(tas)h(est)g
Fe(tab.\(0\))p Ff(.)h(P)m(our)f(un)g(n\033ud)g(d'indice)h
Fb(i)0 3804 y Ff(donn)m(\023)-46 b(e,)33 b(son)g(\014ls)g(gauc)m(he)h
(a)e(l'indice)i(2)p Fb(i)22 b Ff(+)g(1)32 b(et)h(son)g(\014ls)g(droit)f
(l'indice)i(2)p Fb(i)22 b Ff(+)g(2.)33 b(Le)f(tableau)h(est)g(ainsi)0
3925 y(rempli)g(niv)m(eaux)i(par)d(niv)m(eaux,)j(de)e(gauc)m(he)g(\022)
-49 b(a)33 b(droite.)0 4045 y(Exemple:)i Fa(f)51 b Fe
(tab=[|9;8;7;6;1;5;3;2;4;0;)q(0;0)q(;0|])24 b(;)51 b(taille=9)j
Fa(g)1091 4283 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 1091 4283 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(9)769 4519 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 769 4519 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(8)793 4487 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 793 4487 a 608
4755 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end
 608 4755 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(6)632 4723 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 632 4723 a 447 4991 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-0 11
{InitCnode } NewNode end end
 447 4991 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(2)471 4959 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 471 4959 a 769
4991 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-1 11
{InitCnode } NewNode end end
 769 4991 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(4)793 4959 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 793 4959 a 930 4755 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 930 4755 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(1)954 4723 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 954 4723 a 1413
4519 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 1413 4519 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(7)1438 4487 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1438 4487 a 1252 4755 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end
 1252 4755 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(5)1276 4723
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1276 4723 a 1574 4755 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 1574 4755 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(3)1599 4723 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1599 4723 a 1843 4630 a
Fa( )-17 b(!)2234 4565 y Ff(0)83 b(1)g(2)g(3)g(4)f(5)h(6)g(7)g(8)p
2193 4605 1187 4 v 2191 4726 4 121 v 2234 4689 a(9)p
2323 4726 V 83 w(8)p 2455 4726 V 83 w(7)p 2587 4726 V
83 w(6)p 2718 4726 V 83 w(1)p 2850 4726 V 82 w(5)p 2982
4726 V 83 w(3)p 3114 4726 V 83 w(2)p 3246 4726 V 83 w(4)p
3377 4726 V 2193 4729 1187 4 v 0 5209 a Fg(11.)34 b Ff(Ecrire)h(une)g
(fonction)f Fe(max)p 1190 5209 31 4 v 38 w(noeud)53 b(:)e(Tas)p
1791 5209 V 38 w(vect)h(->)g(int)g(->)g(int)35 b Ff(qui)f(prend)h(un)g
(tas)f Fb(t)g Ff(et)h(un)0 5329 y(indice)24 b Fb(i)g
Ff(et)f(ren)m(v)m(oie)i(l'indice)g(du)f(plus)g(grand)c(\023)-46
b(el)m(\023)g(emen)m(t)25 b(parmis)f(le)f(n\033ud)h(d'indice)h
Fb(i)e Ff(et)h(ses)g(\()m(\023)-46 b(ev)m(en)m(tuels\))0
5449 y(\014ls,)33 b(sans)h(supp)s(oser)g(que)f(les)h(n\033uds)f(du)g
(tas)g(son)m(t)g(ordonn)m(\023)-46 b(es.)p Black 1885
6180 a(2)p Black eop
%%Page: 3 3
3 2 bop Black 0 84 a Ff(TP3)33 b Fc(Caml)2879 b Ff(T)-8
b(ri)32 b(par)h(tas)p 0 124 3820 4 v Black 0 407 a(Exemple)i(:)513
986 y(si)e(tab)27 b(=)1575 639 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 1575 639 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(7)1253 875 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 1253 875 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(6)1278 843 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1278 843 a 1092
1111 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end
 1092 1111 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(8)1117 1079 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1117 1079 a 931 1347 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-0 11
{InitCnode } NewNode end end
 931 1347 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(2)956 1315 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 956 1315 a 1253
1347 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-1 11
{InitCnode } NewNode end end
 1253 1347 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(4)1278 1315 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1278 1315 a 1414 1111 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 1414 1111 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(1)1439 1079
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1439 1079 a 1898 875 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 1898 875 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(3)1922 843 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1922 843 a 1737 1111 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end
 1737
1111 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(5)1761
1079 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1761 1079 a 2059 1111 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 2059 1111 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(9)2083 1079 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2083 1079 a
2300 986 a Fb(;)147 b Fe(max)p 2633 986 31 4 v 38 w(noeud)52
b(t)g(1)28 b Ff(=)f(3)0 1666 y Fg(12.)35 b Ff(Ecrire)h(une)g(fonction)f
Fe(entasser)53 b(:)e(Tas)p 1757 1666 V 38 w(vect)h(->)g(int)g(->)g
(unit)36 b Ff(qui)g(prends)g(en)f(argumen)m(t)0 1786
y(un)41 b(tas)f Fb(t)h Ff(non)f(n)m(\023)-46 b(ecessairemen)m(t)44
b(ordonn)m(\023)-46 b(e)41 b(et)g(un)f(indice)i Fb(i)p
Ff(.)f(On)f(supp)s(ose)i(que)g(les)f(arbres)g(binaires)0
1907 y(enracin)m(\023)-46 b(es)43 b(aux)e(niv)m(eaux)i(des)g(\014ls)e
(du)h(n\033ud)f(d'indice)i Fb(i)f Ff(son)m(t)f(ordonn)m(\023)-46
b(es.)43 b(Le)e(r^)-49 b(ole)41 b(de)h(la)f(fonction)0
2027 y Fe(entasser)36 b Ff(et)f(de)f(mo)s(di\014er)h(le)f(sous-arbre)h
(enracin)m(\023)-46 b(e)36 b(en)e Fb(i)h Ff(de)f(fa\030)-43
b(con)34 b(\022)-49 b(a)34 b(ce)h(qu'il)g(devienne)h(un)f(arbre)0
2147 y(binaire)e(ordonn)m(\023)-46 b(e)33 b(\(en)g(utilisan)m(t)h(la)e
(fonction)h Fe(max)p 1894 2147 V 37 w(noeud)p Ff(\).)0
2268 y(Exemple)i(:)763 2500 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 763 2500 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(7)441 2736 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 441 2736 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(6)465 2704 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 465 2704 a 280
2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end
 280 2972 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(8)304 2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 304 2940 a 119 3208 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-0 11
{InitCnode } NewNode end end
 119 3208 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(2)143 3176 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 143 3176 a 441
3208 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-1 11
{InitCnode } NewNode end end
 441 3208 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(4)465 3176 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 465 3176 a 602 2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 602 2972 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(1)627 2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 627 2940 a 1085
2736 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 1085 2736 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(3)1110 2704 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 1110 2704 a 924 2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end
 924 2972 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(5)949 2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 949 2940 a 1247
2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 1247 2972 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(9)1271 2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1271 2940 a 1586 2847 a Fe(entasser)53
b(t)f(1)1488 2879 y Fa(\000)-26 b(\000)k(\000)h(\000)f(\000)g(\000)h
(\000)f(\000)h(\000)f(\000)g(\000)h(\000)f(\000)c(!)3023
2500 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11 {InitCnode
} NewNode end end
 3023 2500 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(7)2701 2736 y
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0 11 {InitCnode
} NewNode end end
 2701 2736 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(8)2726 2704 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 2726 2704 a 2540 2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0 11 {InitCnode
} NewNode end end

2540 2972 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(6)2565
2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2565 2940 a 2379 3208 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-0 11
{InitCnode } NewNode end end
 2379 3208 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(2)2403 3176 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2403 3176 a
2701 3208 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0-1 11
{InitCnode } NewNode end end
 2701 3208 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Ff(4)2726 3176 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2726 3176 a 2862 2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1 11 {InitCnode
} NewNode end end
 2862 2972 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(1)2887 2940
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2887 2940 a 3346 2736 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1 11 {InitCnode
} NewNode end end
 3346 2736 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Ff(3)3370 2704 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 3370 2704 a 3184 2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-0 11 {InitCnode
} NewNode end end

3184 2972 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(5)3209
2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3209 2940 a 3507 2972 a
 tx@Dict begin tx@NodeDict begin {5.87494 2 div 7.73332 0.0 add 2 div
2 copy 0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1-1 11 {InitCnode
} NewNode end end
 3507 2972 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  5.87494 2 div 7.73332
0.0 add 2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0
360 arc closepath gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Ff(9)3531 2940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 3531 2940 a
0 3527 a Fg(13.)32 b Ff(En)h(d)m(\023)-46 b(eduire)33
b(une)g(fonction)f Fe(construire)p 1750 3527 31 4 v 39
w(tas)53 b(:)e(int)h(vect)g(->)g(Tas)p 2865 3527 V 38
w(vect)33 b Ff(qui)g(construit)g(un)0 3647 y(tas)43 b(\022)-49
b(a)43 b(partir)g(d'un)h(tableau)g(d'en)m(tiers)h(en)e(app)s(elan)m(t)h
(la)f(fonction)h Fe(entasser)h Ff(sur)f(les)g(indices)h(du)0
3768 y(tableau)33 b(en)g(commen\030)-43 b(can)m(t)34
b(par)f(les)g(feuilles.)0 3938 y Fg(14.)38 b Ff(Ecrire)g(une)h
(fonction)e Fe(retire)p 1357 3938 V 39 w(max)52 b(:)g(Tas)p
1857 3938 V 37 w(vect)h(->)e(unit)39 b Ff(qui)f(retire)h(l')m(\023)-46
b(el)m(\023)g(emen)m(t)39 b(maxim)m(um)0 4058 y(d'un)33
b(tas)g(en)h(p)s(erm)m(utan)m(t)f(cet)e(\023)-46 b(el)m(\023)g(emen)m
(t)35 b(a)m(v)m(ec)f(la)e(derni)m(\022)-46 b(ere)35 b(v)-5
b(aleur)33 b(du)g(tableau,)g(en)g(d)m(\023)-46 b(ecr)m(\023)g(emen)m
(tan)m(t)36 b(le)0 4179 y(c)m(hamp)e Fe(taille)g Ff(et)f(mettan)m(t)g
(\022)-49 b(a)32 b(jour)g(la)h(structure)h(du)e(tas.)0
4349 y Fg(15.)j Ff(En)g(d)m(\023)-46 b(eduire)36 b(une)f(fonction)g
Fe(vide)p 1457 4349 V 38 w(tas)52 b(:)g(Tas)p 1956 4349
V 37 w(vect)h(->)f(unit)35 b Ff(qui)h(vide)f(un)g(tas)g(en)g(app)s
(elan)m(t)0 4469 y(la)d(fonction)h Fe(retire)p 797 4469
V 39 w(max)g Ff(jusqu'\022)-49 b(a)33 b(ce)h(que)f(le)g(c)m(hamp)h
Fe(taille)g Ff(du)f(tas)f(soit)h(1.)0 4639 y Fg(16.)j
Ff(En)h(d)m(\023)-46 b(eduire)38 b(une)e(fonction)h Fe(tri)p
1414 4639 V 37 w(par)p 1604 4639 V 38 w(tas)p 1795 4639
V 38 w(vect)52 b(:)g(int)g(vect)g(->)g(int)g(vect)37
b Ff(qui)g(tri)f(un)h(ta-)0 4760 y(bleau)c(d'en)m(tiers)i(par)d(ordre)h
(croissan)m(t.)p Black 1885 6180 a(3)p Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
